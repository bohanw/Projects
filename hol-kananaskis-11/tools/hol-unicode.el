(global-set-key (kbd "C-!") "‚àÄ")
(global-set-key (kbd "C-?") "‚àÉ")
(global-set-key (kbd "C-&") "‚àß")
(global-set-key (kbd "C-|") "‚à®")
(global-set-key (kbd "C->") "‚Üí")
(global-set-key (kbd "C-M->") "‚áí")
(global-set-key (kbd "C-+") "‚áî")
(global-set-key (kbd "C-M-+") "‚Å∫")
(global-set-key (kbd "C-S-u") "‚à™")
(global-set-key (kbd "C-S-i") "‚à©")
(global-set-key (kbd "C-:") "‚àà")
(global-set-key (kbd "C-~") (lambda () (interactive) (insert "¬¨")))
(global-set-key (kbd "C-S-c") "‚äÜ")
(global-set-key (kbd "C-S-q") "‚â§")
(global-set-key (kbd "C-M-~") "‚àº")

(global-set-key (kbd "C-{") "‚ü¶")
(global-set-key (kbd "C-}") "‚üß")
(global-set-key (kbd "C-M-{") "‚¶É")
(global-set-key (kbd "C-M-}") "‚¶Ñ")

(define-prefix-command 'hol-unicode-p-map)
(define-prefix-command 'hol-unicode-P-map)
(define-prefix-command 'hol-unicode-not-map)
(define-prefix-command 'hol-unicode-subscript-map)
(define-prefix-command 'hol-unicode-superscript-map)
(define-prefix-command 'hol-unicode-U-map)
(define-prefix-command 'hol-unicode-lparen-map)
(define-prefix-command 'hol-unicode-rparen-map)
(define-key global-map (kbd "C-S-p") 'hol-unicode-p-map)
(define-key global-map (kbd "C-M-S-p") 'hol-unicode-P-map)
(define-key global-map (kbd "C-M-|") 'hol-unicode-not-map)
(define-key global-map (kbd "C-M-_") 'hol-unicode-subscript-map)
(define-key global-map (kbd "C-M-^") 'hol-unicode-superscript-map)
(define-key global-map (kbd "C-S-M-u") 'hol-unicode-U-map)
(define-key global-map (kbd "C-M-(") 'hol-unicode-lparen-map)
(define-key global-map (kbd "C-M-)") 'hol-unicode-rparen-map)

;; Greek : C-S-<char> for lower case version of Greek <char>
;;         add the Meta modifier for upper case Greek letter.
(global-set-key (kbd "C-S-a") "Œ±")
(global-set-key (kbd "C-S-b") "Œ≤")
(global-set-key (kbd "C-S-g") "Œ≥")
(global-set-key (kbd "C-S-d") "Œ¥")
(global-set-key (kbd "C-S-e") "Œµ")
(global-set-key (kbd "C-S-l") "Œª")
(global-set-key (kbd "C-S-m") "Œº")
(global-set-key (kbd "C-S-n") "ŒΩ")
(define-key hol-unicode-p-map "i" "œÄ")
(global-set-key (kbd "C-S-o") "œâ")
(global-set-key (kbd "C-S-r") "œÅ")
(global-set-key (kbd "C-S-s") "œÉ")
(global-set-key (kbd "C-S-t") "œÑ")
(define-key hol-unicode-p-map "h" "œÜ")
(define-key hol-unicode-p-map "s" "œà")

(global-set-key (kbd "C-S-M-g") "Œì")
(global-set-key (kbd "C-S-M-d") "Œî")
(global-set-key (kbd "C-S-M-l") "Œõ")
(global-set-key (kbd "C-S-M-o") "Œ©")
(define-key hol-unicode-P-map "i" "Œ†")
(define-key hol-unicode-P-map "h" "Œ¶")
(define-key hol-unicode-P-map "s" "Œ®")

(define-key hol-unicode-not-map "=" "‚â†")
(define-key hol-unicode-not-map ":" "‚àâ")
(define-key hol-unicode-not-map "0" "‚àÖ")
(define-key hol-unicode-not-map "~" "‚âÅ")
(define-key hol-unicode-not-map "<" "‚âÆ")
(define-key hol-unicode-not-map ">" "‚âØ")
(define-key hol-unicode-not-map (kbd "C-S-q") "‚â∞")

(define-key hol-unicode-subscript-map "1" "‚ÇÅ")
(define-key hol-unicode-subscript-map "2" "‚ÇÇ")
(define-key hol-unicode-subscript-map "3" "‚ÇÉ")
(define-key hol-unicode-subscript-map "4" "‚ÇÑ")
(define-key hol-unicode-subscript-map "5" "‚ÇÖ")
(define-key hol-unicode-subscript-map "6" "‚ÇÜ")
(define-key hol-unicode-subscript-map "7" "‚Çá")
(define-key hol-unicode-subscript-map "8" "‚Çà")
(define-key hol-unicode-subscript-map "9" "‚Çâ")
(define-key hol-unicode-subscript-map "0" "‚ÇÄ")
(define-key hol-unicode-subscript-map "t" "‚Çú")

(define-key hol-unicode-superscript-map "1" "¬π")
(define-key hol-unicode-superscript-map "2" "¬≤")
(define-key hol-unicode-superscript-map "3" "¬≥")
(define-key hol-unicode-superscript-map "4" "‚Å¥")
(define-key hol-unicode-superscript-map "5" "‚Åµ")
(define-key hol-unicode-superscript-map "6" "‚Å∂")
(define-key hol-unicode-superscript-map "7" "‚Å∑")
(define-key hol-unicode-superscript-map "8" "‚Å∏")
(define-key hol-unicode-superscript-map "9" "‚Åπ")
(define-key hol-unicode-superscript-map "0" "‚Å∞")
(define-key hol-unicode-superscript-map "+" "‚Å∫")
(define-key hol-unicode-superscript-map "-" "‚Åª")
(define-key hol-unicode-superscript-map "=" "‚Åº")

(define-key hol-unicode-superscript-map "A" "·¥¨")
(define-key hol-unicode-superscript-map "B" "·¥Æ")
(define-key hol-unicode-superscript-map "D" "·¥∞")
(define-key hol-unicode-superscript-map "E" "·¥±")
(define-key hol-unicode-superscript-map "G" "·¥≥")
(define-key hol-unicode-superscript-map "H" "·¥¥")
(define-key hol-unicode-superscript-map "I" "·¥µ")
(define-key hol-unicode-superscript-map "J" "·¥∂")
(define-key hol-unicode-superscript-map "K" "·¥∑")
(define-key hol-unicode-superscript-map "L" "·¥∏")
(define-key hol-unicode-superscript-map "M" "·¥π")
(define-key hol-unicode-superscript-map "N" "·¥∫")
(define-key hol-unicode-superscript-map "O" "·¥º")
(define-key hol-unicode-superscript-map "P" "·¥æ")
(define-key hol-unicode-superscript-map "R" "·¥ø")
(define-key hol-unicode-superscript-map "T" "·µÄ")
(define-key hol-unicode-superscript-map "U" "·µÅ")
(define-key hol-unicode-superscript-map "V" "‚±Ω")
(define-key hol-unicode-superscript-map "W" "·µÇ")
(define-key hol-unicode-superscript-map "a" "·µÉ")
(define-key hol-unicode-superscript-map "b" "·µá")
(define-key hol-unicode-superscript-map "c" "·∂ú")
(define-key hol-unicode-superscript-map "d" "·µà")
(define-key hol-unicode-superscript-map "e" "·µâ")
(define-key hol-unicode-superscript-map "f" "·∂†")
(define-key hol-unicode-superscript-map "g" "·µç")
(define-key hol-unicode-superscript-map "h" " ∞")
(define-key hol-unicode-superscript-map "i" "‚Å±")
(define-key hol-unicode-superscript-map "j" " ≤")
(define-key hol-unicode-superscript-map "k" "·µè")
(define-key hol-unicode-superscript-map "l" "À°")
(define-key hol-unicode-superscript-map "m" "·µê")
(define-key hol-unicode-superscript-map "n" "‚Åø")
(define-key hol-unicode-superscript-map "o" "·µí")
(define-key hol-unicode-superscript-map "p" "·µñ")
(define-key hol-unicode-superscript-map "r" " ≥")
(define-key hol-unicode-superscript-map "s" "À¢")
(define-key hol-unicode-superscript-map "t" "·µó")
(define-key hol-unicode-superscript-map "u" "·µò")
(define-key hol-unicode-superscript-map "v" "·µõ")
(define-key hol-unicode-superscript-map "w" " ∑")
(define-key hol-unicode-superscript-map "x" "À£")
(define-key hol-unicode-superscript-map "y" " ∏")
(define-key hol-unicode-superscript-map "z" "·∂ª")

;; ‚ÇÄ ‚ÇÅ ‚ÇÇ ‚ÇÉ ‚ÇÑ ‚ÇÖ ‚ÇÜ ‚Çá ‚Çà ‚Çâ ‚Çä ‚Çã ‚Çå

(define-prefix-command 'hol-unicode-zero-map)
(global-set-key (kbd "C-)") 'hol-unicode-zero-map)
(define-key hol-unicode-zero-map "+" "‚äï")
(define-key hol-unicode-zero-map "*" "‚äó")
(define-key hol-unicode-zero-map "-" "‚äñ")
(define-key hol-unicode-zero-map "." "‚äô")
(define-key hol-unicode-zero-map "/" "‚äò")

(define-key hol-unicode-U-map "u" "ùïå")
(define-key hol-unicode-U-map "+" "‚äé") ; U+228E "multiset union"
(define-key hol-unicode-U-map "<" "‚äå") ; U+228C called simply "multiset", used in HOL for FUNION

; parenthesis map - for various forms of parenthesis
(define-key hol-unicode-lparen-map (kbd "C-M-|") "‚¶á")
(define-key hol-unicode-rparen-map (kbd "C-M-|") "‚¶à")
(define-key hol-unicode-lparen-map (kbd "C-M-(") "‚¶Ö")
(define-key hol-unicode-rparen-map (kbd "C-M-)") "‚¶Ü")
(define-key hol-unicode-lparen-map (kbd "C-<") "‚ü®")
(define-key hol-unicode-rparen-map (kbd "C->") "‚ü©")
(define-key hol-unicode-lparen-map (kbd "C-M-<") "‚ü™")
(define-key hol-unicode-rparen-map (kbd "C-M->") "‚ü´")
(define-key hol-unicode-lparen-map (kbd "C-M-^") "‚é°")
(define-key hol-unicode-rparen-map (kbd "C-M-^") "‚é§")
