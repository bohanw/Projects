structure alignmentTheory :> alignmentTheory =
struct
  val _ = if !Globals.print_thy_loads then print "Loading alignmentTheory ... " else ()
  open Type Term Thm
  infixr -->

  fun C s t ty = mk_thy_const{Name=s,Thy=t,Ty=ty}
  fun T s t A = mk_thy_type{Tyop=s, Thy=t,Args=A}
  fun V s q = mk_var(s,q)
  val U     = mk_vartype
  (*  Parents *)
  local open wordsTheory
  in end;
  val _ = Theory.link_parents
          ("alignment",
          Arbnum.fromString "1488587383",
          Arbnum.fromString "665417")
          [("words",
           Arbnum.fromString "1488587186",
           Arbnum.fromString "513354")];
  val _ = Theory.incorporate_types "alignment" [];

  val idvector = 
    let fun ID(thy,oth) = {Thy = thy, Other = oth}
    in Vector.fromList
  [ID("min", "fun"), ID("min", "bool"), ID("fcp", "cart"),
   ID("num", "num"), ID("bool", "!"), ID("arithmetic", "*"),
   ID("arithmetic", "-"), ID("bool", "/\\"), ID("num", "0"),
   ID("prim_rec", "<"), ID("arithmetic", "<="), ID("min", "="),
   ID("min", "==>"), ID("arithmetic", "BIT1"), ID("arithmetic", "BIT2"),
   ID("bool", "COND"), ID("arithmetic", "DIV"), ID("arithmetic", "EXP"),
   ID("bit", "LOG2"), ID("arithmetic", "MIN"), ID("arithmetic", "NUMERAL"),
   ID("arithmetic", "ZERO"), ID("bool", "\\/"), ID("alignment", "align"),
   ID("alignment", "aligned"), ID("words", "bit_count_upto"),
   ID("alignment", "byte_align"), ID("alignment", "byte_aligned"),
   ID("fcp", "dimindex"), ID("bool", "itself"), ID("words", "n2w"),
   ID("bool", "the_value"), ID("words", "w2n"), ID("words", "word_2comp"),
   ID("words", "word_T"), ID("words", "word_add"), ID("words", "word_and"),
   ID("words", "word_extract"), ID("words", "word_lsb"),
   ID("words", "word_lsl"), ID("words", "word_lsr"),
   ID("words", "word_mul"), ID("words", "word_slice"),
   ID("words", "word_sub"), ID("bool", "~")]
  end;
  local open SharingTables
  in
  val tyvector = build_type_vector idvector
  [TYOP [1], TYV "'a", TYOP [2, 0, 1], TYOP [0, 2, 0], TYOP [0, 2, 2],
   TYOP [3], TYOP [0, 5, 3], TYOP [0, 5, 4], TYV "'a1", TYV "'a11",
   TYV "'a3", TYV "'a5", TYV "'a7", TYV "'a9", TYV "'j", TYV "'l",
   TYV "'n", TYV "'p", TYV "'r", TYV "'t", TYV "'v", TYV "'z", TYV "'a12",
   TYOP [0, 22, 5], TYV "'a17", TYOP [0, 24, 5], TYV "'a22",
   TYOP [0, 26, 5], TYV "'a24", TYOP [0, 28, 5], TYV "'g", TYOP [0, 30, 5],
   TYV "'w", TYOP [0, 32, 5], TYV "'b", TYOP [2, 0, 34], TYV "'a0",
   TYOP [2, 0, 36], TYV "'a10", TYOP [2, 0, 38], TYV "'a13",
   TYOP [2, 0, 40], TYV "'a14", TYOP [2, 0, 42], TYV "'a15",
   TYOP [2, 0, 44], TYV "'a16", TYOP [2, 0, 46], TYV "'a18",
   TYOP [2, 0, 48], TYV "'a19", TYOP [2, 0, 50], TYV "'a2",
   TYOP [2, 0, 52], TYV "'a20", TYOP [2, 0, 54], TYV "'a21",
   TYOP [2, 0, 56], TYV "'a23", TYOP [2, 0, 58], TYV "'a25",
   TYOP [2, 0, 60], TYV "'a26", TYOP [2, 0, 62], TYV "'a27",
   TYOP [2, 0, 64], TYV "'a4", TYOP [2, 0, 66], TYV "'a6", TYOP [2, 0, 68],
   TYV "'a8", TYOP [2, 0, 70], TYV "'h", TYOP [2, 0, 72], TYV "'i",
   TYOP [2, 0, 74], TYV "'k", TYOP [2, 0, 76], TYV "'m", TYOP [2, 0, 78],
   TYV "'o", TYOP [2, 0, 80], TYV "'q", TYOP [2, 0, 82], TYV "'s",
   TYOP [2, 0, 84], TYV "'u", TYOP [2, 0, 86], TYV "'x", TYOP [2, 0, 88],
   TYV "'y", TYOP [2, 0, 90], TYOP [0, 8, 0], TYOP [0, 92, 0],
   TYOP [0, 9, 0], TYOP [0, 94, 0], TYOP [0, 22, 0], TYOP [0, 96, 0],
   TYOP [0, 24, 0], TYOP [0, 98, 0], TYOP [0, 26, 0], TYOP [0, 100, 0],
   TYOP [0, 28, 0], TYOP [0, 102, 0], TYOP [0, 10, 0], TYOP [0, 104, 0],
   TYOP [0, 11, 0], TYOP [0, 106, 0], TYOP [0, 12, 0], TYOP [0, 108, 0],
   TYOP [0, 13, 0], TYOP [0, 110, 0], TYOP [0, 30, 0], TYOP [0, 112, 0],
   TYOP [0, 14, 0], TYOP [0, 114, 0], TYOP [0, 15, 0], TYOP [0, 116, 0],
   TYOP [0, 16, 0], TYOP [0, 118, 0], TYOP [0, 17, 0], TYOP [0, 120, 0],
   TYOP [0, 18, 0], TYOP [0, 122, 0], TYOP [0, 19, 0], TYOP [0, 124, 0],
   TYOP [0, 20, 0], TYOP [0, 126, 0], TYOP [0, 32, 0], TYOP [0, 128, 0],
   TYOP [0, 21, 0], TYOP [0, 130, 0], TYOP [0, 3, 0], TYOP [0, 37, 0],
   TYOP [0, 133, 0], TYOP [0, 39, 0], TYOP [0, 135, 0], TYOP [0, 41, 0],
   TYOP [0, 137, 0], TYOP [0, 43, 0], TYOP [0, 139, 0], TYOP [0, 45, 0],
   TYOP [0, 141, 0], TYOP [0, 47, 0], TYOP [0, 143, 0], TYOP [0, 49, 0],
   TYOP [0, 145, 0], TYOP [0, 51, 0], TYOP [0, 147, 0], TYOP [0, 53, 0],
   TYOP [0, 149, 0], TYOP [0, 55, 0], TYOP [0, 151, 0], TYOP [0, 57, 0],
   TYOP [0, 153, 0], TYOP [0, 59, 0], TYOP [0, 155, 0], TYOP [0, 61, 0],
   TYOP [0, 157, 0], TYOP [0, 63, 0], TYOP [0, 159, 0], TYOP [0, 65, 0],
   TYOP [0, 161, 0], TYOP [0, 67, 0], TYOP [0, 163, 0], TYOP [0, 69, 0],
   TYOP [0, 165, 0], TYOP [0, 71, 0], TYOP [0, 167, 0], TYOP [0, 35, 0],
   TYOP [0, 169, 0], TYOP [0, 73, 0], TYOP [0, 171, 0], TYOP [0, 75, 0],
   TYOP [0, 173, 0], TYOP [0, 77, 0], TYOP [0, 175, 0], TYOP [0, 79, 0],
   TYOP [0, 177, 0], TYOP [0, 81, 0], TYOP [0, 179, 0], TYOP [0, 83, 0],
   TYOP [0, 181, 0], TYOP [0, 85, 0], TYOP [0, 183, 0], TYOP [0, 87, 0],
   TYOP [0, 185, 0], TYOP [0, 89, 0], TYOP [0, 187, 0], TYOP [0, 91, 0],
   TYOP [0, 189, 0], TYOP [0, 23, 0], TYOP [0, 191, 0], TYOP [0, 25, 0],
   TYOP [0, 193, 0], TYOP [0, 27, 0], TYOP [0, 195, 0], TYOP [0, 29, 0],
   TYOP [0, 197, 0], TYOP [0, 31, 0], TYOP [0, 199, 0], TYOP [0, 33, 0],
   TYOP [0, 201, 0], TYOP [0, 5, 0], TYOP [0, 203, 0], TYOP [0, 5, 5],
   TYOP [0, 5, 205], TYOP [0, 0, 0], TYOP [0, 0, 207], TYOP [0, 5, 203],
   TYOP [0, 2, 3], TYOP [0, 2, 4], TYOP [0, 0, 211], TYOP [0, 5, 133],
   TYOP [0, 5, 135], TYOP [0, 5, 137], TYOP [0, 5, 139], TYOP [0, 5, 141],
   TYOP [0, 5, 143], TYOP [0, 5, 145], TYOP [0, 5, 147], TYOP [0, 5, 149],
   TYOP [0, 5, 151], TYOP [0, 5, 153], TYOP [0, 5, 155], TYOP [0, 5, 157],
   TYOP [0, 5, 159], TYOP [0, 5, 161], TYOP [0, 5, 163], TYOP [0, 5, 165],
   TYOP [0, 5, 167], TYOP [0, 5, 169], TYV "'c", TYOP [2, 0, 232],
   TYOP [0, 233, 0], TYOP [0, 5, 234], TYV "'d", TYOP [2, 0, 236],
   TYOP [0, 237, 0], TYOP [0, 5, 238], TYV "'e", TYOP [2, 0, 240],
   TYOP [0, 241, 0], TYOP [0, 5, 242], TYV "'f", TYOP [2, 0, 244],
   TYOP [0, 245, 0], TYOP [0, 5, 246], TYOP [0, 5, 171], TYOP [0, 5, 173],
   TYOP [0, 5, 175], TYOP [0, 5, 177], TYOP [0, 5, 179], TYOP [0, 5, 181],
   TYOP [0, 5, 183], TYOP [0, 5, 185], TYOP [0, 5, 187], TYOP [0, 5, 189],
   TYOP [0, 2, 5], TYOP [0, 5, 258], TYOP [29, 1], TYOP [0, 260, 5],
   TYOP [0, 5, 2], TYOP [0, 5, 37], TYOP [0, 5, 39], TYOP [0, 5, 41],
   TYOP [0, 5, 43], TYOP [0, 5, 45], TYOP [0, 5, 47], TYOP [0, 5, 49],
   TYOP [0, 5, 51], TYOP [0, 5, 53], TYOP [0, 5, 55], TYOP [0, 5, 57],
   TYOP [0, 5, 59], TYOP [0, 5, 61], TYOP [0, 5, 63], TYOP [0, 5, 65],
   TYOP [0, 5, 67], TYOP [0, 5, 69], TYOP [0, 5, 71], TYOP [0, 5, 35],
   TYOP [0, 5, 233], TYOP [0, 5, 237], TYOP [0, 5, 241], TYOP [0, 5, 245],
   TYOP [0, 5, 73], TYOP [0, 5, 75], TYOP [0, 5, 77], TYOP [0, 5, 79],
   TYOP [0, 5, 81], TYOP [0, 5, 83], TYOP [0, 5, 85], TYOP [0, 5, 87],
   TYOP [0, 5, 89], TYOP [0, 5, 91], TYOP [0, 237, 237],
   TYOP [0, 241, 241], TYOP [0, 245, 245], TYOP [0, 41, 41],
   TYOP [0, 41, 299], TYOP [0, 43, 43], TYOP [0, 43, 301],
   TYOP [0, 45, 45], TYOP [0, 45, 303], TYOP [0, 47, 47],
   TYOP [0, 47, 305], TYOP [0, 59, 59], TYOP [0, 59, 307],
   TYOP [0, 63, 63], TYOP [0, 63, 309], TYOP [0, 73, 73],
   TYOP [0, 73, 311], TYOP [0, 75, 75], TYOP [0, 75, 313],
   TYOP [0, 77, 77], TYOP [0, 77, 315], TYOP [0, 79, 79],
   TYOP [0, 79, 317], TYOP [0, 81, 81], TYOP [0, 81, 319],
   TYOP [0, 83, 83], TYOP [0, 83, 321], TYOP [0, 85, 85],
   TYOP [0, 85, 323], TYOP [0, 87, 87], TYOP [0, 87, 325], TYOP [0, 5, 7],
   TYOP [0, 2, 262], TYOP [0, 37, 37], TYOP [0, 37, 329], TYOP [0, 39, 39],
   TYOP [0, 39, 331], TYOP [0, 49, 49], TYOP [0, 49, 333],
   TYOP [0, 51, 51], TYOP [0, 51, 335], TYOP [0, 53, 53],
   TYOP [0, 53, 337], TYOP [0, 55, 55], TYOP [0, 55, 339],
   TYOP [0, 57, 57], TYOP [0, 57, 341], TYOP [0, 61, 61],
   TYOP [0, 61, 343], TYOP [0, 65, 65], TYOP [0, 65, 345],
   TYOP [0, 67, 67], TYOP [0, 67, 347], TYOP [0, 69, 69],
   TYOP [0, 69, 349], TYOP [0, 71, 71], TYOP [0, 71, 351],
   TYOP [0, 89, 89], TYOP [0, 89, 353], TYOP [0, 91, 91],
   TYOP [0, 91, 355]]
  end
  val _ = Theory.incorporate_consts "alignment" tyvector
     [("byte_aligned", 3), ("byte_align", 4), ("aligned", 6),
      ("align", 7)];

  local open SharingTables
  in
  val tmvector = build_term_vector idvector tyvector
  [TMV("a", 2), TMV("b", 2), TMV("f", 8), TMV("f", 9), TMV("f", 10),
   TMV("f", 11), TMV("f", 12), TMV("f", 13), TMV("f", 14), TMV("f", 15),
   TMV("f", 16), TMV("f", 17), TMV("f", 18), TMV("f", 19), TMV("f", 20),
   TMV("f", 21), TMV("f", 23), TMV("f", 25), TMV("f", 27), TMV("f", 29),
   TMV("f", 31), TMV("f", 33), TMV("p", 5), TMV("q", 5), TMV("w", 2),
   TMV("w", 35), TMV("x", 22), TMV("x", 24), TMV("x", 26), TMV("x", 28),
   TMV("x", 30), TMV("x", 32), TMV("x", 2), TMV("x", 5), TMV("y", 37),
   TMV("y", 39), TMV("y", 41), TMV("y", 43), TMV("y", 45), TMV("y", 47),
   TMV("y", 49), TMV("y", 51), TMV("y", 53), TMV("y", 55), TMV("y", 57),
   TMV("y", 59), TMV("y", 61), TMV("y", 63), TMV("y", 65), TMV("y", 67),
   TMV("y", 69), TMV("y", 71), TMV("y", 73), TMV("y", 75), TMV("y", 77),
   TMV("y", 79), TMV("y", 81), TMV("y", 83), TMV("y", 85), TMV("y", 87),
   TMV("y", 89), TMV("y", 91), TMC(4, 93), TMC(4, 95), TMC(4, 97),
   TMC(4, 99), TMC(4, 101), TMC(4, 103), TMC(4, 105), TMC(4, 107),
   TMC(4, 109), TMC(4, 111), TMC(4, 113), TMC(4, 115), TMC(4, 117),
   TMC(4, 119), TMC(4, 121), TMC(4, 123), TMC(4, 125), TMC(4, 127),
   TMC(4, 129), TMC(4, 131), TMC(4, 132), TMC(4, 134), TMC(4, 136),
   TMC(4, 138), TMC(4, 140), TMC(4, 142), TMC(4, 144), TMC(4, 146),
   TMC(4, 148), TMC(4, 150), TMC(4, 152), TMC(4, 154), TMC(4, 156),
   TMC(4, 158), TMC(4, 160), TMC(4, 162), TMC(4, 164), TMC(4, 166),
   TMC(4, 168), TMC(4, 170), TMC(4, 172), TMC(4, 174), TMC(4, 176),
   TMC(4, 178), TMC(4, 180), TMC(4, 182), TMC(4, 184), TMC(4, 186),
   TMC(4, 188), TMC(4, 190), TMC(4, 192), TMC(4, 194), TMC(4, 196),
   TMC(4, 198), TMC(4, 200), TMC(4, 202), TMC(4, 204), TMC(5, 206),
   TMC(6, 206), TMC(7, 208), TMC(8, 5), TMC(9, 209), TMC(10, 209),
   TMC(11, 208), TMC(11, 210), TMC(11, 209), TMC(12, 208), TMC(13, 205),
   TMC(14, 205), TMC(15, 212), TMC(16, 206), TMC(17, 206), TMC(18, 205),
   TMC(19, 206), TMC(20, 205), TMC(21, 5), TMC(22, 208), TMC(23, 7),
   TMC(24, 6), TMC(24, 213), TMC(24, 214), TMC(24, 215), TMC(24, 216),
   TMC(24, 217), TMC(24, 218), TMC(24, 219), TMC(24, 220), TMC(24, 221),
   TMC(24, 222), TMC(24, 223), TMC(24, 224), TMC(24, 225), TMC(24, 226),
   TMC(24, 227), TMC(24, 228), TMC(24, 229), TMC(24, 230), TMC(24, 231),
   TMC(24, 235), TMC(24, 239), TMC(24, 243), TMC(24, 247), TMC(24, 248),
   TMC(24, 249), TMC(24, 250), TMC(24, 251), TMC(24, 252), TMC(24, 253),
   TMC(24, 254), TMC(24, 255), TMC(24, 256), TMC(24, 257), TMC(25, 259),
   TMC(26, 4), TMC(27, 3), TMC(28, 261), TMC(30, 262), TMC(30, 263),
   TMC(30, 264), TMC(30, 265), TMC(30, 266), TMC(30, 267), TMC(30, 268),
   TMC(30, 269), TMC(30, 270), TMC(30, 271), TMC(30, 272), TMC(30, 273),
   TMC(30, 274), TMC(30, 275), TMC(30, 276), TMC(30, 277), TMC(30, 278),
   TMC(30, 279), TMC(30, 280), TMC(30, 281), TMC(30, 282), TMC(30, 283),
   TMC(30, 284), TMC(30, 285), TMC(30, 286), TMC(30, 287), TMC(30, 288),
   TMC(30, 289), TMC(30, 290), TMC(30, 291), TMC(30, 292), TMC(30, 293),
   TMC(30, 294), TMC(30, 295), TMC(31, 260), TMC(32, 258), TMC(33, 4),
   TMC(33, 296), TMC(33, 297), TMC(33, 298), TMC(34, 2), TMC(35, 211),
   TMC(35, 300), TMC(35, 302), TMC(35, 304), TMC(35, 306), TMC(35, 308),
   TMC(35, 310), TMC(35, 312), TMC(35, 314), TMC(35, 316), TMC(35, 318),
   TMC(35, 320), TMC(35, 322), TMC(35, 324), TMC(35, 326), TMC(36, 211),
   TMC(37, 327), TMC(38, 3), TMC(39, 328), TMC(40, 328), TMC(41, 211),
   TMC(42, 327), TMC(43, 211), TMC(43, 330), TMC(43, 332), TMC(43, 334),
   TMC(43, 336), TMC(43, 338), TMC(43, 340), TMC(43, 342), TMC(43, 344),
   TMC(43, 346), TMC(43, 348), TMC(43, 350), TMC(43, 352), TMC(43, 354),
   TMC(43, 356), TMC(44, 207)]
  end
  local
  val DT = Thm.disk_thm val read = Term.read_raw tmvector
  in
  fun op align_def x = x
    val op align_def =
    DT(((("alignment",0),[]),[]),
       [read"%118%22%82%24%126%139$1@$0@@%240%120%177%212@@%136%129%137@@@@$1@$0@@|@|@"])
  fun op aligned_def x = x
    val op aligned_def =
    DT(((("alignment",1),[]),[]),
       [read"%118%22%82%24%125%140$1@$0@@%126%139$1@$0@@$0@@|@|@"])
  fun op byte_align_def x = x
    val op byte_align_def =
    DT(((("alignment",2),[]),[]),
       [read"%82%24%126%175$0@@%139%134%132%177%212@@%136%130%129%129%137@@@@@@@$0@@|@"])
  fun op byte_aligned_def x = x
    val op byte_aligned_def =
    DT(((("alignment",3),[]),[]),
       [read"%82%24%125%176$0@@%140%134%132%177%212@@%136%130%129%129%137@@@@@@@$0@@|@"])
  fun op align_0 x = x
    val op align_0 =
    DT(((("alignment",4),
        [("alignment",[0]),
         ("arithmetic",[24,25,27,46,71,93,172,173,176,180,198,269]),
         ("bool",[25,36,43,52,54,56,63,96,101,104,105]),
         ("numeral",[3,5,8]),("words",[275,280])]),["DISK_THM"]),
       [read"%82%24%126%139%122@$0@@$0@|@"])
  fun op align_align x = x
    val op align_align =
    DT(((("alignment",5),
        [("alignment",[0]),
         ("arithmetic",
         [24,25,41,46,59,71,93,147,172,173,176,177,180,197,269,306]),
         ("bool",[25,36,43,51,52,53,54,56,58,63,96,101,104,105,124,125]),
         ("fcp",[13,15]),("numeral",[3,8]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[48])]),["DISK_THM"]),
       [read"%118%22%82%24%126%139$1@%139$1@$0@@@%139$1@$0@@|@|@"])
  fun op aligned_align x = x
    val op aligned_align =
    DT(((("alignment",6),
        [("alignment",[1,5]),("bool",[25,36,56])]),["DISK_THM"]),
       [read"%118%22%82%24%140$1@%139$1@$0@@|@|@"])
  fun op align_aligned x = x
    val op align_aligned =
    DT(((("alignment",7),
        [("alignment",[1]),("bool",[25,36,53])]),["DISK_THM"]),
       [read"%118%22%82%24%128%140$1@$0@@%126%139$1@$0@@$0@@|@|@"])
  fun op align_bitwise_and x = x
    val op align_bitwise_and =
    DT(((("alignment",8),
        [("alignment",[0]),
         ("arithmetic",
         [24,25,27,41,46,59,71,93,147,173,176,177,180,197,200,306]),
         ("bool",[25,36,51,52,54,58,63,96,101,104,105,124]),
         ("fcp",[13,15]),("numeral",[3,8]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[32,48,90,113,187,192])]),["DISK_THM"]),
       [read"%118%22%82%24%126%139$1@$0@@%234$0@%237%218@$1@@@|@|@"])
  fun op align_shift x = x
    val op align_shift =
    DT(((("alignment",9),
        [("alignment",[0]),
         ("arithmetic",
         [24,25,27,41,46,59,71,93,147,172,173,176,177,180,197,200,269,
          306]),
         ("bool",
         [25,26,27,30,36,43,51,52,54,56,58,63,93,96,101,104,105,124]),
         ("fcp",[13,15]),("numeral",[3,8]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[48,90,91,113])]),["DISK_THM"]),
       [read"%118%22%82%24%126%139$1@$0@@%237%238$0@$1@@$1@@|@|@"])
  fun op align_w2n x = x
    val op align_w2n =
    DT(((("alignment",10),
        [("alignment",[9]),
         ("arithmetic",
         [24,25,26,41,46,71,76,93,102,145,173,176,180,200,217,218,219]),
         ("bit",[24]),
         ("bool",[25,26,27,30,36,54,56,58,63,64,96,101,104,105,129]),
         ("numeral",[3,8]),
         ("words",[0,110,140,144,145,409,431])]),["DISK_THM"]),
       [read"%118%22%82%24%126%139$1@$0@@%178%119%132%213$0@@%133%136%130%137@@@$1@@@%133%136%130%137@@@$1@@@@|@|@"])
  fun op align_sub x = x
    val op align_sub =
    DT(((("alignment",11),
        [("alignment",[0,4]),
         ("arithmetic",
         [22,24,25,27,41,46,53,59,62,71,93,147,172,173,176,177,180,197,269,
          306,310]),
         ("bool",
         [14,25,26,27,30,36,43,51,52,53,54,56,58,63,64,93,96,101,104,105,
          124]),("fcp",[13,15]),("numeral",[3,5,7,8,16]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",
         [48,69,185,230,256,262,272,283,287,321,322,324,326,328,377,
          384])]),["DISK_THM"]),
       [read"%118%22%82%24%126%139$1@$0@@%131%127$1@%122@@$0@%241$0@%235%120$1@%136%129%137@@@@%122@$0@@@@|@|@"])
  fun op aligned_extract x = x
    val op aligned_extract =
    DT(((("alignment",12),
        [("alignment",[0,1,4]),
         ("arithmetic",
         [22,24,25,28,41,46,65,71,93,147,173,176,177,180,197,306]),
         ("bool",[25,26,27,30,36,51,52,53,54,56,58,63,96,101,104,105,124]),
         ("combin",[8]),("fcp",[13,15]),("num",[7]),("numeral",[3,8]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[48,49,51,185,228])]),["DISK_THM"]),
       [read"%118%22%82%24%125%140$1@$0@@%138%127$1@%122@@%126%235%120$1@%136%129%137@@@@%122@$0@@%178%122@@@@|@|@"])
  fun op aligned_0 x = x
    val op aligned_0 =
    DT(((("alignment",13),
        [("alignment",[12]),
         ("arithmetic",
         [22,24,25,41,46,62,71,93,147,173,176,177,180,197,306]),
         ("bool",
         [25,26,27,36,51,52,53,54,56,58,63,93,95,96,101,104,105,124,145]),
         ("combin",[8]),("fcp",[13,15]),("numeral",[3,8]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[49,51,113,185,228,270])]),["DISK_THM"]),
       [read"%121%118%22%140$0@%178%122@@|@@%101%25%159%122@$0@|@@"])
  fun op aligned_1_lsb x = x
    val op aligned_1_lsb =
    DT(((("alignment",14),
        [("alignment",[12]),
         ("arithmetic",
         [22,24,25,41,46,71,93,130,147,173,176,177,180,197,306]),
         ("bool",
         [25,26,27,36,51,52,53,54,56,58,63,93,95,96,101,104,105,124,145]),
         ("combin",[8]),("fcp",[13,15]),("numeral",[3,6,8]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[46,49,51,113,185,228])]),["DISK_THM"]),
       [read"%82%24%125%140%136%129%137@@@$0@@%256%236$0@@@|@"])
  fun op aligned_ge_dim x = x
    val op aligned_ge_dim =
    DT(((("alignment",15),
        [("alignment",[12]),
         ("arithmetic",
         [22,24,25,28,41,46,65,71,93,147,173,176,177,180,197,306]),
         ("bool",[25,26,27,36,51,52,53,54,56,58,63,96,101,104,105,124]),
         ("combin",[8]),("fcp",[13,15]),("num",[7]),("numeral",[3,8]),
         ("prim_rec",[6]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[49,51,185,228])]),["DISK_THM"]),
       [read"%118%22%82%24%128%124%177%212@@$1@@%125%140$1@$0@@%126$0@%178%122@@@@|@|@"])
  fun op aligned_bitwise_and x = x
    val op aligned_bitwise_and =
    DT(((("alignment",16),
        [("alignment",[1,8]),
         ("arithmetic",[24,25,27,41,46,59,71,93,173,176,180,200]),
         ("bit",[113]),
         ("bool",[25,26,27,30,36,51,52,53,54,58,63,96,101,104,105,124]),
         ("fcp",[13,15]),("numeral",[3,8]),
         ("words",[32,90,113,185,187,192,242])]),["DISK_THM"]),
       [read"%118%22%82%24%125%140$1@$0@@%126%234$0@%178%120%133%136%130%137@@@$1@@%136%129%137@@@@@@%178%122@@@|@|@"])
  fun op aligned_bit_count_upto x = x
    val op aligned_bit_count_upto =
    DT(((("alignment",17),
        [("alignment",[12]),
         ("arithmetic",
         [22,24,25,41,46,59,62,71,93,147,172,173,176,177,180,197,269,304,
          306]),
         ("bool",
         [25,26,27,30,36,43,51,52,53,54,56,58,63,93,95,96,101,104,105,124,
          145,152]),("combin",[8]),("fcp",[13,15]),("numeral",[3,8]),
         ("prim_rec",[6]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[49,51,113,185,228,577])]),["DISK_THM"]),
       [read"%118%22%82%24%125%140$1@$0@@%127%174%135%177%212@@$1@@$0@@%122@@|@|@"])
  fun op aligned_add_sub x = x
    val op aligned_add_sub =
    DT(((("alignment",18),
        [("alignment",[12,15]),
         ("arithmetic",
         [22,24,25,27,28,41,46,59,62,65,71,93,172,173,176,177,180,199,200,
          269,295,304]),
         ("bool",
         [25,26,27,30,36,43,51,52,53,54,56,58,63,93,96,101,104,105,107,124,
          129,147,169]),("num",[7]),("numeral",[3,5,8]),("prim_rec",[4,6]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[69,270,278,297,298,321,325,326,377])]),["DISK_THM"]),
       [read"%118%22%82%0%82%1%128%140$2@$0@@%121%125%140$2@%219$1@$0@@@%140$2@$1@@@%125%140$2@%241$1@$0@@@%140$2@$1@@@@|@|@|@"])
  fun op aligned_add_sub_cor x = x
    val op aligned_add_sub_cor =
    DT(((("alignment",19),
        [("alignment",[18]),("bool",[25,53,54,63,100]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%118%22%82%0%82%1%128%121%140$2@$1@@%140$2@$0@@@%121%140$2@%219$1@$0@@@%140$2@%241$1@$0@@@@|@|@|@"])
  fun op aligned_mul_shift_1 x = x
    val op aligned_mul_shift_1 =
    DT(((("alignment",20),
        [("alignment",[12,15]),
         ("arithmetic",
         [22,24,25,26,27,28,41,46,59,62,65,69,71,93,95,173,176,180,199,200,
          295,304]),("bit",[42,69]),
         ("bool",
         [25,26,27,30,36,51,52,54,56,58,63,96,101,104,105,129,147,169]),
         ("num",[7]),("numeral",[3,5,8]),
         ("words",
         [113,144,253,270,298,325,326,398,408,419])]),["DISK_THM"]),
       [read"%118%22%82%24%140$1@%239%237%178%136%129%137@@@@$1@@$0@@|@|@"])
  fun op aligned_add_sub_prod x = x
    val op aligned_add_sub_prod =
    DT(((("alignment",21),
        [("alignment",[18,20]),("bool",[25,26,53,54,63,100]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%118%22%82%24%82%32%121%125%140$2@%219$1@%239%237%178%136%129%137@@@@$2@@$0@@@@%140$2@$1@@@%125%140$2@%241$1@%239%237%178%136%129%137@@@@$2@@$0@@@@%140$2@$1@@@|@|@|@"])
  fun op aligned_imp x = x
    val op aligned_imp =
    DT(((("alignment",22),
        [("alignment",[12]),
         ("arithmetic",
         [22,24,25,27,28,41,46,62,65,71,93,147,173,176,177,180,197,306]),
         ("bool",
         [25,26,27,36,43,51,52,53,54,56,58,63,93,95,96,101,104,105,124,
          145]),("combin",[8]),("fcp",[13,15]),("num",[7]),
         ("numeral",[3,5,8]),("prim_rec",[6]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[49,51,113,185,228])]),["DISK_THM"]),
       [read"%118%22%118%23%82%24%128%121%123$2@$1@@%140$1@$0@@@%140$2@$0@@|@|@|@"])
  fun op aligned_add_sub_123 x = x
    val op aligned_add_sub_123 =
    DT(((("alignment",23),
        [("alignment",[13,21]),("arithmetic",[275]),
         ("bool",[8,14,26,27,56,58,63,64]),
         ("numeral",[0,3,5,6,9,17,21,32,33,34,35,39,40,41]),
         ("words",[69,321,323,324,325,377,383,410])]),["DISK_THM"]),
       [read"%121%82%24%82%32%121%125%140%136%129%137@@@%219$1@%239%178%136%130%137@@@@$0@@@@%140%136%129%137@@@$1@@@%125%140%136%129%137@@@%241$1@%239%178%136%130%137@@@@$0@@@@%140%136%129%137@@@$1@@@|@|@@%121%82%32%121%140%136%129%137@@@%239%178%136%130%137@@@@$0@@@%140%136%129%137@@@%239%214%178%136%130%137@@@@@$0@@@|@@%121%82%24%82%32%121%125%140%136%130%137@@@%219$1@%239%178%136%130%129%137@@@@@$0@@@@%140%136%130%137@@@$1@@@%125%140%136%130%137@@@%241$1@%239%178%136%130%129%137@@@@@$0@@@@%140%136%130%137@@@$1@@@|@|@@%121%82%32%121%140%136%130%137@@@%239%178%136%130%129%137@@@@@$0@@@%140%136%130%137@@@%239%214%178%136%130%129%137@@@@@@$0@@@|@@%121%82%24%82%32%121%125%140%136%129%129%137@@@@%219$1@%239%178%136%130%129%129%137@@@@@@$0@@@@%140%136%129%129%137@@@@$1@@@%125%140%136%129%129%137@@@@%241$1@%239%178%136%130%129%129%137@@@@@@$0@@@@%140%136%129%129%137@@@@$1@@@|@|@@%82%32%121%140%136%129%129%137@@@@%239%178%136%130%129%129%137@@@@@@$0@@@%140%136%129%129%137@@@@%239%214%178%136%130%129%129%137@@@@@@@$0@@@|@@@@@@"])
  fun op aligned_numeric x = x
    val op aligned_numeric =
    DT(((("alignment",24),
        [("alignment",[23]),
         ("arithmetic",[1,3,4,17,18,25,27,71,74,75,122,173,177,180]),
         ("bool",[8,14,25,26,27,36,52,54,56,58,63,64,104]),
         ("numeral",[0,3,5,6,8,9,17,21,32,34,35,39,40,41]),
         ("words",[69,156,157,322,324,327,375,377])]),["DISK_THM"]),
       [read"%121%118%33%140%136%129%129%137@@@@%178%136%130%129%129$0@@@@@@|@@%121%118%33%159%136%130%137@@@%197%136%130%129$0@@@@@|@@%121%118%33%160%136%129%137@@@%198%136%130$0@@@@|@@%121%118%33%161%136%129%129%137@@@@%215%199%136%130%129%129$0@@@@@@@|@@%121%118%33%162%136%130%137@@@%216%200%136%130%129$0@@@@@@|@@%121%118%33%163%136%129%137@@@%217%201%136%130$0@@@@@|@@%121%72%30%102%52%116%20%125%164%136%129%129%137@@@@%226$1@%202%136%129%129%129$0$2@@@@@@@@@%164%136%129%129%137@@@@%226$1@%202%136%129%129%129%137@@@@@@@@|@|@|@@%121%118%33%103%53%73%8%125%165%136%129%129%137@@@@%227$1@%203%136%129%129%130$2@@@@@@@@%165%136%129%129%137@@@@%227$1@%203%136%129%129%137@@@@@@@|@|@|@@%121%118%33%104%54%74%9%125%166%136%129%129%137@@@@%228$1@%204%136%129%130%129$2@@@@@@@@%166%136%129%129%137@@@@%228$1@%204%136%129%137@@@@@@|@|@|@@%121%118%33%105%55%75%10%125%167%136%129%129%137@@@@%229$1@%205%136%129%130%130$2@@@@@@@@%167%136%129%129%137@@@@%229$1@%205%136%129%130%137@@@@@@@|@|@|@@%121%118%33%106%56%76%11%125%168%136%129%129%137@@@@%230$1@%206%136%130%129%129$2@@@@@@@@%168%136%129%129%137@@@@$1@@|@|@|@@%121%118%33%107%57%77%12%125%169%136%129%129%137@@@@%231$1@%207%136%130%129%130$2@@@@@@@@%169%136%129%129%137@@@@%231$1@%207%136%130%129%137@@@@@@@|@|@|@@%121%118%33%108%58%78%13%125%170%136%129%129%137@@@@%232$1@%208%136%130%130%129$2@@@@@@@@%170%136%129%129%137@@@@%232$1@%208%136%130%137@@@@@@|@|@|@@%121%118%33%109%59%79%14%125%171%136%129%129%137@@@@%233$1@%209%136%130%130%130$2@@@@@@@@%171%136%129%129%137@@@@%233$1@%209%136%130%130%137@@@@@@@|@|@|@@%121%80%31%110%60%117%21%125%172%136%129%129%137@@@@%254$1@%210%136%129%129%129$0$2@@@@@@@@@%172%136%129%129%137@@@@%254$1@%210%136%129%129%129%137@@@@@@@@|@|@|@@%121%118%33%111%61%81%15%125%173%136%129%129%137@@@@%255$1@%211%136%129%129%130$2@@@@@@@@%173%136%129%129%137@@@@%255$1@%211%136%129%129%137@@@@@@@|@|@|@@%121%118%33%83%34%62%2%125%141%136%129%129%137@@@@%242$1@%179%136%129%130%129$2@@@@@@@@%141%136%129%129%137@@@@%242$1@%179%136%129%137@@@@@@|@|@|@@%121%118%33%91%42%68%4%125%149%136%129%129%137@@@@%246$1@%187%136%129%130%130$2@@@@@@@@%149%136%129%129%137@@@@%246$1@%187%136%129%130%137@@@@@@@|@|@|@@%121%118%33%98%49%69%5%125%156%136%129%129%137@@@@%251$1@%194%136%130%129%129$2@@@@@@@@%156%136%129%129%137@@@@$1@@|@|@|@@%121%118%33%99%50%70%6%125%157%136%129%129%137@@@@%252$1@%195%136%130%129%130$2@@@@@@@@%157%136%129%129%137@@@@%252$1@%195%136%130%129%137@@@@@@@|@|@|@@%121%118%33%100%51%71%7%125%158%136%129%129%137@@@@%253$1@%196%136%130%130%129$2@@@@@@@@%158%136%129%129%137@@@@%253$1@%196%136%130%137@@@@@@|@|@|@@%121%118%33%84%35%63%3%125%142%136%129%129%137@@@@%243$1@%180%136%130%130%130$2@@@@@@@@%142%136%129%129%137@@@@%243$1@%180%136%130%130%137@@@@@@@|@|@|@@%121%64%26%85%36%112%16%125%143%136%130%137@@@%220$1@%181%136%129%129$0$2@@@@@@@@%143%136%130%137@@@%220$1@%181%136%129%129%137@@@@@@@|@|@|@@%121%118%33%86%37%125%144%136%130%137@@@%221$0@%182%136%129%130$1@@@@@@@%144%136%130%137@@@%221$0@%182%136%129%137@@@@@@|@|@@%121%118%33%87%38%125%145%136%130%137@@@%222$0@%183%136%130%129$1@@@@@@@%145%136%130%137@@@$0@@|@|@@%121%118%33%88%39%125%146%136%130%137@@@%223$0@%184%136%130%130$1@@@@@@@%146%136%130%137@@@%223$0@%184%136%130%137@@@@@@|@|@@%121%65%27%89%40%113%17%125%147%136%130%137@@@%244$1@%185%136%129%129$0$2@@@@@@@@%147%136%130%137@@@%244$1@%185%136%129%129%137@@@@@@@|@|@|@@%121%118%33%90%41%125%148%136%130%137@@@%245$0@%186%136%129%130$1@@@@@@@%148%136%130%137@@@%245$0@%186%136%129%137@@@@@@|@|@@%121%118%33%92%43%125%150%136%130%137@@@%247$0@%188%136%130%129$1@@@@@@@%150%136%130%137@@@$0@@|@|@@%121%118%33%93%44%125%151%136%130%137@@@%248$0@%189%136%130%130$1@@@@@@@%151%136%130%137@@@%248$0@%189%136%130%137@@@@@@|@|@@%121%66%28%94%45%114%18%125%152%136%129%137@@@%224$1@%190%136%129$0$2@@@@@@@%152%136%129%137@@@%224$1@%190%136%129%137@@@@@@|@|@|@@%121%67%29%95%46%115%19%125%153%136%129%137@@@%249$1@%191%136%129$0$2@@@@@@@%153%136%129%137@@@%249$1@%191%136%129%137@@@@@@|@|@|@@%121%118%33%96%47%125%154%136%129%137@@@%225$0@%192%136%130$1@@@@@@%154%136%129%137@@@$0@@|@|@@%118%33%97%48%125%155%136%129%137@@@%250$0@%193%136%130$1@@@@@@%155%136%129%137@@@$0@@|@|@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"])
  end
  val _ = DB.bindl "alignment"
  [("align_def",align_def,DB.Def), ("aligned_def",aligned_def,DB.Def),
   ("byte_align_def",byte_align_def,DB.Def),
   ("byte_aligned_def",byte_aligned_def,DB.Def),
   ("align_0",align_0,DB.Thm), ("align_align",align_align,DB.Thm),
   ("aligned_align",aligned_align,DB.Thm),
   ("align_aligned",align_aligned,DB.Thm),
   ("align_bitwise_and",align_bitwise_and,DB.Thm),
   ("align_shift",align_shift,DB.Thm), ("align_w2n",align_w2n,DB.Thm),
   ("align_sub",align_sub,DB.Thm),
   ("aligned_extract",aligned_extract,DB.Thm),
   ("aligned_0",aligned_0,DB.Thm), ("aligned_1_lsb",aligned_1_lsb,DB.Thm),
   ("aligned_ge_dim",aligned_ge_dim,DB.Thm),
   ("aligned_bitwise_and",aligned_bitwise_and,DB.Thm),
   ("aligned_bit_count_upto",aligned_bit_count_upto,DB.Thm),
   ("aligned_add_sub",aligned_add_sub,DB.Thm),
   ("aligned_add_sub_cor",aligned_add_sub_cor,DB.Thm),
   ("aligned_mul_shift_1",aligned_mul_shift_1,DB.Thm),
   ("aligned_add_sub_prod",aligned_add_sub_prod,DB.Thm),
   ("aligned_imp",aligned_imp,DB.Thm),
   ("aligned_add_sub_123",aligned_add_sub_123,DB.Thm),
   ("aligned_numeric",aligned_numeric,DB.Thm)]

  local open Portable GrammarSpecials Parse
    fun UTOFF f = Feedback.trace("Parse.unicode_trace_off_complaints",0)f
  in
  val _ = mk_local_grms [("wordsTheory.words_grammars",
                          wordsTheory.words_grammars)]
  val _ = List.app (update_grms reveal) []
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("align", (Term.prim_mk_const { Name = "align", Thy = "alignment"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("align", (Term.prim_mk_const { Name = "align", Thy = "alignment"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("aligned", (Term.prim_mk_const { Name = "aligned", Thy = "alignment"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("aligned", (Term.prim_mk_const { Name = "aligned", Thy = "alignment"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("byte_align", (Term.prim_mk_const { Name = "byte_align", Thy = "alignment"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("byte_align", (Term.prim_mk_const { Name = "byte_align", Thy = "alignment"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("byte_aligned", (Term.prim_mk_const { Name = "byte_aligned", Thy = "alignment"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("byte_aligned", (Term.prim_mk_const { Name = "byte_aligned", Thy = "alignment"}))
  val alignment_grammars = Parse.current_lgrms()
  end
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "alignment",
    thydataty = "compute",
    data =
        "alignment.align_def alignment.aligned_def alignment.byte_aligned_def alignment.byte_align_def"
  }

val _ = if !Globals.print_thy_loads then print "done\n" else ()
val _ = Theory.load_complete "alignment"
end
