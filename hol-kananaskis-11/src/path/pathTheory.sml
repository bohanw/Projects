structure pathTheory :> pathTheory =
struct
  val _ = if !Globals.print_thy_loads then print "Loading pathTheory ... " else ()
  open Type Term Thm
  infixr -->

  fun C s t ty = mk_thy_const{Name=s,Thy=t,Ty=ty}
  fun T s t A = mk_thy_type{Tyop=s, Thy=t,Args=A}
  fun V s q = mk_var(s,q)
  val U     = mk_vartype
  (*  Parents *)
  local open fixedPointTheory llistTheory
  in end;
  val _ = Theory.link_parents
          ("path",
          Arbnum.fromString "1488588331",
          Arbnum.fromString "856973")
          [("fixedPoint",
           Arbnum.fromString "1488586286",
           Arbnum.fromString "882111"),
           ("llist",
           Arbnum.fromString "1488588204",
           Arbnum.fromString "981600")];
  val _ = Theory.incorporate_types "path" [("path", 2)];

  val idvector = 
    let fun ID(thy,oth) = {Thy = thy, Other = oth}
    in Vector.fromList
  [ID("min", "fun"), ID("path", "path"), ID("option", "option"),
   ID("pair", "prod"), ID("min", "bool"), ID("list", "list"),
   ID("llist", "llist"), ID("num", "num"), ID("bool", "!"),
   ID("pair", "##"), ID("arithmetic", "+"), ID("pair", ","),
   ID("arithmetic", "-"), ID("bool", "/\\"), ID("num", "0"),
   ID("prim_rec", "<"), ID("arithmetic", "<="), ID("min", "="),
   ID("min", "==>"), ID("bool", "?"), ID("list", "APPEND"),
   ID("arithmetic", "BIT1"), ID("arithmetic", "BIT2"), ID("bool", "COND"),
   ID("list", "CONS"), ID("list", "EL"), ID("pred_set", "EMPTY"),
   ID("bool", "F"), ID("pair", "FST"), ID("pred_set", "GSPEC"),
   ID("pred_set", "IMAGE"), ID("bool", "IN"), ID("pred_set", "INSERT"),
   ID("llist", "LAPPEND"), ID("llist", "LCONS"), ID("list", "LENGTH"),
   ID("llist", "LFINITE"), ID("llist", "LMAP"), ID("llist", "LNIL"),
   ID("llist", "LNTH"), ID("llist", "LTAKE"), ID("llist", "LUNFOLD"),
   ID("list", "NIL"), ID("option", "NONE"), ID("arithmetic", "NUMERAL"),
   ID("option", "OPTION_MAP"), ID("path", "PL"), ID("path", "SN"),
   ID("pair", "SND"), ID("option", "SOME"), ID("num", "SUC"),
   ID("bool", "T"), ID("option", "THE"), ID("bool", "TYPE_DEFINITION"),
   ID("pair", "UNCURRY"), ID("pred_set", "UNION"), ID("pred_set", "UNIV"),
   ID("relation", "WF"), ID("arithmetic", "ZERO"), ID("bool", "\\/"),
   ID("path", "drop"), ID("path", "el"), ID("path", "every"),
   ID("path", "exists"), ID("path", "filter"), ID("path", "finite"),
   ID("path", "first"), ID("path", "firstP_at"), ID("path", "first_label"),
   ID("path", "fromPath"), ID("fixedPoint", "gfp"),
   ID("path", "is_stopped"), ID("path", "labels"), ID("path", "last"),
   ID("path", "length"), ID("path", "mem"), ID("fixedPoint", "monotone"),
   ID("path", "nth_label"), ID("combin", "o"), ID("path", "okpath"),
   ID("path", "okpath_f"), ID("option", "option_CASE"),
   ID("pair", "pair_CASE"), ID("path", "parallel_comp"),
   ID("path", "pconcat"), ID("path", "pcons"), ID("path", "pgenerate"),
   ID("path", "plink"), ID("path", "pmap"), ID("path", "seg"),
   ID("path", "stopped_at"), ID("path", "tail"), ID("path", "take"),
   ID("llist", "toList"), ID("path", "toPath"),
   ID("path", "trace_machine"), ID("path", "unfold"), ID("bool", "~")]
  end;
  local open SharingTables
  in
  val tyvector = build_type_vector idvector
  [TYV "'b", TYV "'a", TYOP [1, 1, 0], TYV "'c", TYOP [0, 3, 2],
   TYOP [3, 3, 0], TYOP [2, 5], TYOP [0, 3, 6], TYOP [0, 7, 4],
   TYOP [0, 3, 1], TYOP [0, 9, 8], TYOP [4], TYOP [5, 1], TYOP [0, 12, 11],
   TYOP [0, 1, 13], TYOP [0, 12, 14], TYOP [0, 13, 15], TYOP [3, 0, 1],
   TYOP [6, 17], TYOP [3, 1, 18], TYOP [0, 19, 2], TYOP [0, 2, 2],
   TYOP [7], TYOP [0, 22, 21], TYOP [0, 1, 2], TYOP [0, 22, 23], TYV "'d",
   TYOP [1, 3, 26], TYOP [0, 2, 27], TYOP [0, 0, 26], TYOP [0, 29, 28],
   TYOP [0, 1, 3], TYOP [0, 31, 30], TYOP [0, 2, 21], TYOP [0, 22, 0],
   TYOP [0, 34, 2], TYOP [0, 22, 1], TYOP [0, 36, 35], TYOP [0, 0, 21],
   TYOP [0, 1, 38], TYOP [0, 2, 38], TYV "'e", TYOP [3, 3, 41],
   TYOP [0, 42, 11], TYOP [0, 0, 43], TYOP [3, 1, 26], TYOP [0, 45, 44],
   TYOP [0, 41, 11], TYOP [0, 0, 47], TYOP [0, 26, 48], TYOP [0, 49, 46],
   TYOP [0, 3, 11], TYOP [0, 0, 51], TYOP [0, 1, 52], TYOP [0, 53, 50],
   TYOP [0, 2, 11], TYOP [0, 55, 55], TYOP [0, 1, 11], TYOP [0, 0, 57],
   TYOP [0, 1, 58], TYOP [0, 59, 56], TYOP [0, 59, 55], TYOP [1, 0, 1],
   TYOP [0, 62, 1], TYOP [0, 22, 63], TYOP [0, 1, 55], TYOP [2, 22],
   TYOP [0, 2, 66], TYOP [0, 2, 1], TYOP [6, 0], TYOP [0, 2, 69],
   TYOP [0, 2, 19], TYOP [0, 2, 0], TYOP [0, 22, 11], TYOP [0, 2, 73],
   TYOP [0, 57, 74], TYOP [0, 57, 21], TYOP [0, 57, 55], TYOP [0, 22, 68],
   TYOP [0, 59, 11], TYOP [0, 3, 57], TYOP [0, 1, 80], TYOP [0, 0, 11],
   TYOP [0, 3, 82], TYOP [0, 0, 83], TYOP [0, 1, 82], TYOP [0, 2, 55],
   TYOP [0, 1, 1], TYOP [0, 1, 0], TYOP [0, 1, 26], TYOP [3, 1, 3],
   TYOP [2, 90], TYOP [0, 1, 91], TYOP [3, 3, 1], TYOP [2, 93],
   TYOP [3, 0, 94], TYOP [0, 1, 95], TYOP [1, 0, 3], TYOP [0, 1, 97],
   TYOP [0, 0, 0], TYOP [0, 0, 3], TYOP [0, 3, 26], TYOP [0, 26, 0],
   TYOP [0, 26, 3], TYOP [5, 0], TYOP [0, 3, 52], TYOP [1, 1, 3],
   TYOP [1, 1, 26], TYOP [1, 12, 1], TYOP [3, 1, 0], TYOP [1, 109, 3],
   TYOP [1, 90, 0], TYOP [1, 3, 0], TYOP [6, 1], TYOP [0, 57, 11],
   TYOP [0, 82, 11], TYOP [0, 51, 11], TYOP [0, 26, 11], TYOP [0, 117, 11],
   TYOP [0, 47, 11], TYOP [0, 87, 11], TYOP [0, 120, 11], TYOP [0, 88, 11],
   TYOP [0, 122, 11], TYOP [0, 31, 11], TYOP [0, 124, 11],
   TYOP [0, 114, 11], TYOP [0, 85, 11], TYOP [0, 127, 11],
   TYOP [0, 79, 11], TYOP [0, 53, 11], TYOP [0, 130, 11], TYOP [0, 81, 11],
   TYOP [0, 132, 11], TYOP [0, 92, 11], TYOP [0, 134, 11],
   TYOP [0, 96, 11], TYOP [0, 136, 11], TYOP [0, 99, 11],
   TYOP [0, 138, 11], TYOP [0, 29, 11], TYOP [0, 140, 11],
   TYOP [0, 84, 11], TYOP [0, 142, 11], TYOP [0, 9, 11], TYOP [0, 144, 11],
   TYOP [0, 101, 11], TYOP [0, 146, 11], TYOP [0, 105, 11],
   TYOP [0, 148, 11], TYOP [0, 7, 11], TYOP [0, 150, 11], TYOP [0, 49, 11],
   TYOP [0, 152, 11], TYOP [0, 13, 11], TYOP [0, 154, 11],
   TYOP [0, 36, 11], TYOP [0, 156, 11], TYOP [0, 34, 11],
   TYOP [0, 158, 11], TYOP [0, 55, 11], TYOP [0, 160, 11],
   TYOP [0, 104, 11], TYOP [0, 162, 11], TYOP [0, 113, 11],
   TYOP [0, 164, 11], TYOP [0, 73, 11], TYOP [0, 106, 11],
   TYOP [0, 167, 11], TYOP [0, 107, 11], TYOP [0, 169, 11],
   TYOP [0, 62, 11], TYOP [0, 171, 11], TYOP [0, 112, 11],
   TYOP [0, 173, 11], TYOP [0, 27, 11], TYOP [0, 175, 11],
   TYOP [0, 108, 11], TYOP [0, 177, 11], TYOP [0, 110, 11],
   TYOP [0, 179, 11], TYOP [0, 19, 11], TYOP [0, 181, 11], TYOP [3, 26, 3],
   TYOP [6, 183], TYOP [3, 3, 184], TYOP [0, 19, 185], TYOP [0, 18, 184],
   TYOP [0, 187, 186], TYOP [0, 31, 188], TYOP [0, 17, 183],
   TYOP [0, 31, 190], TYOP [0, 29, 191], TYOP [0, 22, 22],
   TYOP [0, 22, 193], TYOP [0, 3, 90], TYOP [0, 1, 195], TYOP [0, 26, 45],
   TYOP [0, 1, 197], TYOP [0, 18, 19], TYOP [0, 1, 199], TYOP [0, 1, 17],
   TYOP [0, 0, 201], TYOP [0, 41, 42], TYOP [0, 3, 203], TYOP [3, 3, 17],
   TYOP [0, 17, 205], TYOP [0, 3, 206], TYOP [3, 22, 11],
   TYOP [0, 11, 208], TYOP [0, 22, 209], TYOP [3, 2, 11],
   TYOP [0, 11, 211], TYOP [0, 2, 212], TYOP [0, 11, 11],
   TYOP [0, 11, 214], TYOP [0, 22, 73], TYOP [0, 1, 57], TYOP [0, 0, 82],
   TYOP [0, 3, 51], TYOP [0, 36, 156], TYOP [0, 34, 158],
   TYOP [0, 73, 166], TYOP [0, 55, 160], TYOP [0, 12, 13],
   TYOP [0, 113, 164], TYOP [0, 69, 11], TYOP [0, 69, 226], TYOP [6, 3],
   TYOP [0, 228, 11], TYOP [0, 228, 229], TYOP [2, 0], TYOP [0, 231, 11],
   TYOP [0, 231, 232], TYOP [2, 12], TYOP [0, 234, 11], TYOP [0, 234, 235],
   TYOP [2, 104], TYOP [0, 237, 11], TYOP [0, 237, 238], TYOP [0, 66, 11],
   TYOP [0, 66, 240], TYOP [0, 91, 11], TYOP [0, 91, 242],
   TYOP [0, 97, 11], TYOP [0, 97, 244], TYOP [0, 27, 175],
   TYOP [0, 90, 11], TYOP [0, 90, 247], TYOP [0, 19, 181],
   TYOP [0, 98, 11], TYOP [0, 250, 11], TYOP [0, 86, 11],
   TYOP [0, 252, 11], TYOP [0, 71, 11], TYOP [0, 254, 11],
   TYOP [0, 244, 11], TYOP [0, 111, 11], TYOP [0, 257, 11],
   TYOP [0, 12, 12], TYOP [0, 12, 259], TYOP [0, 66, 66],
   TYOP [0, 66, 261], TYOP [0, 11, 262], TYOP [0, 11, 33],
   TYOP [0, 1, 259], TYOP [0, 104, 0], TYOP [0, 22, 266], TYOP [0, 109, 1],
   TYOP [0, 19, 1], TYOP [0, 17, 0], TYOP [0, 1, 211], TYOP [0, 271, 55],
   TYOP [0, 22, 208], TYOP [0, 273, 73], TYOP [3, 0, 2], TYOP [3, 1, 275],
   TYOP [0, 276, 211], TYOP [0, 277, 55], TYOP [0, 73, 73],
   TYOP [0, 193, 279], TYOP [0, 1, 114], TYOP [0, 22, 166],
   TYOP [0, 2, 160], TYOP [0, 22, 279], TYOP [0, 69, 69],
   TYOP [0, 69, 285], TYOP [0, 18, 18], TYOP [0, 18, 287],
   TYOP [0, 0, 285], TYOP [0, 17, 287], TYOP [0, 104, 22], TYOP [5, 17],
   TYOP [0, 292, 22], TYOP [0, 18, 11], TYOP [0, 18, 69],
   TYOP [0, 270, 295], TYOP [0, 190, 187], TYOP [0, 69, 231],
   TYOP [0, 22, 298], TYOP [0, 113, 234], TYOP [0, 22, 300],
   TYOP [0, 69, 237], TYOP [0, 22, 302], TYOP [0, 1, 228],
   TYOP [0, 92, 304], TYOP [0, 3, 18], TYOP [2, 205], TYOP [0, 3, 307],
   TYOP [0, 308, 306], TYOP [0, 193, 261], TYOP [0, 6, 307],
   TYOP [0, 5, 205], TYOP [0, 312, 311], TYOP [0, 27, 73],
   TYOP [0, 109, 0], TYOP [0, 19, 18], TYOP [0, 0, 231], TYOP [0, 12, 234],
   TYOP [0, 104, 237], TYOP [0, 22, 66], TYOP [0, 90, 91], TYOP [2, 292],
   TYOP [0, 322, 292], TYOP [0, 66, 22], TYOP [0, 181, 254],
   TYOP [0, 275, 211], TYOP [0, 1, 326], TYOP [0, 327, 277],
   TYOP [0, 2, 211], TYOP [0, 0, 329], TYOP [0, 330, 326],
   TYOP [0, 0, 205], TYOP [0, 3, 332], TYOP [0, 333, 312],
   TYOP [0, 55, 56], TYOP [0, 217, 11], TYOP [0, 27, 3], TYOP [0, 22, 337],
   TYOP [0, 57, 167], TYOP [0, 106, 1], TYOP [0, 97, 0], TYOP [0, 112, 3],
   TYOP [0, 108, 12], TYOP [0, 111, 90], TYOP [0, 56, 55],
   TYOP [0, 106, 228], TYOP [0, 97, 228], TYOP [0, 112, 69],
   TYOP [0, 108, 113], TYOP [0, 111, 69], TYOP [0, 106, 66],
   TYOP [1, 0, 26], TYOP [0, 352, 66], TYOP [0, 27, 66], TYOP [0, 3, 175],
   TYOP [0, 56, 11], TYOP [0, 22, 72], TYOP [1, 26, 3], TYOP [0, 358, 3],
   TYOP [0, 22, 359], TYOP [0, 57, 57], TYOP [0, 214, 361],
   TYOP [0, 193, 36], TYOP [0, 36, 363], TYOP [0, 193, 34],
   TYOP [0, 34, 365], TYOP [0, 81, 167], TYOP [0, 84, 244],
   TYOP [0, 105, 173], TYOP [0, 15, 177], TYOP [0, 109, 11],
   TYOP [0, 3, 371], TYOP [0, 109, 372], TYOP [0, 373, 179],
   TYOP [0, 0, 247], TYOP [0, 90, 375], TYOP [0, 376, 257],
   TYOP [0, 320, 66], TYOP [0, 66, 378], TYOP [0, 66, 379],
   TYOP [0, 90, 97], TYOP [0, 381, 97], TYOP [0, 97, 382],
   TYOP [0, 91, 383], TYOP [0, 93, 97], TYOP [0, 385, 97],
   TYOP [0, 97, 386], TYOP [0, 94, 387], TYOP [0, 3, 97], TYOP [0, 1, 389],
   TYOP [0, 390, 97], TYOP [0, 90, 391], TYOP [0, 94, 97],
   TYOP [0, 0, 393], TYOP [0, 394, 97], TYOP [0, 95, 395], TYOP [0, 3, 98],
   TYOP [0, 397, 97], TYOP [0, 93, 398], TYOP [0, 105, 376],
   TYOP [0, 59, 400], TYOP [0, 84, 373], TYOP [0, 81, 402],
   TYOP [0, 27, 27], TYOP [0, 26, 404], TYOP [0, 27, 405],
   TYOP [0, 106, 106], TYOP [0, 3, 407], TYOP [0, 1, 408],
   TYOP [0, 107, 107], TYOP [0, 26, 410], TYOP [0, 1, 411],
   TYOP [0, 97, 97], TYOP [0, 3, 413], TYOP [0, 0, 414], TYOP [0, 3, 405],
   TYOP [0, 99, 21], TYOP [0, 87, 417], TYOP [0, 106, 352],
   TYOP [0, 101, 419], TYOP [0, 88, 420], TYOP [0, 107, 97],
   TYOP [0, 103, 422], TYOP [0, 88, 423], TYOP [0, 2, 358],
   TYOP [0, 100, 425], TYOP [0, 89, 426], TYOP [0, 27, 2],
   TYOP [0, 102, 428], TYOP [0, 9, 429], TYOP [0, 110, 106],
   TYOP [0, 3, 3], TYOP [0, 432, 431], TYOP [0, 268, 433],
   TYOP [0, 110, 97], TYOP [0, 432, 435], TYOP [0, 315, 436],
   TYOP [0, 1, 107], TYOP [0, 0, 97], TYOP [0, 62, 62], TYOP [0, 18, 322],
   TYOP [0, 185, 27], TYOP [0, 92, 98], TYOP [0, 88, 443]]
  end
  val _ = Theory.incorporate_consts "path" tyvector
     [("unfold", 10), ("trace_machine", 16), ("toPath", 20), ("take", 23),
      ("tail", 21), ("stopped_at", 24), ("seg", 25), ("pmap", 32),
      ("plink", 33), ("pgenerate", 37), ("pcons", 39), ("pconcat", 40),
      ("parallel_comp", 54), ("okpath_f", 60), ("okpath", 61),
      ("nth_label", 64), ("mem", 65), ("length", 67), ("last", 68),
      ("labels", 70), ("is_stopped", 55), ("fromPath", 71),
      ("first_label", 72), ("firstP_at", 75), ("first", 68),
      ("finite", 55), ("filter", 76), ("exists", 77), ("every", 77),
      ("el", 78), ("drop", 23), ("SN", 79), ("PL", 74)];

  local open SharingTables
  in
  val tmvector = build_term_vector idvector tyvector
  [TMV("M1", 81), TMV("M2", 84), TMV("P", 57), TMV("P", 13), TMV("P", 55),
   TMV("Q", 57), TMV("R", 85), TMV("R", 59), TMV("R", 86), TMV("X", 55),
   TMV("a", 2), TMV("a'", 2), TMV("f", 87), TMV("f", 88), TMV("f", 31),
   TMV("f", 89), TMV("f", 92), TMV("f", 96), TMV("f", 9), TMV("f", 7),
   TMV("f", 36), TMV("f1", 36), TMV("f2", 36), TMV("g", 98), TMV("g", 99),
   TMV("g", 100), TMV("g", 29), TMV("g", 101), TMV("g", 102),
   TMV("g", 103), TMV("g", 34), TMV("g1", 34), TMV("g2", 34), TMV("h", 1),
   TMV("i", 22), TMV("init", 0), TMV("j", 22), TMV("l", 1), TMV("l", 0),
   TMV("l", 3), TMV("l", 12), TMV("l", 104), TMV("lab", 0), TMV("lab", 26),
   TMV("lbl", 0), TMV("m", 84), TMV("m", 22), TMV("m1", 59), TMV("m1", 53),
   TMV("m1", 81), TMV("m2", 84), TMV("m2", 105), TMV("m2", 49),
   TMV("n", 22), TMV("next_s", 3), TMV("p", 2), TMV("p", 106),
   TMV("p", 107), TMV("p", 62), TMV("p", 27), TMV("p", 108), TMV("p", 110),
   TMV("p", 111), TMV("p'", 2), TMV("p1", 2), TMV("p1'", 2), TMV("p2", 2),
   TMV("p2", 112), TMV("p2", 27), TMV("proj", 88), TMV("proj", 9),
   TMV("q", 2), TMV("q", 97), TMV("q1", 2), TMV("q1'", 2), TMV("q2", 2),
   TMV("q2'", 2), TMV("r", 0), TMV("r", 3), TMV("r", 26), TMV("r", 19),
   TMV("r'", 19), TMV("rep", 71), TMV("s", 1), TMV("s", 0), TMV("s", 3),
   TMV("s", 12), TMV("s'", 1), TMV("s'", 12), TMV("s1", 1), TMV("s1'", 3),
   TMV("s2", 1), TMV("s2", 26), TMV("s2'", 41), TMV("sigma", 2),
   TMV("t", 2), TMV("t1", 0), TMV("t2", 0), TMV("t_init", 0),
   TMV("tr", 113), TMV("v", 1), TMV("v", 3), TMV("v", 90), TMV("v1", 1),
   TMV("v2", 3), TMV("v2", 94), TMV("v3", 93), TMV("x", 1), TMV("x", 0),
   TMV("x", 3), TMV("x", 2), TMV("x", 19), TMV("x'", 1), TMV("y", 1),
   TMV("y", 0), TMC(8, 114), TMC(8, 115), TMC(8, 116), TMC(8, 118),
   TMC(8, 119), TMC(8, 121), TMC(8, 123), TMC(8, 125), TMC(8, 126),
   TMC(8, 128), TMC(8, 129), TMC(8, 131), TMC(8, 133), TMC(8, 135),
   TMC(8, 137), TMC(8, 139), TMC(8, 141), TMC(8, 143), TMC(8, 145),
   TMC(8, 147), TMC(8, 149), TMC(8, 151), TMC(8, 153), TMC(8, 155),
   TMC(8, 157), TMC(8, 159), TMC(8, 161), TMC(8, 154), TMC(8, 163),
   TMC(8, 165), TMC(8, 166), TMC(8, 160), TMC(8, 168), TMC(8, 170),
   TMC(8, 172), TMC(8, 174), TMC(8, 176), TMC(8, 178), TMC(8, 180),
   TMC(8, 182), TMC(9, 189), TMC(9, 192), TMC(10, 194), TMC(11, 196),
   TMC(11, 198), TMC(11, 200), TMC(11, 202), TMC(11, 204), TMC(11, 207),
   TMC(11, 210), TMC(11, 213), TMC(12, 194), TMC(13, 215), TMC(14, 22),
   TMC(15, 216), TMC(16, 216), TMC(17, 217), TMC(17, 218), TMC(17, 219),
   TMC(17, 215), TMC(17, 220), TMC(17, 221), TMC(17, 222), TMC(17, 223),
   TMC(17, 224), TMC(17, 225), TMC(17, 227), TMC(17, 230), TMC(17, 216),
   TMC(17, 233), TMC(17, 236), TMC(17, 239), TMC(17, 241), TMC(17, 243),
   TMC(17, 86), TMC(17, 245), TMC(17, 246), TMC(17, 248), TMC(17, 249),
   TMC(18, 215), TMC(19, 114), TMC(19, 115), TMC(19, 251), TMC(19, 157),
   TMC(19, 159), TMC(19, 253), TMC(19, 255), TMC(19, 166), TMC(19, 160),
   TMC(19, 256), TMC(19, 178), TMC(19, 258), TMC(19, 182), TMC(20, 260),
   TMC(21, 193), TMC(22, 193), TMC(23, 263), TMC(23, 264), TMC(24, 265),
   TMC(25, 267), TMC(26, 73), TMC(27, 11), TMC(28, 268), TMC(28, 269),
   TMC(28, 270), TMC(29, 272), TMC(29, 274), TMC(29, 278), TMC(30, 280),
   TMC(31, 281), TMC(31, 282), TMC(31, 283), TMC(32, 284), TMC(33, 286),
   TMC(33, 288), TMC(34, 289), TMC(34, 290), TMC(35, 291), TMC(35, 293),
   TMC(36, 226), TMC(36, 294), TMC(37, 296), TMC(37, 297), TMC(38, 69),
   TMC(38, 18), TMC(39, 299), TMC(40, 301), TMC(40, 303), TMC(41, 305),
   TMC(41, 309), TMC(42, 12), TMC(43, 66), TMC(43, 91), TMC(44, 193),
   TMC(45, 310), TMC(45, 313), TMC(46, 74), TMC(46, 314), TMC(47, 79),
   TMC(48, 315), TMC(48, 316), TMC(49, 317), TMC(49, 318), TMC(49, 319),
   TMC(49, 320), TMC(49, 321), TMC(50, 193), TMC(51, 11), TMC(52, 323),
   TMC(52, 324), TMC(53, 325), TMC(54, 328), TMC(54, 331), TMC(54, 334),
   TMC(55, 335), TMC(56, 57), TMC(57, 336), TMC(58, 22), TMC(59, 215),
   TMC(60, 23), TMC(61, 78), TMC(61, 338), TMC(62, 77), TMC(62, 339),
   TMC(63, 77), TMC(63, 339), TMC(64, 76), TMC(65, 55), TMC(65, 175),
   TMC(66, 68), TMC(66, 340), TMC(66, 341), TMC(66, 342), TMC(66, 337),
   TMC(66, 343), TMC(66, 344), TMC(67, 75), TMC(68, 72), TMC(68, 63),
   TMC(69, 71), TMC(70, 345), TMC(71, 55), TMC(71, 175), TMC(72, 70),
   TMC(72, 346), TMC(72, 347), TMC(72, 348), TMC(72, 349), TMC(72, 350),
   TMC(73, 68), TMC(73, 337), TMC(74, 67), TMC(74, 351), TMC(74, 353),
   TMC(74, 354), TMC(75, 65), TMC(75, 355), TMC(76, 356), TMC(77, 357),
   TMC(77, 64), TMC(77, 360), TMC(78, 362), TMC(78, 364), TMC(78, 366),
   TMC(79, 61), TMC(79, 367), TMC(79, 368), TMC(79, 369), TMC(79, 370),
   TMC(79, 374), TMC(79, 377), TMC(80, 60), TMC(81, 380), TMC(81, 384),
   TMC(81, 388), TMC(82, 392), TMC(82, 396), TMC(82, 399), TMC(83, 401),
   TMC(83, 54), TMC(83, 403), TMC(84, 40), TMC(84, 406), TMC(85, 39),
   TMC(85, 409), TMC(85, 412), TMC(85, 415), TMC(85, 416), TMC(86, 37),
   TMC(87, 33), TMC(88, 418), TMC(88, 421), TMC(88, 424), TMC(88, 32),
   TMC(88, 427), TMC(88, 430), TMC(88, 434), TMC(88, 437), TMC(89, 25),
   TMC(90, 24), TMC(90, 438), TMC(90, 439), TMC(91, 21), TMC(91, 440),
   TMC(92, 23), TMC(93, 302), TMC(93, 441), TMC(94, 20), TMC(94, 442),
   TMC(95, 16), TMC(96, 444), TMC(96, 10), TMC(97, 214)]
  end
  local
  val DT = Thm.disk_thm val read = Term.read_raw tmvector
  in
  fun op path_TY_DEF x = x
    val op path_TY_DEF =
    DT(((("path",0),[("bool",[25,37])]),["DISK_THM"]),
       [read"%201%82%265%111%262|@$0@|@"])
  fun op path_absrep_bijections x = x
    val op path_absrep_bijections =
    DT(((("path",1),[("bool",[117]),("path",[0])]),["DISK_THM"]),
       [read"%167%146%10%189%362%294$0@@@$0@|@@%154%80%174%111%262|$0@@%193%294%362$0@@@$0@@|@@"])
  fun op first_def x = x
    val op first_def =
    DT(((("path",7),[]),[]), [read"%146%55%171%284$0@@%218%294$0@@@|@"])
  fun op stopped_at_def x = x
    val op stopped_at_def =
    DT(((("path",8),[]),[]),
       [read"%115%107%189%354$0@@%362%160$0@%239@@@|@"])
  fun op pcons_def x = x
    val op pcons_def =
    DT(((("path",9),[]),[]),
       [read"%115%107%116%77%146%55%189%338$2@$1@$0@@%362%160$2@%231%161$1@%284$0@@@%255%294$0@@@@@@|@|@|@"])
  fun op finite_def x = x
    val op finite_def =
    DT(((("path",17),[]),[]),
       [read"%146%94%174%282$0@@%235%255%294$0@@@@|@"])
  fun op last_thm x = x
    val op last_thm =
    DT(((("path",19),
        [("bool",
         [2,25,26,27,30,47,48,53,54,56,58,63,64,72,78,105,129,146,147]),
         ("list",[184]),("llist",[14,17,57,78,84]),("option",[13,16,29]),
         ("pair",[8,9]),("path",[2,7,8,9,17,18]),
         ("sat",[1,3,5,6,7,11,13,14,15])]),["DISK_THM"]),
       [read"%167%115%107%171%304%354$0@@@$0@|@@%115%107%116%77%146%55%171%304%338$2@$1@$0@@@%304$0@@|@|@|@@"])
  fun op pmap_def x = x
    val op pmap_def =
    DT(((("path",22),[]),[]),
       [read"%122%14%131%26%146%55%191%348$2@$1@$0@@%363%155$2@%237%156$1@$2@@@%294$0@@@@|@|@|@"])
  fun op tail_def x = x
    val op tail_def =
    DT(((("path",27),
        [("bool",[2,25,26,56,58,63,68,105,129,140,143,147]),
         ("path",[11])]),["DISK_THM"]),
       [read"%115%107%116%77%146%55%189%357%338$2@$1@$0@@@$0@|@|@|@"])
  fun op first_label_def x = x
    val op first_label_def =
    DT(((("path",28),
        [("bool",[2,25,26,56,58,63,68,105,129,140,143,147]),
         ("path",[11])]),["DISK_THM"]),
       [read"%115%107%116%77%146%55%172%292%338$2@$1@$0@@@$1@|@|@|@"])
  fun op length_def x = x
    val op length_def =
    DT(((("path",29),[]),[]),
       [read"%146%55%187%306$0@@%211%282$0@@%259%157%233%263%361%255%294$0@@@@@@%248%209%272@@@@@%246@@|@"])
  fun op el_def x = x
    val op el_def =
    DT(((("path",35),[("prim_rec",[38])]),["DISK_THM"]),
       [read"%167%146%55%171%275%168@$0@@%284$0@@|@@%145%53%146%55%171%275%261$1@@$0@@%275$1@%357$0@@@|@|@@"])
  fun op nth_label_def x = x
    val op nth_label_def =
    DT(((("path",37),[("prim_rec",[38])]),["DISK_THM"]),
       [read"%167%149%58%171%314%168@$0@@%293$0@@|@@%145%53%149%58%171%314%261$1@@$0@@%314$1@%358$0@@@|@|@@"])
  fun op pconcat_def x = x
    val op pconcat_def =
    DT(((("path",40),[]),[]),
       [read"%146%64%116%42%146%66%189%336$2@$1@$0@@%362%160%284$2@@%229%255%294$2@@@%231%161$1@%284$0@@@%255%294$0@@@@@@@|@|@|@"])
  fun op PL_def x = x
    val op PL_def =
    DT(((("path",45),[]),[]),
       [read"%146%55%177%251$0@@%221%34%164$0@%194%282$1@@%169$0@%264%306$1@@@@@|@@|@"])
  fun op firstP_at_def x = x
    val op firstP_at_def =
    DT(((("path",55),[]),[]),
       [read"%123%2%146%55%145%34%174%291$2@$1@$0@@%167%225$0@%251$1@@@%167$2%275$0@$1@@@%145%36%194%169$0@$1@@%367$3%275$0@$2@@@@|@@@@|@|@|@"])
  fun op exists_def x = x
    val op exists_def =
    DT(((("path",58),[]),[]),
       [read"%123%2%146%55%174%279$1@$0@@%202%34%291$2@$1@$0@|@@|@|@"])
  fun op every_def x = x
    val op every_def =
    DT(((("path",59),[]),[]),
       [read"%123%2%146%55%174%277$1@$0@@%367%279%316%367@$1@@$0@@@|@|@"])
  fun op mem_def x = x
    val op mem_def =
    DT(((("path",68),[]),[]),
       [read"%115%83%146%55%174%310$1@$0@@%202%34%167%225$0@%251$1@@@%171$2@%275$0@$1@@@|@@|@|@"])
  fun op drop_def x = x
    val op drop_def =
    DT(((("path",70),[("prim_rec",[38])]),["DISK_THM"]),
       [read"%167%146%55%189%274%168@$0@@$0@|@@%145%53%146%55%189%274%261$1@@$0@@%274$1@%357$0@@@|@|@@"])
  fun op take_def x = x
    val op take_def =
    DT(((("path",82),[("prim_rec",[38])]),["DISK_THM"]),
       [read"%167%146%55%189%359%168@$0@@%354%284$0@@@|@@%145%53%146%55%189%359%261$1@@$0@@%338%284$0@@%292$0@@%359$1@%357$0@@@@|@|@@"])
  fun op seg_def x = x
    val op seg_def =
    DT(((("path",90),[]),[]),
       [read"%145%34%145%36%146%55%189%353$2@$1@$0@@%359%166$1@$2@@%274$2@$0@@@|@|@|@"])
  fun op labels_def x = x
    val op labels_def =
    DT(((("path",97),
        [("bool",[2,25,26,27,37,51,56,58,63,105,129,140,147]),
         ("llist",[18,26]),("option",[7]),("pair",[49]),
         ("path",[10,12,27,28])]),["DISK_THM"]),
       [read"%167%115%107%181%298%354$0@@@%238@|@@%115%107%116%77%146%55%181%298%338$2@$1@$0@@@%230$1@%298$0@@@|@|@|@@"])
  fun op is_stopped_def x = x
    val op is_stopped_def =
    DT(((("path",99),[]),[]),
       [read"%146%55%174%296$0@@%195%107%189$1@%354$0@@|@@|@"])
  fun op filter_def x = x
    val op filter_def =
    DT(((("path",101),
        [("arithmetic",
         [22,24,25,27,41,46,59,71,93,130,172,173,177,180,269]),
         ("bool",
         [2,15,25,26,27,30,32,36,37,43,47,48,51,52,53,54,56,58,60,63,64,67,
          71,84,93,94,96,101,104,105,107,124,129,140,143,147]),
         ("combin",[8,19]),("marker",[6]),("num",[7]),
         ("numeral",[3,5,6,8]),("option",[7]),("pair",[49]),
         ("path",
         [10,11,12,16,27,28,35,37,39,49,50,56,58,59,60,63,70,72,77,78,79,
          98,99,100]),("pred_set",[10,80,144]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%123%2%167%115%107%194$1$0@@%189%281$1@%354$0@@@%354$0@@@|@@%115%107%116%77%146%55%189%281$3@%338$2@$1@$0@@@%212$3$2@@%212%279$3@$0@@%338$2@$1@%281$3@$0@@@%354$2@@@%281$3@$0@@@|@|@|@@|@"])
  fun op pgenerate_def x = x
    val op pgenerate_def =
    DT(((("path",103),
        [("bool",[2,15,25,26,51,56]),("combin",[5,8]),("option",[7]),
         ("pair",[8,9,49]),("path",[11,39])]),["DISK_THM"]),
       [read"%139%20%140%30%189%343$1@$0@@%338$1%168@@$0%168@@%343%317$1@%261@@%318$0@%261@@@@|@|@"])
  fun op okpath_f_def x = x
    val op okpath_f_def =
    DT(((("path",110),[]),[]),
       [read"%125%7%141%9%178%326$1@$0@@%269%220%107%165%354$0@@%224$0@%270@@|@@%222%266%107%267%77%55%165%338$2@$1@$0@@%167$4$2@$1@%284$0@@@%226$0@$3@@@||@|@@@@|@|@"])
  fun op okpath_def x = x
    val op okpath_def =
    DT(((("path",112),[]),[]), [read"%125%7%178%319$0@@%295%326$0@@@|@"])
  fun op plink_def x = x
    val op plink_def =
    DT(((("path",118),
        [("bool",
         [2,25,26,27,32,36,37,51,52,54,56,58,63,101,105,124,129,143,145,
          147]),("option",[7]),("pair",[49]),
         ("path",[10,11,12,14,16,20,27,28,39,100])]),["DISK_THM"]),
       [read"%167%115%107%146%55%189%344%354$1@@$0@@$0@|@|@@%115%107%116%77%146%64%146%66%189%344%338$3@$2@$1@@$0@@%338$3@$2@%344$1@$0@@@|@|@|@|@@"])
  fun op SN_def x = x
    val op SN_def =
    DT(((("path",126),[]),[]),
       [read"%125%7%174%253$0@@%271%107%113%196%38$3$1@$0@$2@|@||@@|@"])
  fun op unfold_def x = x
    val op unfold_def =
    DT(((("path",133),[]),[]),
       [read"%133%70%136%19%117%85%189%366$2@$1@$0@@%362%160$2$0@@%244%85%250%268%54%44%163$1@%161$0@$5$1@@@||@@$2$0@@|@$0@@@@|@|@|@"])
  fun op trace_machine_def x = x
    val op trace_machine_def =
    DT(((("path",138),[]),[]),
       [read"%138%3%142%86%115%37%142%88%174%364$3@$2@$1@$0@@%167$3%208$2@%213$1@%245@@@@%179$0@%208$2@%213$1@%245@@@@@|@|@|@|@"])
  fun op parallel_comp_def x = x
    val op parallel_comp_def =
    DT(((("path",143),[("pair",[16])]),["DISK_THM"]),
       [read"%126%48%137%52%115%89%118%92%116%38%117%90%119%93%174%334$6@$5@%159$4@$3@@$2@%162$1@$0@@@%167$6$4@$2@$1@@$5$3@$2@$0@@@|@|@|@|@|@|@|@"])
  fun op path_rep_bijections_thm x = x
    val op path_rep_bijections_thm =
    DT(((("path",2),[("bool",[63]),("path",[1])]),["DISK_THM"]),
       [read"%167%146%10%189%362%294$0@@@$0@|@@%154%80%193%294%362$0@@@$0@|@@"])
  fun op toPath_11 x = x
    val op toPath_11 =
    DT(((("path",3),[("bool",[26,53]),("path",[1])]),["DISK_THM"]),
       [read"%154%80%154%81%174%189%362$1@@%362$0@@@%193$1@$0@@|@|@"])
  fun op fromPath_11 x = x
    val op fromPath_11 =
    DT(((("path",4),[("bool",[26]),("path",[1])]),["DISK_THM"]),
       [read"%146%10%146%11%174%193%294$1@@%294$0@@@%189$1@$0@@|@|@"])
  fun op fromPath_onto x = x
    val op fromPath_onto =
    DT(((("path",5),[("bool",[26,63]),("path",[1])]),["DISK_THM"]),
       [read"%154%80%203%10%193$1@%294$0@@|@|@"])
  fun op toPath_onto x = x
    val op toPath_onto =
    DT(((("path",6),[("bool",[25,51,63]),("path",[1])]),["DISK_THM"]),
       [read"%146%10%207%80%189$1@%362$0@@|@|@"])
  fun op stopped_at_11 x = x
    val op stopped_at_11 =
    DT(((("path",10),
        [("bool",[25,51,56]),("pair",[4]),("path",[3,8])]),["DISK_THM"]),
       [read"%115%107%115%113%174%189%354$1@@%354$0@@@%171$1@$0@@|@|@"])
  fun op pcons_11 x = x
    val op pcons_11 =
    DT(((("path",11),
        [("bool",[25,43,56]),("llist",[18]),("pair",[4,10]),
         ("path",[3,4,7,9])]),["DISK_THM"]),
       [read"%115%107%116%77%146%55%115%113%116%84%146%71%174%189%338$5@$4@$3@@%338$2@$1@$0@@@%167%171$5@$2@@%167%172$4@$1@@%189$3@$0@@@@|@|@|@|@|@|@"])
  fun op stopped_at_not_pcons x = x
    val op stopped_at_not_pcons =
    DT(((("path",12),
        [("bool",[25,26,27,51,54,58]),("llist",[17]),("pair",[4]),
         ("path",[3,8,9])]),["DISK_THM"]),
       [read"%115%107%115%113%116%77%146%55%167%367%189%354$3@@%338$2@$1@$0@@@@%367%189%338$2@$1@$0@@%354$3@@@@|@|@|@|@"])
  fun op path_cases x = x
    val op path_cases =
    DT(((("path",13),
        [("bool",
         [13,25,26,27,30,36,47,48,51,52,53,54,56,58,63,71,72,78,93,94,96,
          105,106,124,143,146]),("llist",[14]),("pair",[4,5,8,9,24,25]),
         ("path",[2,3,6,7,8,9]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%146%55%273%195%107%189$1@%354$0@@|@@%195%107%196%77%203%71%189$3@%338$2@$1@$0@@|@|@|@@|@"])
  fun op FORALL_path x = x
    val op FORALL_path =
    DT(((("path",14),
        [("bool",[25,26,36,51,53,58,63,105,124]),
         ("path",[13])]),["DISK_THM"]),
       [read"%141%4%174%146%55$1$0@|@@%167%115%107$1%354$0@@|@@%115%107%116%77%146%55$3%338$2@$1@$0@@|@|@|@@@|@"])
  fun op EXISTS_path x = x
    val op EXISTS_path =
    DT(((("path",15),
        [("bool",[25,26,53,54,58,63,73,75,106]),("path",[13]),
         ("sat",[1,3,5,6,7,11,12,13,15,17,18])]),["DISK_THM"]),
       [read"%141%4%174%203%55$1$0@|@@%273%195%107$1%354$0@@|@@%195%107%196%77%203%55$3%338$2@$1@$0@@|@|@|@@@|@"])
  fun op first_thm x = x
    val op first_thm =
    DT(((("path",16),
        [("bool",[25,56]),("pair",[8]),("path",[2,7,8,9])]),["DISK_THM"]),
       [read"%167%115%107%171%284%354$0@@@$0@|@@%115%107%116%77%146%55%171%284%338$2@$1@$0@@@$2@|@|@|@@"])
  fun op finite_thm x = x
    val op finite_thm =
    DT(((("path",18),
        [("bool",[25,56,58,63]),("llist",[57]),("pair",[9]),
         ("path",[2,8,9,17])]),["DISK_THM"]),
       [read"%167%115%107%174%282%354$0@@@%262@|@@%115%107%116%77%146%55%174%282%338$2@$1@$0@@@%282$0@@|@|@|@@"])
  fun op path_bisimulation x = x
    val op path_bisimulation =
    DT(((("path",20),
        [("bool",
         [13,25,26,27,30,36,37,43,47,48,51,52,53,54,56,58,63,72,73,78,80,
          81,84,86,93,94,95,96,101,105,106,124,143,145,146]),
         ("llist",[14,15,16,17,18,30]),("option",[10,11,16]),
         ("pair",[4,5,7,8,9,25]),("path",[2,3,6,7,8,9]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%146%64%146%66%174%189$1@$0@@%200%8%167$0$2@$1@@%146%73%146%75%194$2$1@$0@@%273%195%107%167%189$2@%354$0@@@%189$1@%354$0@@@|@@%195%107%196%77%203%74%203%76%167%189$5@%338$3@$2@$1@@@%167%189$4@%338$3@$2@$0@@@$6$1@$0@@@|@|@|@|@@@|@|@@|@@|@|@"])
  fun op finite_path_ind x = x
    val op finite_path_ind =
    DT(((("path",21),
        [("bool",
         [13,25,26,27,30,36,47,48,51,52,53,54,56,58,63,71,81,84,93,94,96,
          105,106,124,146]),("llist",[70]),("pair",[8,9,25]),
         ("path",[2,6,7,8,9,17]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%141%4%194%167%115%107$1%354$0@@|@@%115%107%116%77%146%55%194%167%282$0@@$3$0@@@$3%338$2@$1@$0@@@|@|@|@@@%146%71%194%282$0@@$1$0@@|@@|@"])
  fun op pmap_thm x = x
    val op pmap_thm =
    DT(((("path",23),
        [("bool",[25,51,56]),("llist",[18,43]),("pair",[4,38,39,40]),
         ("path",[2,3,7,8,9,22])]),["DISK_THM"]),
       [read"%167%115%107%190%347%13@%29@%355$0@@@%356%13$0@@@|@@%115%107%118%79%148%57%190%347%13@%29@%340$2@$1@$0@@@%341%13$2@@%29$1@@%347%13@%29@$0@@@|@|@|@@"])
  fun op first_pmap x = x
    val op first_pmap =
    DT(((("path",24),[("bool",[25,56]),("path",[14,16,23])]),["DISK_THM"]),
       [read"%146%55%173%288%348%14@%26@$0@@@%14%284$0@@@|@"])
  fun op last_pmap x = x
    val op last_pmap =
    DT(((("path",25),
        [("bool",[25,53,56,58,105,124]),
         ("path",[19,21,23])]),["DISK_THM"]),
       [read"%146%55%194%282$0@@%173%305%348%14@%26@$0@@@%14%304$0@@@@|@"])
  fun op finite_pmap x = x
    val op finite_pmap =
    DT(((("path",26),
        [("bool",[25,26,27,36,53,54,55,58,63,83,105,124]),
         ("path",[10,11,12,13,18,21,23]),
         ("sat",[1,3,5,6,7,11,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%122%14%131%26%146%55%174%283%348$2@$1@$0@@@%282$0@@|@|@|@"])
  fun op length_thm x = x
    val op length_thm =
    DT(((("path",30),
        [("arithmetic",[22,25,27,71,91,173,177,180]),
         ("bool",[25,26,27,30,36,51,52,54,56,58,63,64,104,105,129,147]),
         ("list",[22]),("llist",[78,84]),("numeral",[3,5,8]),
         ("option",[10,13,16,27]),("pair",[9]),
         ("path",[2,8,9,17,18,29])]),["DISK_THM"]),
       [read"%167%115%107%187%306%354$0@@@%259%248%209%272@@@@|@@%117%109%118%79%151%59%187%309%342$2@$1@$0@@@%211%283$0@@%259%157%264%309$0@@@%248%209%272@@@@@%246@@|@|@|@@"])
  fun op alt_length_thm x = x
    val op alt_length_thm =
    DT(((("path",31),
        [("arithmetic",[18,22,25,27,71,173,177,180,181]),
         ("bool",
         [25,26,27,30,36,51,52,54,56,58,63,64,104,105,129,143,147]),
         ("list",[22]),("llist",[78,84]),("numeral",[0,3,5,8]),
         ("option",[10,13,16,27,29,31]),("pair",[9]),
         ("path",[2,8,9,17,18,29])]),["DISK_THM"]),
       [read"%167%115%107%187%306%354$0@@@%259%248%209%272@@@@|@@%117%109%118%79%151%59%187%309%342$2@$1@$0@@@%249%261@%309$0@@@|@|@|@@"])
  fun op length_never_zero x = x
    val op length_never_zero =
    DT(((("path",32),
        [("bool",[25,26,27,37,51,54,58]),("num",[7]),("numeral",[3,6]),
         ("option",[10,29]),("path",[13,31])]),["DISK_THM"]),
       [read"%146%55%367%187%306$0@@%259%168@@@|@"])
  fun op finite_length x = x
    val op finite_length =
    DT(((("path",33),
        [("arithmetic",[27,46,71,79,93,172,173,177,180]),
         ("bool",
         [13,14,25,26,27,30,36,47,48,51,52,53,54,56,58,63,71,72,73,74,76,
          77,78,80,81,84,86,93,94,96,104,105,106,107,124,129,140,146,147]),
         ("num",[9]),("numeral",[3,5,6,8]),("option",[6,10,11,27]),
         ("path",[13,18,21,30]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%146%55%167%174%282$0@@%202%53%187%306$1@@%259$0@@|@@@%174%367%282$0@@@%187%306$0@@%246@@@|@"])
  fun op length_pmap x = x
    val op length_pmap =
    DT(((("path",34),
        [("arithmetic",[91]),
         ("bool",[2,15,25,26,30,53,54,55,56,58,63,74,84,105,124,129,147]),
         ("option",[10]),("path",[21,23,26,30,33]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%121%13%134%27%147%56%187%308%346$2@$1@$0@@@%307$0@@|@|@|@"])
  fun op el_def_compute x = x
    val op el_def_compute =
    DT(((("path",36),
        [("arithmetic",[268]),("bool",[26]),("path",[35])]),["DISK_THM"]),
       [read"%167%146%55%171%275%168@$0@@%284$0@@|@@%167%145%53%146%55%171%275%248%209$1@@@$0@@%275%166%248%209$1@@@%248%209%272@@@@%357$0@@@|@|@@%145%53%146%55%171%275%248%210$1@@@$0@@%275%248%209$1@@@%357$0@@@|@|@@@"])
  fun op nth_label_def_compute x = x
    val op nth_label_def_compute =
    DT(((("path",38),
        [("arithmetic",[268]),("bool",[26]),("path",[37])]),["DISK_THM"]),
       [read"%167%149%58%171%314%168@$0@@%293$0@@|@@%167%145%53%149%58%171%314%248%209$1@@@$0@@%314%166%248%209$1@@@%248%209%272@@@@%358$0@@@|@|@@%145%53%149%58%171%314%248%210$1@@@$0@@%314%248%209$1@@@%358$0@@@|@|@@@"])
  fun op path_Axiom x = x
    val op path_Axiom =
    DT(((("path",39),
        [("bool",
         [13,25,26,27,30,36,47,48,51,52,53,54,56,58,63,72,73,77,93,94,96,
          143,146]),("combin",[8,19]),("llist",[19,21,25]),
         ("option",[6,7,10,13,29]),("pair",[4,5,8,9,16,49]),
         ("path",[2,3,7,8,9,10,16]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%129%17%197%23%115%107%190$1$0@@%331$2$0@@%114%105%329$0@%356$1@@%106%332$0@%39%100%341$4@$1@$6$0@@||@|@||@@|@|@|@"])
  fun op pconcat_thm x = x
    val op pconcat_thm =
    DT(((("path",41),
        [("bool",[25,51,56]),("llist",[18,44]),("pair",[4,8,9]),
         ("path",[2,3,7,8,9,16,40])]),["DISK_THM"]),
       [read"%167%115%107%116%42%146%66%189%336%354$2@@$1@$0@@%338$2@$1@$0@@|@|@|@@%117%109%118%79%151%59%118%43%151%68%191%337%342$4@$3@$2@@$1@$0@@%342$4@$3@%337$2@$1@$0@@@|@|@|@|@|@@"])
  fun op pconcat_eq_stopped x = x
    val op pconcat_eq_stopped =
    DT(((("path",42),
        [("bool",[25,26,27,54,58]),("path",[12,13,41])]),["DISK_THM"]),
       [read"%146%64%116%42%146%66%115%107%167%367%189%336$3@$2@$1@@%354$0@@@@%367%189%354$0@@%336$3@$2@$1@@@@|@|@|@|@"])
  fun op pconcat_eq_pcons x = x
    val op pconcat_eq_pcons =
    DT(((("path",43),
        [("bool",
         [13,25,26,27,30,37,47,48,51,52,53,54,56,58,63,93,94,96,143]),
         ("path",[10,11,12,13,41]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%115%107%116%77%146%55%146%64%116%42%146%66%167%174%189%336$2@$1@$0@@%338$5@$4@$3@@@%273%167%172$1@$4@@%167%189$2@%354$5@@@%189$3@$0@@@@%203%65%167%189$3@%338$6@$5@$0@@@%189$4@%336$0@$2@$1@@@|@@@@%174%189%338$5@$4@$3@@%336$2@$1@$0@@@%273%167%172$1@$4@@%167%189$2@%354$5@@@%189$3@$0@@@@%203%65%167%189$3@%338$6@$5@$0@@@%189$4@%336$0@$2@$1@@@|@@@@|@|@|@|@|@|@"])
  fun op finite_pconcat x = x
    val op finite_pconcat =
    DT(((("path",44),
        [("bool",
         [13,25,26,27,30,36,47,48,51,52,53,54,56,58,63,71,81,84,93,94,96,
          105,124]),("path",[18,21,41,42,43]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%146%64%116%42%146%66%174%282%336$2@$1@$0@@@%167%282$2@@%282$0@@@|@|@|@"])
  fun op infinite_PL x = x
    val op infinite_PL =
    DT(((("path",46),
        [("bool",[25,26,27,36,53,58,63,105,124]),("path",[45]),
         ("pred_set",[14,368])]),["DISK_THM"]),
       [read"%146%55%194%367%282$0@@@%145%34%225$0@%251$1@@|@@|@"])
  fun op PL_pcons x = x
    val op PL_pcons =
    DT(((("path",47),
        [("arithmetic",[24,25,27,28,41,46,59,64,71,79,88,91,93,173,180]),
         ("bool",
         [25,26,27,36,37,51,52,53,54,56,58,63,96,101,104,105,106,124,129,
          143,147]),("num",[7]),("numeral",[3,5,6,8]),("option",[16]),
         ("pair",[3]),("path",[18,30,45]),
         ("pred_set",[3,6,80,144])]),["DISK_THM"]),
       [read"%115%107%116%77%146%71%177%251%338$2@$1@$0@@@%227%168@%223%261@%251$0@@@@|@|@|@"])
  fun op PL_stopped_at x = x
    val op PL_stopped_at =
    DT(((("path",48),
        [("arithmetic",[41,46,59,71,93,172,173,177,180]),
         ("bool",[25,26,27,36,52,53,54,58,63,93,96,104,105,107,124]),
         ("numeral",[3,8]),("option",[16]),("pair",[3]),
         ("path",[18,30,45]),("pred_set",[3,6,10,80]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%115%107%177%251%354$0@@@%227%168@%215@@|@"])
  fun op PL_thm x = x
    val op PL_thm =
    DT(((("path",49),[("path",[47,48])]),["DISK_THM"]),
       [read"%167%115%107%177%251%354$0@@@%227%168@%215@@|@@%115%107%116%77%146%71%177%251%338$2@$1@$0@@@%227%168@%223%261@%251$0@@@@|@|@|@@"])
  fun op PL_0 x = x
    val op PL_0 =
    DT(((("path",50),
        [("bool",[25,26,27,37,51,52,56,58]),("num",[7]),("path",[14,49]),
         ("pred_set",[10,80,144])]),["DISK_THM"]),
       [read"%146%55%225%168@%251$0@@|@"])
  fun op PL_downward_closed x = x
    val op PL_downward_closed =
    DT(((("path",51),
        [("arithmetic",[34]),
         ("bool",[25,26,47,48,53,54,58,63,93,94,96,105,124]),("pair",[3]),
         ("path",[45]),("pred_set",[6]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%145%34%146%55%194%225$1@%251$0@@@%145%36%194%169$0@$2@@%225$0@%251$1@@@|@@|@|@"])
  fun op PL_pmap x = x
    val op PL_pmap =
    DT(((("path",52),
        [("bool",[25,26,36,56,58,63,105,124]),("pair",[3]),
         ("path",[26,34,45]),("pred_set",[3,6])]),["DISK_THM"]),
       [read"%177%251%350%18@%28@%59@@@%252%59@@"])
  fun op el_pmap x = x
    val op el_pmap =
    DT(((("path",53),
        [("bool",[14,25,26,27,52,53,56,58,63,105,124,143]),("num",[7,9]),
         ("path",[14,16,23,24,27,35,49,50]),("pred_set",[10,80,144]),
         ("prim_rec",[1])]),["DISK_THM"]),
       [read"%145%34%146%55%194%225$1@%251$0@@@%173%276$1@%348%14@%26@$0@@@%14%275$1@$0@@@@|@|@"])
  fun op nth_label_pmap x = x
    val op nth_label_pmap =
    DT(((("path",54),
        [("arithmetic",[27,46,71,93,172,173,177,180]),
         ("bool",
         [14,25,26,27,36,52,53,54,56,58,63,93,96,104,105,107,124,143]),
         ("num",[7,9]),("numeral",[3,5,6,8]),
         ("path",[13,23,27,28,37,49,50]),("pred_set",[10,80,144]),
         ("prim_rec",[1]),("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%145%34%146%55%194%225%261$1@@%251$0@@@%173%315$1@%349%15@%25@$0@@@%25%313$1@$0@@@@|@|@"])
  fun op firstP_at_thm x = x
    val op firstP_at_thm =
    DT(((("path",56),
        [("arithmetic",[24,25,27,28,37,41,46,59,62,65,71,93,173,180]),
         ("bool",
         [25,26,27,36,51,52,53,54,56,58,63,96,101,104,105,106,124,143,
          145]),("num",[7]),("numeral",[3,5,8]),
         ("path",[16,27,35,47,49,50,55]),("pred_set",[10,80,144,146]),
         ("prim_rec",[1,6,7])]),["DISK_THM"]),
       [read"%167%123%2%115%107%145%53%174%291$2@%354$1@@$0@@%167%183$0@%168@@$2$1@@@|@|@|@@%123%2%145%53%115%107%116%77%146%55%174%291$4@%338$2@$1@$0@@$3@@%273%167%183$3@%168@@$4$2@@@%167%169%168@$3@@%167%367$4$2@@@%291$4@$0@%166$3@%248%209%272@@@@@@@@|@|@|@|@|@@"])
  fun op firstP_at_zero x = x
    val op firstP_at_zero =
    DT(((("path",57),
        [("arithmetic",[62]),("bool",[25,26,27,36,51,52,56]),
         ("path",[14,16,56]),("prim_rec",[6])]),["DISK_THM"]),
       [read"%123%2%146%55%174%291$1@$0@%168@@$1%284$0@@@|@|@"])
  fun op exists_thm x = x
    val op exists_thm =
    DT(((("path",60),
        [("arithmetic",[65]),
         ("bool",
         [25,26,27,30,36,37,47,48,51,52,53,54,56,58,63,72,76,105,106,124,
          140,143]),("combin",[19]),("path",[56,58]),("prim_rec",[7]),
         ("sat",[1,3,5,6,7,11,14,15])]),["DISK_THM"]),
       [read"%123%2%167%115%107%174%279$1@%354$0@@@$1$0@@|@@%115%107%117%78%147%56%174%280$3@%339$2@$1@$0@@@%273$3$2@@%280$3@$0@@@|@|@|@@|@"])
  fun op every_thm x = x
    val op every_thm =
    DT(((("path",61),
        [("bool",[25,54,56,96]),("combin",[8]),
         ("path",[59,60])]),["DISK_THM"]),
       [read"%123%2%167%115%107%174%277$1@%354$0@@@$1$0@@|@@%115%107%117%78%147%56%174%278$3@%339$2@$1@$0@@@%167$3$2@@%278$3@$0@@@|@|@|@@|@"])
  fun op not_every x = x
    val op not_every =
    DT(((("path",62),[("bool",[25,54,56]),("path",[59])]),["DISK_THM"]),
       [read"%123%2%146%55%174%367%277$1@$0@@@%279%316%367@$1@@$0@@|@|@"])
  fun op not_exists x = x
    val op not_exists =
    DT(((("path",63),
        [("bool",[14,25,54,56,63]),("combin",[5,8]),("path",[59]),
         ("sat",[1,3,5,6,7,11,15])]),["DISK_THM"]),
       [read"%123%2%146%55%174%367%279$1@$0@@@%277%316%367@$1@@$0@@|@|@"])
  fun op exists_el x = x
    val op exists_el =
    DT(((("path",64),
        [("arithmetic",[109]),
         ("bool",[14,25,26,47,48,53,54,58,63,71,72,78,80,84,93,94,96,146]),
         ("path",[51,55,58]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%123%2%146%55%174%279$1@$0@@%202%34%167%225$0@%251$1@@@$2%275$0@$1@@@|@@|@|@"])
  fun op every_el x = x
    val op every_el =
    DT(((("path",65),
        [("bool",[25,26,47,48,53,54,58,63,71,72,76,80,81,94,96]),
         ("combin",[8]),("path",[59,64]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%123%2%146%55%174%277$1@$0@@%145%34%194%225$0@%251$1@@@$2%275$0@$1@@@|@@|@|@"])
  fun op every_coinduction x = x
    val op every_coinduction =
    DT(((("path",66),
        [("arithmetic",[62,65]),
         ("bool",
         [14,25,26,27,36,47,48,51,52,53,54,56,58,63,72,87,94,96,105,124]),
         ("combin",[8,19]),("num",[7,9]),("path",[14,56,58,59]),
         ("prim_rec",[6,7]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%141%4%123%5%194%167%115%107%194$2%354$0@@@$1$0@@|@@%115%107%116%77%146%55%194$4%338$2@$1@$0@@@%167$3$2@@$4$0@@@|@|@|@@@%146%55%194$2$0@@%277$1@$0@@|@@|@|@"])
  fun op exists_induction x = x
    val op exists_induction =
    DT(((("path",67),
        [("bool",[25,26,36,54,56,58,60,73,96,102,105,124]),("combin",[8]),
         ("path",[62,66])]),["DISK_THM"]),
       [read"%194%167%115%107%194%5$0@@%4%354$0@@@|@@%167%115%107%116%77%146%55%194%5$2@@%4%338$2@$1@$0@@@|@|@|@@%115%107%116%77%146%55%194%4$0@@%4%338$2@$1@$0@@@|@|@|@@@@%146%55%194%279%5@$0@@%4$0@@|@@"])
  fun op mem_thm x = x
    val op mem_thm =
    DT(((("path",69),
        [("bool",[25,26,27,52,56,58,76,80,98,143]),
         ("path",[16,27,35,49,68]),
         ("pred_set",[10,80,144])]),["DISK_THM"]),
       [read"%167%115%107%115%83%174%310$0@%354$1@@@%171$0@$1@@|@|@@%117%109%118%79%151%59%117%85%174%311$0@%342$3@$2@$1@@@%273%173$0@$3@@%311$0@$1@@@|@|@|@|@@"])
  fun op drop_def_compute x = x
    val op drop_def_compute =
    DT(((("path",71),
        [("arithmetic",[268]),("bool",[26]),("path",[70])]),["DISK_THM"]),
       [read"%167%146%55%189%274%168@$0@@$0@|@@%167%145%53%146%55%189%274%248%209$1@@@$0@@%274%166%248%209$1@@@%248%209%272@@@@%357$0@@@|@|@@%145%53%146%55%189%274%248%210$1@@@$0@@%274%248%209$1@@@%357$0@@@|@|@@@"])
  fun op numeral_drop x = x
    val op numeral_drop =
    DT(((("path",72),
        [("arithmetic",[268]),("bool",[26]),("path",[70])]),["DISK_THM"]),
       [read"%167%145%53%146%55%189%274%248%209$1@@@$0@@%274%166%248%209$1@@@%248%209%272@@@@%357$0@@@|@|@@%145%53%146%55%189%274%248%210$1@@@$0@@%274%248%209$1@@@%357$0@@@|@|@@"])
  fun op finite_drop x = x
    val op finite_drop =
    DT(((("path",73),
        [("bool",[14,25,26,27,52,53,56,58,63,105,124,143]),("num",[7,9]),
         ("path",[14,18,27,49,50,70]),("pred_set",[10,80,144]),
         ("prim_rec",[1])]),["DISK_THM"]),
       [read"%146%55%145%53%194%225$0@%251$1@@@%174%282%274$0@$1@@@%282$1@@@|@|@"])
  fun op length_drop x = x
    val op length_drop =
    DT(((("path",74),
        [("arithmetic",[24,25,27,46,62,71,93,172,173,177,180,269]),
         ("bool",
         [14,25,26,27,30,36,43,47,48,51,52,53,54,56,58,63,64,72,73,74,78,
          80,81,84,93,96,101,104,105,124,143,146]),("num",[7,9]),
         ("numeral",[3,8]),("option",[6,7,10,11,16]),
         ("path",[14,27,30,33,49,70]),("pred_set",[10,80,144]),
         ("prim_rec",[1]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%146%55%145%53%194%225$0@%251$1@@@%187%306%274$0@$1@@@%327%306$1@@%246@%46%259%166$0@$1@@|@@@|@|@"])
  fun op PL_drop x = x
    val op PL_drop =
    DT(((("path",75),
        [("arithmetic",[62,63,95,112]),
         ("bool",
         [13,14,25,26,27,30,47,48,51,52,53,54,56,58,63,72,76,81,94,96,97,
          105,106,124,143]),("num",[7,9]),("path",[14,27,49,50,70]),
         ("pred_set",[3,10,80,144,148]),("prim_rec",[1]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%146%55%145%34%194%225$0@%251$1@@@%177%251%274$0@$1@@@%223%53%166$0@$1@|@%251$1@@@@|@|@"])
  fun op IN_PL_drop x = x
    val op IN_PL_drop =
    DT(((("path",76),
        [("arithmetic",[24,25,27,46,71,93,128,172,173,177,180,269]),
         ("bool",
         [25,36,43,51,52,53,54,56,58,63,93,96,101,104,105,106,124]),
         ("numeral",[3,8]),("path",[75]),("pred_set",[144]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%145%34%145%36%146%55%194%225$2@%251$0@@@%174%225$1@%251%274$2@$0@@@@%225%157$2@$1@@%251$0@@@@|@|@|@"])
  fun op first_drop x = x
    val op first_drop =
    DT(((("path",77),
        [("bool",[14,25,26,27,52,53,56,58,63,105,124,143]),("num",[7,9]),
         ("path",[14,27,35,49,50,70]),("pred_set",[10,80,144]),
         ("prim_rec",[1])]),["DISK_THM"]),
       [read"%145%34%146%55%194%225$1@%251$0@@@%171%284%274$1@$0@@@%275$1@$0@@@|@|@"])
  fun op first_label_drop x = x
    val op first_label_drop =
    DT(((("path",78),
        [("bool",[14,25,26,27,52,53,56,58,63,105,124,143]),("num",[7,9]),
         ("path",[14,27,37,49,50,70]),("pred_set",[10,80,144]),
         ("prim_rec",[1])]),["DISK_THM"]),
       [read"%145%34%146%55%194%225$1@%251$0@@@%172%292%274$1@$0@@@%313$1@$0@@@|@|@"])
  fun op tail_drop x = x
    val op tail_drop =
    DT(((("path",79),
        [("arithmetic",[22,25,27,46,71,79,93,130,172,173,177,180,268]),
         ("bool",
         [14,25,26,27,36,51,52,53,54,56,58,63,93,96,104,105,107,124,143]),
         ("num",[7,9]),("numeral",[3,5,6,8]),("path",[14,27,49,50,70]),
         ("pred_set",[10,80,144]),("prim_rec",[1]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%145%34%146%55%194%225%157$1@%248%209%272@@@@%251$0@@@%189%357%274$1@$0@@@%274%157$1@%248%209%272@@@@$0@@@|@|@"])
  fun op el_drop x = x
    val op el_drop =
    DT(((("path",80),
        [("arithmetic",[22,24]),
         ("bool",[14,25,26,27,52,53,56,58,63,105,124,143]),("num",[7,9]),
         ("path",[14,27,35,49,70]),("pred_set",[10,80,144]),
         ("prim_rec",[1])]),["DISK_THM"]),
       [read"%145%34%145%36%146%55%194%225%157$2@$1@@%251$0@@@%171%275$2@%274$1@$0@@@%275%157$2@$1@@$0@@@|@|@|@"])
  fun op nth_label_drop x = x
    val op nth_label_drop =
    DT(((("path",81),
        [("arithmetic",[22,24]),
         ("bool",[14,25,26,27,52,53,56,58,63,105,124,143]),("num",[7,9]),
         ("path",[14,27,37,49,70]),("pred_set",[10,80,144]),
         ("prim_rec",[1])]),["DISK_THM"]),
       [read"%145%34%145%36%146%55%194%225%261%157$2@$1@@@%251$0@@@%172%313$2@%274$1@$0@@@%313%157$2@$1@@$0@@@|@|@|@"])
  fun op take_def_compute x = x
    val op take_def_compute =
    DT(((("path",83),
        [("arithmetic",[268]),("bool",[26]),("path",[82])]),["DISK_THM"]),
       [read"%167%146%55%189%359%168@$0@@%354%284$0@@@|@@%167%145%53%146%55%189%359%248%209$1@@@$0@@%338%284$0@@%292$0@@%359%166%248%209$1@@@%248%209%272@@@@%357$0@@@@|@|@@%145%53%146%55%189%359%248%210$1@@@$0@@%338%284$0@@%292$0@@%359%248%209$1@@@%357$0@@@@|@|@@@"])
  fun op first_take x = x
    val op first_take =
    DT(((("path",84),
        [("arithmetic",[28]),("bool",[25,56]),
         ("path",[16,82])]),["DISK_THM"]),
       [read"%146%55%145%34%171%284%359$0@$1@@@%284$1@@|@|@"])
  fun op finite_take x = x
    val op finite_take =
    DT(((("path",85),
        [("bool",[14,25,26,27,52,53,58,63,105,124,143]),("num",[7,9]),
         ("path",[14,16,18,27,28,49,50,82]),("pred_set",[10,80,144]),
         ("prim_rec",[1])]),["DISK_THM"]),
       [read"%146%55%145%34%194%225$0@%251$1@@@%282%359$0@$1@@@|@|@"])
  fun op length_take x = x
    val op length_take =
    DT(((("path",86),
        [("arithmetic",[22,25,64,79,91]),
         ("bool",[14,25,26,27,51,52,53,56,58,63,105,124,129,143,147]),
         ("num",[9]),("numeral",[3,6]),("option",[10,16]),
         ("path",[14,16,27,28,30,49,50,82,85]),
         ("pred_set",[10,80,144])]),["DISK_THM"]),
       [read"%146%55%145%34%194%225$0@%251$1@@@%187%306%359$0@$1@@@%259%157$0@%248%209%272@@@@@@|@|@"])
  fun op PL_take x = x
    val op PL_take =
    DT(((("path",87),
        [("arithmetic",[28,38,46,71,93,147,173,176,180]),
         ("bool",
         [14,25,26,27,36,37,51,52,53,54,56,58,63,104,105,106,124,143]),
         ("num",[7,9]),("numeral",[3,8]),("pair",[3]),
         ("path",[14,16,27,28,49,50,82]),
         ("pred_set",[3,6,10,80,135,144,370]),
         ("prim_rec",[1])]),["DISK_THM"]),
       [read"%146%55%145%34%194%225$0@%251$1@@@%177%251%359$0@$1@@@%221%53%164$0@%170$0@$1@@|@@@|@|@"])
  fun op last_take x = x
    val op last_take =
    DT(((("path",88),
        [("bool",[14,25,26,27,52,53,56,58,63,105,124,143]),("num",[7,9]),
         ("path",[14,16,19,27,28,35,49,50,82]),("pred_set",[10,80,144]),
         ("prim_rec",[1])]),["DISK_THM"]),
       [read"%145%34%146%55%194%225$1@%251$0@@@%171%304%359$1@$0@@@%275$1@$0@@@|@|@"])
  fun op nth_label_take x = x
    val op nth_label_take =
    DT(((("path",89),
        [("arithmetic",[28,37]),
         ("bool",[14,25,26,27,51,52,53,56,58,63,105,124,143]),
         ("num",[7,9]),("path",[13,16,27,28,37,49,50,82]),
         ("pred_set",[10,80,144]),("prim_rec",[1,6])]),["DISK_THM"]),
       [read"%145%53%146%55%145%34%194%167%169$0@$2@@%225$2@%251$1@@@@%172%313$0@%359$2@$1@@@%313$0@$1@@@|@|@|@"])
  fun op singleton_seg x = x
    val op singleton_seg =
    DT(((("path",91),
        [("arithmetic",[130]),("bool",[25,53,56,58,63,105,124]),
         ("path",[10,77,82,90])]),["DISK_THM"]),
       [read"%145%34%146%55%194%225$1@%251$0@@@%189%353$1@$1@$0@@%354%275$1@$0@@@@|@|@"])
  fun op recursive_seg x = x
    val op recursive_seg =
    DT(((("path",92),
        [("arithmetic",
         [17,24,25,27,28,41,46,59,71,93,95,172,173,176,177,180,205,269]),
         ("bool",
         [13,25,26,27,30,36,43,47,48,51,52,53,54,56,58,63,72,78,84,93,94,
          96,101,104,105,124,146]),("numeral",[3,5,8]),
         ("path",[11,51,77,78,79,82,90]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%145%34%145%36%146%55%194%167%169$2@$1@@%225$1@%251$0@@@@%189%353$2@$1@$0@@%338%275$2@$0@@%313$2@$0@@%353%157$2@%248%209%272@@@@$1@$0@@@@|@|@|@"])
  fun op PL_seg x = x
    val op PL_seg =
    DT(((("path",93),
        [("arithmetic",[10,24,25,27,46,71,93,172,173,177,180,269]),
         ("bool",
         [13,25,26,27,30,36,43,47,48,51,52,53,54,56,58,63,84,93,94,96,101,
          104,105,124]),("numeral",[3,8]),("path",[51,76,87,90]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%145%34%145%36%146%55%194%167%170$2@$1@@%225$1@%251$0@@@@%177%251%353$2@$1@$0@@@%221%53%164$0@%170$0@%166$2@$3@@@|@@@|@|@|@"])
  fun op finite_seg x = x
    val op finite_seg =
    DT(((("path",94),
        [("arithmetic",[10,24,25,27,46,71,93,172,173,177,180,269]),
         ("bool",
         [13,25,26,27,30,36,43,47,48,51,52,53,54,56,58,63,84,93,94,96,101,
          104,105]),("numeral",[3,8]),("path",[51,76,85,90]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%146%55%145%34%145%36%194%167%170$1@$0@@%225$0@%251$2@@@@%282%353$1@$0@$2@@@|@|@|@"])
  fun op first_seg x = x
    val op first_seg =
    DT(((("path",95),
        [("arithmetic",[10]),
         ("bool",
         [13,25,26,27,30,43,47,48,51,52,53,54,56,58,63,84,93,94,96,105,
          124]),("path",[51,77,84,90]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%145%34%145%36%146%55%194%167%170$2@$1@@%225$1@%251$0@@@@%171%284%353$2@$1@$0@@@%275$2@$0@@@|@|@|@"])
  fun op last_seg x = x
    val op last_seg =
    DT(((("path",96),
        [("arithmetic",[10,24,25,27,46,71,93,172,173,177,180,269]),
         ("bool",
         [13,25,26,27,30,36,43,47,48,51,52,53,54,56,58,63,84,93,94,96,101,
          104,105]),("numeral",[3,8]),("path",[51,76,80,88,90]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%145%34%145%36%146%55%194%167%170$2@$1@@%225$1@%251$0@@@@%171%304%353$2@$1@$0@@@%275$1@$0@@@|@|@|@"])
  fun op firstP_at_unique x = x
    val op firstP_at_unique =
    DT(((("path",98),
        [("arithmetic",[17,24,25,27,41,46,65,71,93,172,173,177,180,269]),
         ("bool",
         [14,25,26,27,36,43,47,48,51,52,53,54,56,58,63,84,93,94,96,101,104,
          105,106,124]),("combin",[19]),("num",[7,9]),("numeral",[3,5,8]),
         ("path",[14,16,56,57]),("prim_rec",[7]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%123%2%146%55%145%53%194%291$2@$1@$0@@%145%46%174%291$3@$2@$0@@%183$0@$1@@|@@|@|@|@"])
  fun op is_stopped_thm x = x
    val op is_stopped_thm =
    DT(((("path",100),
        [("bool",[25,26,27,37,54,58,63,140]),
         ("path",[10,12,99])]),["DISK_THM"]),
       [read"%167%115%107%174%296%354$0@@@%262@|@@%117%109%118%79%151%59%174%297%342$2@$1@$0@@@%216@|@|@|@@"])
  fun op filter_every x = x
    val op filter_every =
    DT(((("path",102),
        [("bool",
         [13,25,26,27,30,36,47,48,51,52,53,54,56,58,63,64,71,72,76,77,78,
          80,81,83,84,93,94,95,96,101,105,124,129,145,146,147]),
         ("combin",[19]),("path",[10,11,12,66,67,101]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%123%2%146%55%194%279$1@$0@@%277$1@%281$1@$0@@@|@|@"])
  fun op pgenerate_infinite x = x
    val op pgenerate_infinite =
    DT(((("path",104),
        [("bool",
         [13,25,26,27,30,47,48,51,52,53,54,56,58,63,71,81,84,94,96]),
         ("path",[11,12,21,103]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%139%20%140%30%367%282%343$1@$0@@@|@|@"])
  fun op pgenerate_not_stopped x = x
    val op pgenerate_not_stopped =
    DT(((("path",105),
        [("bool",[25,26,47,48,53,54,63,71,93,94,96]),("path",[18,104]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%139%20%140%30%115%107%367%189%354$0@@%343$2@$1@@@|@|@|@"])
  fun op el_pgenerate x = x
    val op el_pgenerate =
    DT(((("path",106),
        [("bool",[14,25,56]),("combin",[8]),("num",[9]),
         ("path",[16,27,35,103])]),["DISK_THM"]),
       [read"%145%53%139%20%140%30%171%275$2@%343$1@$0@@@$1$2@@|@|@|@"])
  fun op nth_label_pgenerate x = x
    val op nth_label_pgenerate =
    DT(((("path",107),
        [("bool",[14,25,56]),("combin",[8]),("num",[9]),
         ("path",[27,28,37,103])]),["DISK_THM"]),
       [read"%145%53%139%20%140%30%172%313$2@%343$1@$0@@@$0$2@@|@|@|@"])
  fun op pgenerate_11 x = x
    val op pgenerate_11 =
    DT(((("path",108),
        [("bool",
         [13,25,26,27,30,36,47,48,51,52,53,54,56,58,60,63,93,94,96,105,106,
          124]),("combin",[19]),("path",[106,107]),
         ("sat",[1,3,5,6,7,11,13,14,15])]),["DISK_THM"]),
       [read"%139%21%140%31%139%22%140%32%174%189%343$3@$2@@%343$1@$0@@@%167%175$3@$1@@%176$2@$0@@@|@|@|@|@"])
  fun op pgenerate_onto x = x
    val op pgenerate_onto =
    DT(((("path",109),
        [("bool",
         [25,26,27,37,51,52,54,56,58,63,93,95,101,105,124,143,145]),
         ("combin",[5]),
         ("path",[11,13,16,18,20,27,28,35,37,103,105])]),["DISK_THM"]),
       [read"%146%55%194%367%282$0@@@%198%20%199%30%189$2@%343$1@$0@@|@|@@|@"])
  fun op okpath_monotone x = x
    val op okpath_monotone =
    DT(((("path",111),
        [("bool",
         [13,25,26,27,30,47,48,51,52,53,54,56,58,63,72,94,96,105,124]),
         ("fixedPoint",[0]),("pair",[3,7,16]),("path",[110]),
         ("pred_set",[6,14,18,33]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%125%7%312%326$0@@|@"])
  fun op okpath_co_ind x = x
    val op okpath_co_ind =
    DT(((("path",113),
        [("bool",[18,26,27,36,37,51,52,53,58,63,105,124,140,143]),
         ("fixedPoint",[10]),("pair",[3,7,16]),
         ("path",[10,11,12,14,110,111,112]),
         ("pred_set",[6,14,18,33])]),["DISK_THM"]),
       [read"%141%4%194%115%107%116%77%146%55%194$3%338$2@$1@$0@@@%167%7$2@$1@%284$0@@@$3$0@@@|@|@|@@%146%55%194$1$0@@%319%7@$0@@|@@|@"])
  fun op okpath_cases x = x
    val op okpath_cases =
    DT(((("path",114),
        [("bool",[26,51,58,63]),("fixedPoint",[8]),("pair",[3,7,16]),
         ("path",[110,111,112]),("pred_set",[0,3,6,14,33])]),["DISK_THM"]),
       [read"%125%7%146%110%174%319$1@$0@@%273%195%112%189$1@%354$0@@|@@%195%112%196%77%203%55%167%189$3@%338$2@$1@$0@@@%167$4$2@$1@%284$0@@@%319$4@$0@@@|@|@|@@@|@|@"])
  fun op okpath_thm x = x
    val op okpath_thm =
    DT(((("path",115),
        [("bool",[25,26,27,37,51,52,56,58,63,140,143]),
         ("path",[10,11,12,114])]),["DISK_THM"]),
       [read"%125%7%167%115%107%319$1@%354$0@@|@@%115%107%116%77%146%55%174%319$3@%338$2@$1@$0@@@%167$3$2@$1@%284$0@@@%319$3@$0@@@|@|@|@@|@"])
  fun op finite_okpath_ind x = x
    val op finite_okpath_ind =
    DT(((("path",116),
        [("bool",
         [25,26,36,47,48,51,53,54,56,58,63,71,81,93,94,96,105,124]),
         ("combin",[19]),("path",[21,115]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%125%7%194%167%115%107%4%354$0@@|@@%115%107%116%77%146%55%194%167%319$3@$0@@%167%282$0@@%167$3$2@$1@%284$0@@@%4$0@@@@@%4%338$2@$1@$0@@@|@|@|@@@%146%94%194%167%319$1@$0@@%282$0@@@%4$0@@|@@|@"])
  fun op okpath_pmap x = x
    val op okpath_pmap =
    DT(((("path",117),
        [("bool",[25,26,27,53,54,55,58,63,84]),
         ("path",[11,12,13,23,24,113,115]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%125%7%120%12%130%24%146%55%194%167%319$3@$0@@%115%107%116%77%115%113%194$6$2@$1@$0@@$6$5$2@@$4$1@@$5$0@@@|@|@|@@@%319$3@%345$2@$1@$0@@@|@|@|@|@"])
  fun op finite_plink x = x
    val op finite_plink =
    DT(((("path",119),
        [("bool",
         [13,25,26,27,30,36,47,48,51,52,53,54,56,58,63,71,81,84,93,94,96,
          105,124]),("path",[11,12,13,18,21,118]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%146%64%146%66%174%282%344$1@$0@@@%167%282$1@@%282$0@@@|@|@"])
  fun op first_plink x = x
    val op first_plink =
    DT(((("path",120),
        [("bool",[25,53,56,58,105,124]),
         ("path",[14,16,19,118])]),["DISK_THM"]),
       [read"%146%64%146%66%194%171%304$1@@%284$0@@@%171%284%344$1@$0@@@%284$1@@@|@|@"])
  fun op last_plink x = x
    val op last_plink =
    DT(((("path",121),
        [("bool",
         [25,26,36,47,48,51,53,54,56,58,63,71,81,84,93,94,96,105,124]),
         ("path",[19,21,118]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%146%64%146%66%194%167%282$1@@%167%282$0@@%171%304$1@@%284$0@@@@@%171%304%344$1@$0@@@%304$0@@@|@|@"])
  fun op okpath_plink x = x
    val op okpath_plink =
    DT(((("path",122),
        [("bool",
         [25,26,36,47,48,51,53,54,56,58,63,71,81,84,93,94,96,105,124]),
         ("combin",[19]),("path",[19,21,115,118,120]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%125%7%146%64%146%66%194%167%282$1@@%171%304$1@@%284$0@@@@%174%319$2@%344$1@$0@@@%167%319$2@$1@@%319$2@$0@@@@|@|@|@"])
  fun op okpath_take x = x
    val op okpath_take =
    DT(((("path",123),
        [("bool",[14,25,26,27,51,52,53,58,63,105,124,143]),("num",[7,9]),
         ("path",[14,16,27,28,49,50,82,84,115]),("pred_set",[10,80,144]),
         ("prim_rec",[1])]),["DISK_THM"]),
       [read"%125%7%146%55%145%34%194%167%225$0@%251$1@@@%319$2@$1@@@%319$2@%359$0@$1@@@|@|@|@"])
  fun op okpath_drop x = x
    val op okpath_drop =
    DT(((("path",124),
        [("bool",[14,25,26,27,51,52,53,58,63,105,124,143]),("num",[7,9]),
         ("path",[14,27,49,50,70,115]),("pred_set",[10,80,144]),
         ("prim_rec",[1])]),["DISK_THM"]),
       [read"%125%7%146%55%145%34%194%167%225$0@%251$1@@@%319$2@$1@@@%319$2@%274$0@$1@@@|@|@|@"])
  fun op okpath_seg x = x
    val op okpath_seg =
    DT(((("path",125),
        [("arithmetic",[10,24,25,27,46,71,93,172,173,177,180,269]),
         ("bool",
         [13,25,26,27,30,36,43,47,48,51,52,53,54,56,58,63,84,93,94,96,101,
          104,105,124]),("numeral",[3,8]),("path",[51,76,90,123,124]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%125%7%146%55%145%34%145%36%194%167%170$1@$0@@%167%225$0@%251$2@@@%319$3@$2@@@@%319$3@%353$1@$0@$2@@@|@|@|@|@"])
  fun op SN_finite_paths x = x
    val op SN_finite_paths =
    DT(((("path",127),
        [("bool",
         [13,25,26,27,30,36,47,48,51,52,53,54,56,58,63,84,86,87,93,94,96,
          101,105,124,145]),("combin",[19]),("path",[13,16,18,115,126]),
         ("relation",[101]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%125%7%146%55%194%167%253$1@@%319$1@$0@@@%282$0@@|@|@"])
  fun op finite_paths_SN x = x
    val op finite_paths_SN =
    DT(((("path",128),
        [("arithmetic",[22,24,25,64]),
         ("bool",
         [14,15,25,26,36,47,48,53,54,56,58,63,71,72,86,94,101,105,124,
          145]),("combin",[5,8,9,19]),("numeral",[3]),
         ("path",[11,16,103,104,113,126]),("prim_rec",[39,40]),
         ("sat",[1,3,5,6,7,11,13,14,15])]),["DISK_THM"]),
       [read"%125%7%194%146%55%194%319$1@$0@@%282$0@@|@@%253$0@@|@"])
  fun op SN_finite_paths_EQ x = x
    val op SN_finite_paths_EQ =
    DT(((("path",129),
        [("bool",[25,26,47,48,53,54,58,63,71,77,78,81,93,94,96,146]),
         ("path",[127,128]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%125%7%174%253$0@@%146%55%194%319$1@$0@@%282$0@@|@@|@"])
  fun op labels_LMAP x = x
    val op labels_LMAP =
    DT(((("path",130),
        [("bool",[25,26,27,37,51,52,53,54,55,56,58,63,143]),
         ("llist",[17,18,43,129]),("pair",[8,9]),("path",[2,8,9,13,97]),
         ("sat",[1,3,5,6,7,11,12,13,15,17,18])]),["DISK_THM"]),
       [read"%146%55%181%298$0@@%236%219@%255%294$0@@@@|@"])
  fun op labels_plink x = x
    val op labels_plink =
    DT(((("path",131),
        [("bool",[25,26,27,37,51,52,53,54,55,56,58,63,73,74,75,143]),
         ("llist",[17,18,44,46,129]),("pair",[5,8,9]),("path",[13,97,118]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%146%64%146%66%181%298%344$1@$0@@@%228%298$1@@%298$0@@@|@|@"])
  fun op finite_labels x = x
    val op finite_labels =
    DT(((("path",132),
        [("bool",[25,56]),("llist",[71]),("path",[17,130])]),["DISK_THM"]),
       [read"%146%55%174%234%298$0@@@%282$0@@|@"])
  fun op unfold_thm x = x
    val op unfold_thm =
    DT(((("path",134),
        [("bool",[25,51,56,169]),("llist",[18,28]),("option",[6,7,13]),
         ("pair",[4,5,8,9,16,49]),("path",[2,3,7,8,9,133])]),["DISK_THM"]),
       [read"%121%69%128%16%115%83%190%365$2@$1@$0@@%328$1$0@@%356$2$0@@@%102%330$0@%87%39%341$5$3@@$0@%365$5@$4@$1@@||@|@@|@|@|@"])
  fun op unfold_thm2 x = x
    val op unfold_thm2 =
    DT(((("path",135),
        [("bool",[25,51,56,169]),("option",[7]),("pair",[49]),
         ("path",[10,11,134])]),["DISK_THM"]),
       [read"%121%69%128%16%115%107%115%103%117%104%167%194%188$3$2@@%247@@%190%365$4@$3@$2@@%356$4$2@@@@@%194%188$3$2@@%260%158$1@$0@@@@%190%365$4@$3@$2@@%341$4$2@@$0@%365$4@$3@$1@@@@@|@|@|@|@|@"])
  fun op labels_unfold x = x
    val op labels_unfold =
    DT(((("path",136),
        [("bool",[14,25,26,36,51,53,54,55,56,58,63,143]),
         ("combin",[5,19,20]),("llist",[131]),("option",[6,10,29,31,32]),
         ("pair",[4,5,8,9,16]),("path",[2,130,133]),
         ("sat",[1,3,7,17,18])]),["DISK_THM"]),
       [read"%121%69%128%16%115%83%182%300%365$2@$1@$0@@@%243$1@$0@@|@|@|@"])
  fun op okpath_unfold x = x
    val op okpath_unfold =
    DT(((("path",137),
        [("bool",
         [2,15,25,26,27,51,53,54,55,56,58,63,83,99,100,105,124,169]),
         ("option",[6,7,10]),("pair",[4,5,49]),("path",[11,12,16,113,134]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%123%2%132%45%121%69%128%16%115%83%194%167$4$0@@%167%115%83%115%87%117%39%194%167$7$2@@%188$4$2@@%260%158$1@$0@@@@@$7$1@@|@|@|@@%115%83%115%87%117%39%194%167$7$2@@%188$4$2@@%260%158$1@$0@@@@@$6$5$2@@$0@$5$1@@@|@|@|@@@@%321$3@%365$2@$1@$0@@@|@|@|@|@|@"])
  fun op trace_machine_thm x = x
    val op trace_machine_thm =
    DT(((("path",139),
        [("arithmetic",[27,46,71,93,172,173,177,180]),
         ("bool",
         [2,14,15,25,26,27,30,36,51,52,53,54,55,56,58,63,64,75,93,96,104,
          105,107,124,129,143,169]),("list",[20,22,43,48,49,104]),
         ("llist",[14,15,16,17,18,34,41,44,79,130]),("numeral",[3,5,6,8]),
         ("option",[7,10,11,13,16,27]),("pair",[4,5,16,49]),
         ("path",[16,134,136,137,138]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%138%3%144%99%194%145%53%142%40%194%185%241$1@$2@@%257$0@@@$3$0@@|@|@@%205%60%167%180$1@%302$0@@@%167%323%364$2@@$0@@%179%289$0@@%245@@@|@@|@|@"])
  fun op trace_machine_thm2 x = x
    val op trace_machine_thm2 =
    DT(((("path",140),
        [("bool",[2,14,15,25,26,27,36,53,54,55,58,63,73,75,105,124]),
         ("list",[20,55,56]),("llist",[15,16,33,34]),("num",[9]),
         ("option",[6,7,10,11,16]),("path",[13,16,97,115,138]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%145%53%142%40%138%3%152%60%116%35%194%167%323%364$2@@$1@@$2%289$1@@@@%194%185%241$4@%302$1@@@%257$3@@@$2%208%289$1@@$3@@@@|@|@|@|@|@"])
  fun op LTAKE_labels x = x
    val op LTAKE_labels =
    DT(((("path",141),
        [("bool",
         [2,14,15,25,26,27,51,52,53,54,55,56,58,63,72,73,75,96,99,143]),
         ("llist",[15,16,33,34,78]),("num",[7,9]),
         ("option",[6,7,10,11,16,29,31]),("path",[13,27,28,49,50,82,97]),
         ("pred_set",[10,80,144]),("prim_rec",[1]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%145%53%146%55%143%41%174%186%242$2@%298$1@@@%258$0@@@%167%225$2@%251$1@@@%186%360%298%359$2@$1@@@@%258$0@@@@|@|@|@"])
  fun op drop_eq_pcons x = x
    val op drop_eq_pcons =
    DT(((("path",142),
        [("arithmetic",[18,22,25,27,46,71,79,93,172,173,177,180,181]),
         ("bool",
         [2,14,15,25,26,27,36,51,52,53,54,55,58,63,73,75,93,96,104,105,107,
          124,143]),("num",[7,9]),("numeral",[0,3,5,6,8]),
         ("path",[13,27,49,50,70]),("pred_set",[10,80,144]),
         ("prim_rec",[1]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%145%53%146%55%115%33%116%38%146%95%194%167%225$4@%251$3@@@%189%274$4@$3@@%338$2@$1@$0@@@@%225%157$4@%248%209%272@@@@%251$3@@@|@|@|@|@|@"])
  fun op okpath_parallel_comp x = x
    val op okpath_parallel_comp =
    DT(((("path",144),
        [("bool",
         [2,14,15,25,26,27,36,51,53,54,55,56,58,63,73,75,83,99,100,105,
          124]),("combin",[19]),("pair",[5,8,9]),
         ("path",[11,12,13,23,24,27,50,70,79,113,115,124,142,143]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%153%61%127%49%132%50%174%324%335$1@$0@@$2@@%167%320$1@%351%217@%109$0|@$2@@@%321$0@%352%254@%109$0|@$2@@@@|@|@|@"])
  fun op build_pcomp_trace x = x
    val op build_pcomp_trace =
    DT(((("path",145),
        [("bool",
         [2,15,25,26,27,30,51,52,53,54,55,56,58,63,64,73,74,75,84,96,105,
          124,143,169]),("llist",[15,16,17,18,130]),
         ("option",[7,10,11,27]),("pair",[4,5,16,49]),
         ("path",[13,16,27,28,97,99,100,115,134,136,137,143]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%125%47%146%64%135%51%150%67%194%167%319$3@$2@@%167%322$1@$0@@%181%298$2@@%301$0@@@@@%206%62%167%325%333$4@$2@@$0@@%167%181%303$0@@%298$3@@@%192%290$0@@%158%284$3@@%287$1@@@@@|@@|@|@|@|@"])
  fun op nth_label_LNTH x = x
    val op nth_label_LNTH =
    DT(((("path",146),
        [("arithmetic",[18,22,24,25,27,46,71,79,93,172,173,177,180,181]),
         ("bool",
         [2,14,15,25,26,27,36,43,51,52,53,54,55,56,58,63,73,75,93,96,101,
          104,105,107,124,143]),("llist",[14,17,18,23]),("num",[7,9]),
         ("numeral",[0,3,5,6,8]),("option",[10,11]),
         ("path",[13,27,28,37,49,50,97]),("pred_set",[10,80,144]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%145%53%146%55%116%108%174%184%240$2@%298$1@@@%256$0@@@%167%225%157$2@%248%209%272@@@@%251$1@@@%172%313$2@$1@@$0@@@|@|@|@"])
  fun op nth_label_LTAKE x = x
    val op nth_label_LTAKE =
    DT(((("path",147),
        [("arithmetic",[24,25,41,46,59,71,93,173,177,180]),
         ("bool",
         [14,25,26,27,36,52,53,54,55,58,63,93,96,101,104,105,107,124]),
         ("list",[22,57,260,264]),("llist",[34,35,134]),("num",[9]),
         ("numeral",[3,7,8]),("option",[6,7,10,11]),("path",[146]),
         ("prim_rec",[6]),("rich_list",[236]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%145%53%146%55%143%41%145%34%117%101%194%167%186%242$4@%298$3@@@%258$2@@@%169$1@%232$2@@@@%172%313$1@$3@@%214$1@$2@@@|@|@|@|@|@"])
  fun op finite_path_end_cases x = x
    val op finite_path_end_cases =
    DT(((("path",148),
        [("bool",[25,26,27,37,51,52,53,54,55,56,58,63,105,124,140,143]),
         ("path",[10,11,12,19,21,118]),
         ("sat",[1,3,7,17,18])]),["DISK_THM"]),
       [read"%146%55%194%282$0@@%273%195%107%189$1@%354$0@@|@@%203%63%196%38%195%83%189$3@%344$2@%338%304$2@@$1@%354$0@@@@|@|@|@@@|@"])
  fun op simulation_trace_inclusion x = x
    val op simulation_trace_inclusion =
    DT(((("path",149),
        [("bool",
         [2,15,25,26,27,51,52,53,54,55,56,58,63,73,74,75,84,100,105,129,
          143,169]),("llist",[15,16,17,130]),("option",[10,11,27]),
         ("pair",[4,5,8,16]),
         ("path",[2,7,13,16,27,28,97,99,100,115,133,136,137]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%124%6%127%0%132%1%147%56%116%98%194%167%115%89%117%39%115%91%116%96%194%167$8$3@$0@@$7$3@$2@$1@@@%196%97%167$9$2@$0@@$7$1@$3@$0@@|@@|@|@|@|@@%167%320$3@$1@@$4%285$1@@$0@@@@%204%72%167%321$3@$0@@%167%182%299$2@@%300$0@@@%172%286$0@@$1@@@|@@|@|@|@|@|@"])
  end
  val _ = DB.bindl "path"
  [("path_TY_DEF",path_TY_DEF,DB.Def),
   ("path_absrep_bijections",path_absrep_bijections,DB.Def),
   ("first_def",first_def,DB.Def),
   ("stopped_at_def",stopped_at_def,DB.Def),
   ("pcons_def",pcons_def,DB.Def), ("finite_def",finite_def,DB.Def),
   ("last_thm",last_thm,DB.Def), ("pmap_def",pmap_def,DB.Def),
   ("tail_def",tail_def,DB.Def),
   ("first_label_def",first_label_def,DB.Def),
   ("length_def",length_def,DB.Def), ("el_def",el_def,DB.Def),
   ("nth_label_def",nth_label_def,DB.Def),
   ("pconcat_def",pconcat_def,DB.Def), ("PL_def",PL_def,DB.Def),
   ("firstP_at_def",firstP_at_def,DB.Def),
   ("exists_def",exists_def,DB.Def), ("every_def",every_def,DB.Def),
   ("mem_def",mem_def,DB.Def), ("drop_def",drop_def,DB.Def),
   ("take_def",take_def,DB.Def), ("seg_def",seg_def,DB.Def),
   ("labels_def",labels_def,DB.Def),
   ("is_stopped_def",is_stopped_def,DB.Def),
   ("filter_def",filter_def,DB.Def),
   ("pgenerate_def",pgenerate_def,DB.Def),
   ("okpath_f_def",okpath_f_def,DB.Def), ("okpath_def",okpath_def,DB.Def),
   ("plink_def",plink_def,DB.Def), ("SN_def",SN_def,DB.Def),
   ("unfold_def",unfold_def,DB.Def),
   ("trace_machine_def",trace_machine_def,DB.Def),
   ("parallel_comp_def",parallel_comp_def,DB.Def),
   ("path_rep_bijections_thm",path_rep_bijections_thm,DB.Thm),
   ("toPath_11",toPath_11,DB.Thm), ("fromPath_11",fromPath_11,DB.Thm),
   ("fromPath_onto",fromPath_onto,DB.Thm),
   ("toPath_onto",toPath_onto,DB.Thm),
   ("stopped_at_11",stopped_at_11,DB.Thm), ("pcons_11",pcons_11,DB.Thm),
   ("stopped_at_not_pcons",stopped_at_not_pcons,DB.Thm),
   ("path_cases",path_cases,DB.Thm), ("FORALL_path",FORALL_path,DB.Thm),
   ("EXISTS_path",EXISTS_path,DB.Thm), ("first_thm",first_thm,DB.Thm),
   ("finite_thm",finite_thm,DB.Thm),
   ("path_bisimulation",path_bisimulation,DB.Thm),
   ("finite_path_ind",finite_path_ind,DB.Thm),
   ("pmap_thm",pmap_thm,DB.Thm), ("first_pmap",first_pmap,DB.Thm),
   ("last_pmap",last_pmap,DB.Thm), ("finite_pmap",finite_pmap,DB.Thm),
   ("length_thm",length_thm,DB.Thm),
   ("alt_length_thm",alt_length_thm,DB.Thm),
   ("length_never_zero",length_never_zero,DB.Thm),
   ("finite_length",finite_length,DB.Thm),
   ("length_pmap",length_pmap,DB.Thm),
   ("el_def_compute",el_def_compute,DB.Thm),
   ("nth_label_def_compute",nth_label_def_compute,DB.Thm),
   ("path_Axiom",path_Axiom,DB.Thm), ("pconcat_thm",pconcat_thm,DB.Thm),
   ("pconcat_eq_stopped",pconcat_eq_stopped,DB.Thm),
   ("pconcat_eq_pcons",pconcat_eq_pcons,DB.Thm),
   ("finite_pconcat",finite_pconcat,DB.Thm),
   ("infinite_PL",infinite_PL,DB.Thm), ("PL_pcons",PL_pcons,DB.Thm),
   ("PL_stopped_at",PL_stopped_at,DB.Thm), ("PL_thm",PL_thm,DB.Thm),
   ("PL_0",PL_0,DB.Thm), ("PL_downward_closed",PL_downward_closed,DB.Thm),
   ("PL_pmap",PL_pmap,DB.Thm), ("el_pmap",el_pmap,DB.Thm),
   ("nth_label_pmap",nth_label_pmap,DB.Thm),
   ("firstP_at_thm",firstP_at_thm,DB.Thm),
   ("firstP_at_zero",firstP_at_zero,DB.Thm),
   ("exists_thm",exists_thm,DB.Thm), ("every_thm",every_thm,DB.Thm),
   ("not_every",not_every,DB.Thm), ("not_exists",not_exists,DB.Thm),
   ("exists_el",exists_el,DB.Thm), ("every_el",every_el,DB.Thm),
   ("every_coinduction",every_coinduction,DB.Thm),
   ("exists_induction",exists_induction,DB.Thm),
   ("mem_thm",mem_thm,DB.Thm),
   ("drop_def_compute",drop_def_compute,DB.Thm),
   ("numeral_drop",numeral_drop,DB.Thm),
   ("finite_drop",finite_drop,DB.Thm), ("length_drop",length_drop,DB.Thm),
   ("PL_drop",PL_drop,DB.Thm), ("IN_PL_drop",IN_PL_drop,DB.Thm),
   ("first_drop",first_drop,DB.Thm),
   ("first_label_drop",first_label_drop,DB.Thm),
   ("tail_drop",tail_drop,DB.Thm), ("el_drop",el_drop,DB.Thm),
   ("nth_label_drop",nth_label_drop,DB.Thm),
   ("take_def_compute",take_def_compute,DB.Thm),
   ("first_take",first_take,DB.Thm), ("finite_take",finite_take,DB.Thm),
   ("length_take",length_take,DB.Thm), ("PL_take",PL_take,DB.Thm),
   ("last_take",last_take,DB.Thm),
   ("nth_label_take",nth_label_take,DB.Thm),
   ("singleton_seg",singleton_seg,DB.Thm),
   ("recursive_seg",recursive_seg,DB.Thm), ("PL_seg",PL_seg,DB.Thm),
   ("finite_seg",finite_seg,DB.Thm), ("first_seg",first_seg,DB.Thm),
   ("last_seg",last_seg,DB.Thm),
   ("firstP_at_unique",firstP_at_unique,DB.Thm),
   ("is_stopped_thm",is_stopped_thm,DB.Thm),
   ("filter_every",filter_every,DB.Thm),
   ("pgenerate_infinite",pgenerate_infinite,DB.Thm),
   ("pgenerate_not_stopped",pgenerate_not_stopped,DB.Thm),
   ("el_pgenerate",el_pgenerate,DB.Thm),
   ("nth_label_pgenerate",nth_label_pgenerate,DB.Thm),
   ("pgenerate_11",pgenerate_11,DB.Thm),
   ("pgenerate_onto",pgenerate_onto,DB.Thm),
   ("okpath_monotone",okpath_monotone,DB.Thm),
   ("okpath_co_ind",okpath_co_ind,DB.Thm),
   ("okpath_cases",okpath_cases,DB.Thm), ("okpath_thm",okpath_thm,DB.Thm),
   ("finite_okpath_ind",finite_okpath_ind,DB.Thm),
   ("okpath_pmap",okpath_pmap,DB.Thm),
   ("finite_plink",finite_plink,DB.Thm),
   ("first_plink",first_plink,DB.Thm), ("last_plink",last_plink,DB.Thm),
   ("okpath_plink",okpath_plink,DB.Thm),
   ("okpath_take",okpath_take,DB.Thm), ("okpath_drop",okpath_drop,DB.Thm),
   ("okpath_seg",okpath_seg,DB.Thm),
   ("SN_finite_paths",SN_finite_paths,DB.Thm),
   ("finite_paths_SN",finite_paths_SN,DB.Thm),
   ("SN_finite_paths_EQ",SN_finite_paths_EQ,DB.Thm),
   ("labels_LMAP",labels_LMAP,DB.Thm),
   ("labels_plink",labels_plink,DB.Thm),
   ("finite_labels",finite_labels,DB.Thm),
   ("unfold_thm",unfold_thm,DB.Thm), ("unfold_thm2",unfold_thm2,DB.Thm),
   ("labels_unfold",labels_unfold,DB.Thm),
   ("okpath_unfold",okpath_unfold,DB.Thm),
   ("trace_machine_thm",trace_machine_thm,DB.Thm),
   ("trace_machine_thm2",trace_machine_thm2,DB.Thm),
   ("LTAKE_labels",LTAKE_labels,DB.Thm),
   ("drop_eq_pcons",drop_eq_pcons,DB.Thm),
   ("okpath_parallel_comp",okpath_parallel_comp,DB.Thm),
   ("build_pcomp_trace",build_pcomp_trace,DB.Thm),
   ("nth_label_LNTH",nth_label_LNTH,DB.Thm),
   ("nth_label_LTAKE",nth_label_LTAKE,DB.Thm),
   ("finite_path_end_cases",finite_path_end_cases,DB.Thm),
   ("simulation_trace_inclusion",simulation_trace_inclusion,DB.Thm)]

  local open Portable GrammarSpecials Parse
    fun UTOFF f = Feedback.trace("Parse.unicode_trace_off_complaints",0)f
  in
  val _ = mk_local_grms [("fixedPointTheory.fixedPoint_grammars",
                          fixedPointTheory.fixedPoint_grammars),
                         ("llistTheory.llist_grammars",
                          llistTheory.llist_grammars)]
  val _ = List.app (update_grms reveal) []
  val _ = update_grms temp_add_type "path"
  val _ = update_grms temp_add_type "path"
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("fromPath", (Term.prim_mk_const { Name = "fromPath", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("toPath", (Term.prim_mk_const { Name = "toPath", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("first", (Term.prim_mk_const { Name = "first", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("first", (Term.prim_mk_const { Name = "first", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("stopped_at", (Term.prim_mk_const { Name = "stopped_at", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("stopped_at", (Term.prim_mk_const { Name = "stopped_at", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("pcons", (Term.prim_mk_const { Name = "pcons", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("pcons", (Term.prim_mk_const { Name = "pcons", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("finite", (Term.prim_mk_const { Name = "finite", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("finite", (Term.prim_mk_const { Name = "finite", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("last", (Term.prim_mk_const { Name = "last", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("pmap", (Term.prim_mk_const { Name = "pmap", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("pmap", (Term.prim_mk_const { Name = "pmap", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("tail", (Term.prim_mk_const { Name = "tail", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("first_label", (Term.prim_mk_const { Name = "first_label", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("length", (Term.prim_mk_const { Name = "length", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("length", (Term.prim_mk_const { Name = "length", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("el", (Term.prim_mk_const { Name = "el", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("nth_label", (Term.prim_mk_const { Name = "nth_label", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("pconcat", (Term.prim_mk_const { Name = "pconcat", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("pconcat", (Term.prim_mk_const { Name = "pconcat", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("PL", (Term.prim_mk_const { Name = "PL", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("PL", (Term.prim_mk_const { Name = "PL", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("firstP_at", (Term.prim_mk_const { Name = "firstP_at", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("firstP_at", (Term.prim_mk_const { Name = "firstP_at", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("exists", (Term.prim_mk_const { Name = "exists", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("exists", (Term.prim_mk_const { Name = "exists", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("every", (Term.prim_mk_const { Name = "every", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("every", (Term.prim_mk_const { Name = "every", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mem", (Term.prim_mk_const { Name = "mem", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mem", (Term.prim_mk_const { Name = "mem", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("drop", (Term.prim_mk_const { Name = "drop", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("take", (Term.prim_mk_const { Name = "take", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("seg", (Term.prim_mk_const { Name = "seg", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("seg", (Term.prim_mk_const { Name = "seg", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("labels", (Term.prim_mk_const { Name = "labels", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("is_stopped", (Term.prim_mk_const { Name = "is_stopped", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("is_stopped", (Term.prim_mk_const { Name = "is_stopped", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("filter", (Term.prim_mk_const { Name = "filter", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("pgenerate", (Term.prim_mk_const { Name = "pgenerate", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("okpath_f", (Term.prim_mk_const { Name = "okpath_f", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("okpath_f", (Term.prim_mk_const { Name = "okpath_f", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("okpath", (Term.prim_mk_const { Name = "okpath", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("okpath", (Term.prim_mk_const { Name = "okpath", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("plink", (Term.prim_mk_const { Name = "plink", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("SN", (Term.prim_mk_const { Name = "SN", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("SN", (Term.prim_mk_const { Name = "SN", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("unfold", (Term.prim_mk_const { Name = "unfold", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("unfold", (Term.prim_mk_const { Name = "unfold", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("trace_machine", (Term.prim_mk_const { Name = "trace_machine", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("trace_machine", (Term.prim_mk_const { Name = "trace_machine", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("parallel_comp", (Term.prim_mk_const { Name = "parallel_comp", Thy = "path"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("parallel_comp", (Term.prim_mk_const { Name = "parallel_comp", Thy = "path"}))
  val path_grammars = Parse.current_lgrms()
  end
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "path",
    thydataty = "simp",
    data =
        "path.stopped_at_11 path.stopped_at_not_pcons path.okpath_seg path.okpath_drop path.okpath_take path.okpath_plink path.last_plink path.first_plink path.finite_plink path.plink_def path.okpath_thm path.pgenerate_not_stopped path.is_stopped_thm path.labels_def path.last_seg path.first_seg path.finite_seg path.PL_seg path.singleton_seg path.last_take path.PL_take path.length_take path.finite_take path.first_take path.take_def path.nth_label_drop path.el_drop path.tail_drop path.first_label_drop path.first_drop path.IN_PL_drop path.finite_drop path.numeral_drop path.drop_def path.mem_thm path.not_every path.not_exists path.every_thm path.exists_thm path.nth_label_pmap path.el_pmap path.PL_pmap path.PL_0 path.PL_thm path.nth_label_def path.el_def path.length_pmap path.first_label_def path.tail_def path.finite_pmap path.last_pmap path.first_pmap path.pmap_thm path.last_thm path.first_thm path.finite_thm path.pcons_11"
  }
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "path",
    thydataty = "compute",
    data =
        "path.first_def path.is_stopped_def path.parallel_comp_def path.trace_machine_def path.unfold_def path.SN_def path.okpath_def path.okpath_f_def path.length_def path.seg_def path.take_def_compute path.take_def path.drop_def_compute path.drop_def path.mem_def path.every_def path.exists_def path.firstP_at_def path.PL_def path.pconcat_def path.nth_label_def_compute path.nth_label_def path.el_def_compute path.el_def path.pcons_def path.pmap_def path.finite_def path.stopped_at_def"
  }

val _ = if !Globals.print_thy_loads then print "done\n" else ()
val _ = Theory.load_complete "path"
end
