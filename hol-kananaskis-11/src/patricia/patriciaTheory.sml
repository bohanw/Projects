structure patriciaTheory :> patriciaTheory =
struct
  val _ = if !Globals.print_thy_loads then print "Loading patriciaTheory ... " else ()
  open Type Term Thm
  infixr -->

  fun C s t ty = mk_thy_const{Name=s,Thy=t,Ty=ty}
  fun T s t A = mk_thy_type{Tyop=s, Thy=t,Args=A}
  fun V s q = mk_var(s,q)
  val U     = mk_vartype
  (*  Parents *)
  local open sortingTheory wordsTheory
  in end;
  val _ = Theory.link_parents
          ("patricia",
          Arbnum.fromString "1488588386",
          Arbnum.fromString "488720")
          [("sorting",
           Arbnum.fromString "1488586715",
           Arbnum.fromString "45408"),
           ("words",
           Arbnum.fromString "1488587186",
           Arbnum.fromString "513354")];
  val _ = Theory.incorporate_types "patricia" [("ptree", 1)];

  val idvector = 
    let fun ID(thy,oth) = {Thy = thy, Other = oth}
    in Vector.fromList
  [ID("min", "fun"), ID("num", "num"), ID("patricia", "ptree"),
   ID("one", "one"), ID("list", "list"), ID("min", "bool"),
   ID("option", "option"), ID("pair", "prod"), ID("ind_type", "recspace"),
   ID("bool", "!"), ID("arithmetic", "+"), ID("pair", ","),
   ID("arithmetic", "-"), ID("bool", "/\\"), ID("num", "0"),
   ID("prim_rec", "<"), ID("min", "="), ID("min", "==>"), ID("bool", "?"),
   ID("min", "@"), ID("patricia", "ADD"), ID("patricia", "ADD_LIST"),
   ID("patricia", "ADD_tupled"), ID("list", "ALL_DISTINCT"),
   ID("list", "APPEND"), ID("bool", "ARB"), ID("bit", "BIT"),
   ID("arithmetic", "BIT1"), ID("arithmetic", "BIT2"),
   ID("ind_type", "BOTTOM"), ID("patricia", "BRANCH"),
   ID("patricia", "BRANCHING_BIT"), ID("patricia", "BRANCHING_BIT_tupled"),
   ID("patricia", "Branch"), ID("combin", "C"), ID("pred_set", "CARD"),
   ID("bool", "COND"), ID("list", "CONS"), ID("ind_type", "CONSTR"),
   ID("bool", "DATATYPE"), ID("pred_set", "DELETE"),
   ID("patricia", "DEPTH"), ID("arithmetic", "DIV2"), ID("list", "EL"),
   ID("pred_set", "EMPTY"), ID("arithmetic", "EVEN"),
   ID("patricia", "EVERY_LEAF"), ID("patricia", "EXISTS_LEAF"),
   ID("arithmetic", "EXP"), ID("patricia", "Empty"), ID("bool", "F"),
   ID("ind_type", "FCONS"), ID("list", "FILTER"), ID("patricia", "FIND"),
   ID("pred_set", "FINITE"), ID("list", "FOLDL"), ID("combin", "I"),
   ID("bool", "IN"), ID("pred_set", "INSERT"),
   ID("patricia", "INSERT_PTREE"), ID("patricia", "IN_PTREE"),
   ID("patricia", "IS_EMPTY"), ID("patricia", "IS_PTREE"),
   ID("option", "IS_SOME"), ID("patricia", "JOIN"), ID("patricia", "KEYS"),
   ID("list", "LENGTH"), ID("bool", "LET"), ID("list", "LIST_TO_SET"),
   ID("patricia", "Leaf"), ID("arithmetic", "MAX"), ID("bit", "MOD_2EXP"),
   ID("bit", "MOD_2EXP_EQ"), ID("list", "NIL"), ID("option", "NONE"),
   ID("arithmetic", "NUMERAL"), ID("patricia", "NUMSET_OF_PTREE"),
   ID("arithmetic", "ODD"), ID("patricia", "PEEK"),
   ID("patricia", "PEEK_tupled"), ID("sorting", "PERM"),
   ID("patricia", "PTREE_OF_NUMSET"), ID("sorting", "QSORT"),
   ID("patricia", "REMOVE"), ID("list", "SET_TO_LIST"),
   ID("patricia", "SIZE"), ID("option", "SOME"), ID("num", "SUC"),
   ID("bool", "T"), ID("option", "THE"), ID("patricia", "TRANSFORM"),
   ID("patricia", "TRAVERSE"), ID("patricia", "TRAVERSE_AUX"),
   ID("bool", "TYPE_DEFINITION"), ID("pred_set", "UNION"),
   ID("patricia", "UNION_PTREE"), ID("relation", "WF"),
   ID("relation", "WFREC"), ID("arithmetic", "ZERO"), ID("bool", "\\/"),
   ID("option", "option_CASE"), ID("pair", "pair_CASE"),
   ID("patricia", "ptree_CASE"), ID("patricia", "ptree_size"),
   ID("bool", "~")]
  end;
  local open SharingTables
  in
  val tyvector = build_type_vector idvector
  [TYOP [1], TYV "'a", TYOP [2, 1], TYOP [0, 2, 0], TYOP [0, 1, 0],
   TYOP [0, 4, 3], TYV "'b", TYOP [0, 2, 6], TYOP [0, 2, 7],
   TYOP [0, 0, 8], TYOP [0, 0, 9], TYOP [0, 10, 6], TYOP [0, 1, 6],
   TYOP [0, 0, 12], TYOP [0, 13, 11], TYOP [0, 6, 14], TYOP [0, 2, 15],
   TYOP [3], TYOP [2, 17], TYOP [0, 18, 18], TYOP [0, 18, 19], TYOP [4, 0],
   TYOP [0, 21, 21], TYOP [0, 2, 22], TYOP [0, 2, 21], TYOP [2, 6],
   TYOP [0, 25, 2], TYOP [0, 6, 1], TYOP [0, 27, 26], TYOP [0, 0, 2],
   TYOP [0, 2, 29], TYOP [5], TYOP [0, 0, 31], TYOP [0, 32, 18],
   TYOP [0, 18, 33], TYOP [6, 1], TYOP [7, 2, 0], TYOP [0, 36, 35],
   TYOP [0, 0, 35], TYOP [0, 2, 38], TYOP [0, 18, 32], TYOP [0, 1, 2],
   TYOP [0, 0, 41], TYOP [7, 0, 2], TYOP [7, 2, 43], TYOP [7, 0, 44],
   TYOP [0, 45, 2], TYOP [0, 2, 31], TYOP [0, 18, 31], TYOP [0, 0, 48],
   TYOP [0, 0, 19], TYOP [0, 0, 1], TYOP [0, 2, 51], TYOP [0, 1, 31],
   TYOP [0, 0, 53], TYOP [0, 54, 47], TYOP [0, 2, 2], TYOP [0, 2, 56],
   TYOP [0, 0, 57], TYOP [0, 0, 58], TYOP [7, 0, 0], TYOP [0, 60, 0],
   TYOP [0, 0, 0], TYOP [0, 0, 62], TYOP [7, 2, 2], TYOP [7, 0, 64],
   TYOP [7, 0, 65], TYOP [0, 66, 2], TYOP [7, 0, 1], TYOP [7, 2, 68],
   TYOP [0, 69, 2], TYOP [4, 68], TYOP [0, 71, 2], TYOP [0, 2, 72],
   TYOP [0, 68, 2], TYOP [0, 2, 74], TYOP [7, 1, 0], TYOP [7, 0, 76],
   TYOP [8, 77], TYOP [0, 78, 31], TYOP [0, 0, 32], TYOP [0, 66, 31],
   TYOP [0, 2, 32], TYOP [0, 68, 31], TYOP [0, 2, 83], TYOP [0, 6, 31],
   TYOP [0, 0, 85], TYOP [0, 1, 53], TYOP [0, 60, 31], TYOP [0, 60, 88],
   TYOP [0, 66, 81], TYOP [0, 36, 31], TYOP [0, 36, 91], TYOP [0, 69, 31],
   TYOP [0, 69, 93], TYOP [0, 2, 47], TYOP [0, 6, 6], TYOP [0, 6, 96],
   TYOP [0, 2, 97], TYOP [0, 2, 98], TYOP [0, 0, 99], TYOP [0, 0, 100],
   TYOP [4, 1], TYV "'c", TYOP [2, 103], TYOP [0, 59, 31],
   TYOP [0, 42, 105], TYOP [0, 2, 106], TYOP [0, 2, 78], TYOP [0, 53, 31],
   TYOP [0, 85, 31], TYOP [0, 12, 31], TYOP [0, 111, 31],
   TYOP [0, 109, 31], TYOP [0, 87, 31], TYOP [0, 114, 31], TYOP [0, 4, 31],
   TYOP [0, 116, 31], TYOP [0, 27, 31], TYOP [0, 118, 31],
   TYOP [0, 32, 31], TYOP [0, 120, 31], TYOP [0, 13, 31],
   TYOP [0, 122, 31], TYOP [0, 54, 31], TYOP [0, 124, 31],
   TYOP [0, 86, 31], TYOP [0, 126, 31], TYOP [0, 80, 31],
   TYOP [0, 128, 31], TYOP [0, 10, 31], TYOP [0, 130, 31],
   TYOP [0, 101, 31], TYOP [0, 132, 31], TYOP [0, 81, 31],
   TYOP [0, 134, 31], TYOP [0, 47, 31], TYOP [0, 136, 31],
   TYOP [0, 82, 31], TYOP [0, 138, 31], TYOP [0, 84, 31],
   TYOP [0, 140, 31], TYOP [0, 79, 31], TYOP [0, 142, 31],
   TYOP [0, 102, 31], TYOP [0, 144, 31], TYOP [0, 21, 31],
   TYOP [0, 146, 31], TYOP [0, 71, 31], TYOP [0, 148, 31],
   TYOP [0, 17, 31], TYOP [0, 150, 31], TYOP [0, 83, 31], TYOP [0, 25, 31],
   TYOP [0, 153, 31], TYOP [0, 104, 31], TYOP [0, 155, 31],
   TYOP [0, 48, 31], TYOP [0, 0, 76], TYOP [0, 1, 158], TYOP [0, 1, 68],
   TYOP [0, 0, 160], TYOP [7, 0, 6], TYOP [0, 6, 162], TYOP [0, 0, 163],
   TYOP [0, 0, 60], TYOP [0, 0, 165], TYOP [7, 0, 17], TYOP [0, 17, 167],
   TYOP [0, 0, 168], TYOP [0, 76, 77], TYOP [0, 0, 170], TYOP [0, 65, 66],
   TYOP [0, 0, 172], TYOP [7, 25, 25], TYOP [7, 0, 174], TYOP [7, 0, 175],
   TYOP [0, 175, 176], TYOP [0, 0, 177], TYOP [0, 44, 45],
   TYOP [0, 0, 179], TYOP [0, 64, 65], TYOP [0, 0, 181],
   TYOP [0, 174, 175], TYOP [0, 0, 183], TYOP [0, 2, 43], TYOP [0, 0, 185],
   TYOP [0, 0, 36], TYOP [0, 2, 187], TYOP [0, 68, 69], TYOP [0, 2, 189],
   TYOP [0, 43, 44], TYOP [0, 2, 191], TYOP [0, 2, 64], TYOP [0, 2, 193],
   TYOP [0, 25, 174], TYOP [0, 25, 195], TYOP [0, 31, 31],
   TYOP [0, 31, 197], TYOP [0, 6, 85], TYOP [0, 53, 109],
   TYOP [0, 32, 120], TYOP [0, 61, 31], TYOP [0, 61, 202],
   TYOP [0, 67, 31], TYOP [0, 67, 204], TYOP [0, 37, 31],
   TYOP [0, 37, 206], TYOP [0, 70, 31], TYOP [0, 70, 208],
   TYOP [0, 47, 136], TYOP [0, 73, 31], TYOP [0, 73, 211],
   TYOP [0, 102, 144], TYOP [0, 21, 146], TYOP [0, 35, 31],
   TYOP [0, 35, 215], TYOP [6, 6], TYOP [0, 217, 31], TYOP [0, 217, 218],
   TYOP [6, 17], TYOP [0, 220, 31], TYOP [0, 220, 221], TYOP [0, 25, 153],
   TYOP [0, 18, 48], TYOP [0, 78, 79], TYOP [0, 7, 31], TYOP [0, 226, 31],
   TYOP [0, 108, 31], TYOP [0, 228, 31], TYOP [0, 89, 31],
   TYOP [0, 230, 89], TYOP [0, 90, 31], TYOP [0, 232, 90],
   TYOP [0, 92, 31], TYOP [0, 234, 92], TYOP [0, 94, 31],
   TYOP [0, 236, 94], TYOP [0, 95, 31], TYOP [0, 238, 95],
   TYOP [0, 162, 25], TYOP [0, 25, 240], TYOP [0, 167, 18],
   TYOP [0, 18, 242], TYOP [0, 21, 22], TYOP [0, 176, 25],
   TYOP [0, 25, 25], TYOP [0, 25, 246], TYOP [0, 0, 247], TYOP [0, 0, 248],
   TYOP [0, 104, 104], TYOP [0, 104, 250], TYOP [0, 0, 251],
   TYOP [0, 0, 252], TYOP [0, 0, 18], TYOP [0, 18, 254], TYOP [0, 50, 255],
   TYOP [0, 53, 0], TYOP [0, 32, 0], TYOP [0, 31, 63], TYOP [0, 35, 35],
   TYOP [0, 35, 260], TYOP [0, 31, 261], TYOP [0, 220, 220],
   TYOP [0, 220, 263], TYOP [0, 31, 264], TYOP [0, 31, 57],
   TYOP [0, 0, 22], TYOP [0, 0, 78], TYOP [0, 268, 78], TYOP [0, 77, 269],
   TYOP [0, 0, 270], TYOP [0, 53, 87], TYOP [0, 32, 80], TYOP [0, 102, 1],
   TYOP [0, 0, 274], TYOP [0, 86, 153], TYOP [0, 268, 268],
   TYOP [0, 78, 277], TYOP [0, 102, 102], TYOP [0, 53, 279],
   TYOP [0, 32, 22], TYOP [0, 75, 73], TYOP [0, 21, 18], TYOP [0, 18, 283],
   TYOP [0, 255, 284], TYOP [0, 1, 109], TYOP [0, 0, 120],
   TYOP [0, 32, 32], TYOP [0, 0, 288], TYOP [6, 103], TYOP [0, 290, 31],
   TYOP [0, 25, 21], TYOP [0, 102, 0], TYOP [0, 21, 0], TYOP [0, 29, 29],
   TYOP [0, 102, 53], TYOP [0, 21, 32], TYOP [0, 6, 25], TYOP [0, 0, 298],
   TYOP [0, 0, 80], TYOP [0, 0, 217], TYOP [0, 25, 301], TYOP [0, 0, 290],
   TYOP [0, 104, 303], TYOP [0, 0, 220], TYOP [0, 18, 305],
   TYOP [0, 87, 279], TYOP [0, 80, 22], TYOP [0, 0, 25], TYOP [0, 25, 309],
   TYOP [0, 32, 21], TYOP [0, 18, 0], TYOP [0, 1, 35], TYOP [0, 6, 217],
   TYOP [0, 17, 220], TYOP [0, 35, 1], TYOP [0, 2, 25], TYOP [0, 12, 317],
   TYOP [0, 18, 21], TYOP [0, 79, 228], TYOP [0, 53, 53],
   TYOP [0, 53, 321], TYOP [0, 32, 288], TYOP [0, 61, 61],
   TYOP [0, 324, 61], TYOP [0, 89, 325], TYOP [0, 67, 67],
   TYOP [0, 327, 67], TYOP [0, 90, 328], TYOP [0, 37, 37],
   TYOP [0, 330, 37], TYOP [0, 92, 331], TYOP [0, 70, 70],
   TYOP [0, 333, 70], TYOP [0, 94, 334], TYOP [0, 47, 47],
   TYOP [0, 336, 47], TYOP [0, 95, 337], TYOP [0, 1, 217],
   TYOP [0, 339, 217], TYOP [0, 217, 340], TYOP [0, 35, 341],
   TYOP [0, 42, 2], TYOP [0, 68, 343], TYOP [0, 63, 0], TYOP [0, 60, 345],
   TYOP [0, 65, 2], TYOP [0, 0, 347], TYOP [0, 348, 2], TYOP [0, 66, 349],
   TYOP [0, 64, 2], TYOP [0, 0, 351], TYOP [0, 352, 2], TYOP [0, 65, 353],
   TYOP [0, 39, 35], TYOP [0, 36, 355], TYOP [0, 75, 2], TYOP [0, 69, 357],
   TYOP [0, 57, 2], TYOP [0, 64, 359], TYOP [0, 0, 95], TYOP [0, 0, 361],
   TYOP [0, 362, 31], TYOP [0, 54, 363], TYOP [0, 31, 364],
   TYOP [0, 2, 365], TYOP [0, 2, 35], TYOP [0, 2, 367], TYOP [0, 0, 368],
   TYOP [0, 0, 369], TYOP [0, 370, 35], TYOP [0, 0, 313],
   TYOP [0, 372, 371], TYOP [0, 35, 373], TYOP [0, 2, 374],
   TYOP [0, 59, 2], TYOP [0, 42, 376], TYOP [0, 2, 377], TYOP [0, 2, 378]]
  end
  val _ = Theory.incorporate_consts "patricia" tyvector
     [("ptree_size", 5), ("ptree_CASE", 16), ("UNION_PTREE", 20),
      ("TRAVERSE_AUX", 23), ("TRAVERSE", 24), ("TRANSFORM", 28),
      ("SIZE", 3), ("REMOVE", 30), ("PTREE_OF_NUMSET", 34),
      ("PEEK_tupled", 37), ("PEEK", 39), ("NUMSET_OF_PTREE", 40),
      ("Leaf", 42), ("KEYS", 24), ("JOIN", 46), ("IS_PTREE", 47),
      ("IS_EMPTY", 47), ("IN_PTREE", 49), ("INSERT_PTREE", 50),
      ("FIND", 52), ("Empty", 2), ("EXISTS_LEAF", 55), ("EVERY_LEAF", 55),
      ("DEPTH", 3), ("Branch", 59), ("BRANCHING_BIT_tupled", 61),
      ("BRANCHING_BIT", 63), ("BRANCH", 67), ("ADD_tupled", 70),
      ("ADD_LIST", 73), ("ADD", 75)];

  local open SharingTables
  in
  val tmvector = build_term_vector idvector tyvector
  [TMV("'ptree'", 79), TMV("ADD_tupled", 70), TMV("BRANCH", 67),
   TMV("BRANCHING_BIT_tupled", 61), TMV("IS_EMPTY", 47), TMV("M", 2),
   TMV("M'", 2), TMV("P", 53), TMV("P", 54), TMV("P", 80), TMV("P", 81),
   TMV("P", 47), TMV("P", 82), TMV("P", 84), TMV("PEEK_tupled", 37),
   TMV("Q", 54), TMV("Q", 86), TMV("R", 87), TMV("R", 89), TMV("R", 90),
   TMV("R", 92), TMV("R", 94), TMV("R", 95), TMV("a", 1), TMV("a", 21),
   TMV("a", 0), TMV("a", 60), TMV("a", 66), TMV("a", 36), TMV("a", 69),
   TMV("a", 2), TMV("a0", 0), TMV("a0'", 0), TMV("a0'", 78), TMV("a1", 1),
   TMV("a1", 0), TMV("a1'", 1), TMV("a1'", 0), TMV("a2", 2), TMV("a2", 78),
   TMV("a2'", 2), TMV("a3", 2), TMV("a3", 78), TMV("a3'", 2), TMV("b", 6),
   TMV("b", 0), TMV("d", 1), TMV("d", 6), TMV("e", 1), TMV("f", 12),
   TMV("f", 4), TMV("f", 27), TMV("f", 13), TMV("f'", 13), TMV("f0", 6),
   TMV("f1", 13), TMV("f1", 10), TMV("f1'", 10), TMV("f2", 101),
   TMV("fn", 7), TMV("h", 0), TMV("j", 0), TMV("k", 0), TMV("l", 102),
   TMV("l", 71), TMV("l", 2), TMV("l", 25), TMV("l", 104), TMV("l1", 102),
   TMV("l2", 102), TMV("m", 0), TMV("n", 0), TMV("n0", 0), TMV("p", 0),
   TMV("p", 2), TMV("p0", 0), TMV("p0", 2), TMV("p1", 0), TMV("pp", 2),
   TMV("ptree", 107), TMV("r", 2), TMV("r", 25), TMV("r", 104),
   TMV("rep", 108), TMV("s", 32), TMV("s1", 53), TMV("s1", 32),
   TMV("s2", 53), TMV("s2", 32), TMV("t", 2), TMV("t", 18), TMV("t0", 2),
   TMV("t1", 2), TMV("t1", 18), TMV("t2", 2), TMV("t2", 25), TMV("t2", 18),
   TMV("t3", 18), TMV("v", 6), TMV("v", 0), TMV("v", 17), TMV("v", 2),
   TMV("v'", 6), TMV("v1", 1), TMV("v1", 0), TMV("v1", 68), TMV("v1", 65),
   TMV("v10", 2), TMV("v11", 2), TMV("v12", 0), TMV("v13", 1),
   TMV("v14", 0), TMV("v15", 0), TMV("v16", 2), TMV("v17", 2),
   TMV("v18", 0), TMV("v19", 1), TMV("v2", 1), TMV("v2", 0), TMV("v2", 2),
   TMV("v20", 0), TMV("v21", 0), TMV("v22", 2), TMV("v23", 2),
   TMV("v24", 0), TMV("v25", 1), TMV("v26", 0), TMV("v27", 0),
   TMV("v28", 2), TMV("v29", 2), TMV("v3", 0), TMV("v3", 64), TMV("v3", 2),
   TMV("v30", 0), TMV("v31", 1), TMV("v32", 0), TMV("v33", 0),
   TMV("v34", 2), TMV("v35", 2), TMV("v36", 0), TMV("v37", 1),
   TMV("v38", 0), TMV("v39", 0), TMV("v4", 2), TMV("v40", 2),
   TMV("v41", 2), TMV("v42", 0), TMV("v43", 1), TMV("v44", 0),
   TMV("v45", 0), TMV("v46", 2), TMV("v47", 2), TMV("v5", 2), TMV("v6", 0),
   TMV("v7", 1), TMV("v8", 0), TMV("v9", 0), TMV("x", 1), TMV("x", 0),
   TMV("x", 68), TMV("x", 2), TMV("x1", 0), TMV("x1", 68), TMC(9, 109),
   TMC(9, 110), TMC(9, 112), TMC(9, 113), TMC(9, 115), TMC(9, 117),
   TMC(9, 119), TMC(9, 121), TMC(9, 123), TMC(9, 125), TMC(9, 127),
   TMC(9, 129), TMC(9, 131), TMC(9, 133), TMC(9, 135), TMC(9, 137),
   TMC(9, 139), TMC(9, 141), TMC(9, 143), TMC(9, 145), TMC(9, 147),
   TMC(9, 149), TMC(9, 120), TMC(9, 151), TMC(9, 152), TMC(9, 136),
   TMC(9, 154), TMC(9, 156), TMC(9, 157), TMC(9, 142), TMC(10, 63),
   TMC(11, 159), TMC(11, 161), TMC(11, 164), TMC(11, 166), TMC(11, 169),
   TMC(11, 171), TMC(11, 173), TMC(11, 178), TMC(11, 180), TMC(11, 182),
   TMC(11, 184), TMC(11, 186), TMC(11, 188), TMC(11, 190), TMC(11, 192),
   TMC(11, 194), TMC(11, 196), TMC(12, 63), TMC(13, 198), TMC(14, 0),
   TMC(15, 80), TMC(16, 87), TMC(16, 199), TMC(16, 198), TMC(16, 200),
   TMC(16, 201), TMC(16, 203), TMC(16, 205), TMC(16, 207), TMC(16, 209),
   TMC(16, 210), TMC(16, 212), TMC(16, 213), TMC(16, 214), TMC(16, 80),
   TMC(16, 216), TMC(16, 219), TMC(16, 222), TMC(16, 95), TMC(16, 223),
   TMC(16, 224), TMC(16, 225), TMC(17, 198), TMC(18, 109), TMC(18, 227),
   TMC(18, 229), TMC(18, 120), TMC(18, 136), TMC(18, 142), TMC(19, 231),
   TMC(19, 233), TMC(19, 235), TMC(19, 237), TMC(19, 239), TMC(20, 75),
   TMC(20, 241), TMC(20, 243), TMC(21, 73), TMC(22, 70), TMC(23, 144),
   TMC(23, 146), TMC(24, 244), TMC(25, 1), TMC(25, 0), TMC(26, 80),
   TMC(27, 62), TMC(28, 62), TMC(29, 78), TMC(30, 67), TMC(30, 245),
   TMC(31, 63), TMC(32, 61), TMC(33, 59), TMC(33, 249), TMC(33, 253),
   TMC(34, 256), TMC(35, 257), TMC(35, 258), TMC(36, 259), TMC(36, 262),
   TMC(36, 265), TMC(36, 266), TMC(37, 267), TMC(38, 271), TMC(39, 197),
   TMC(40, 272), TMC(40, 273), TMC(41, 3), TMC(42, 62), TMC(43, 275),
   TMC(44, 32), TMC(45, 32), TMC(46, 55), TMC(46, 276), TMC(47, 55),
   TMC(48, 63), TMC(49, 2), TMC(49, 25), TMC(49, 18), TMC(50, 31),
   TMC(51, 278), TMC(52, 280), TMC(52, 281), TMC(53, 52), TMC(54, 120),
   TMC(55, 282), TMC(55, 285), TMC(56, 197), TMC(56, 62), TMC(56, 260),
   TMC(56, 56), TMC(57, 286), TMC(57, 287), TMC(58, 289), TMC(59, 50),
   TMC(60, 49), TMC(61, 47), TMC(62, 47), TMC(62, 153), TMC(62, 155),
   TMC(62, 48), TMC(63, 215), TMC(63, 218), TMC(63, 291), TMC(63, 221),
   TMC(64, 46), TMC(65, 24), TMC(65, 292), TMC(66, 293), TMC(66, 294),
   TMC(67, 295), TMC(68, 296), TMC(68, 297), TMC(69, 42), TMC(69, 299),
   TMC(70, 63), TMC(71, 63), TMC(72, 300), TMC(73, 102), TMC(73, 21),
   TMC(74, 35), TMC(74, 217), TMC(75, 62), TMC(76, 40), TMC(77, 32),
   TMC(78, 39), TMC(78, 302), TMC(78, 304), TMC(78, 306), TMC(79, 37),
   TMC(80, 213), TMC(80, 214), TMC(81, 34), TMC(82, 307), TMC(82, 308),
   TMC(83, 30), TMC(83, 310), TMC(83, 255), TMC(84, 311), TMC(85, 3),
   TMC(85, 312), TMC(86, 313), TMC(86, 314), TMC(86, 315), TMC(87, 62),
   TMC(88, 31), TMC(89, 316), TMC(90, 318), TMC(90, 28), TMC(91, 24),
   TMC(91, 292), TMC(91, 319), TMC(92, 23), TMC(93, 320), TMC(94, 322),
   TMC(94, 323), TMC(95, 20), TMC(96, 230), TMC(96, 232), TMC(96, 234),
   TMC(96, 236), TMC(96, 238), TMC(97, 326), TMC(97, 329), TMC(97, 332),
   TMC(97, 335), TMC(97, 338), TMC(98, 0), TMC(99, 198), TMC(3, 17),
   TMC(100, 342), TMC(101, 344), TMC(101, 346), TMC(101, 350),
   TMC(101, 354), TMC(101, 356), TMC(101, 358), TMC(101, 360),
   TMC(102, 16), TMC(102, 366), TMC(102, 375), TMC(102, 379), TMC(103, 5),
   TMC(104, 197)]
  end
  local
  val DT = Thm.disk_thm val read = Term.read_raw tmvector
  in
  fun op ptree_TY_DEF x = x
    val op ptree_TY_DEF =
    DT(((("patricia",0),
        [("bool",[14,25,26,53,132,133,138])]),["DISK_THM"]),
       [read"%239%83%367%33%181%0%236%192%33%236%382%235$0@%277%213@%199%257@%194%256@%257@@@%71%261|@@@%382%240%31%237%34%235$2@%31%34%277%358%213@@%199$1@%194$0@%257@@@%71%261|@||$1@$0@@|@|@@%240%31%240%35%242%39%242%42%212%235$4@%31%35%39%42%277%358%358%213@@@%199$3@%194%256@$2@@@%294$1@%294$0@%71%261|@@@||||$3@$2@$1@$0@@@%212$5$1@@$5$0@@@|@|@|@|@@@@$1$0@@|@@$0$1@@|@|@$0@|@"])
  fun op ptree_case_def x = x
    val op ptree_case_def =
    DT(((("patricia",8),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("pair",[8,9]),("patricia",[1,2,3,4,5,6,7])]),["DISK_THM"]),
       [read"%212%164%98%171%52%175%56%216%392%290@$2@$1@$0@@$2@|@|@|@@%212%185%31%163%34%164%98%171%52%175%56%216%392%327$4@$3@@$2@$1@$0@@$1$4@$3@@|@|@|@|@|@@%185%31%185%35%188%38%188%41%164%98%171%52%175%56%216%392%266$6@$5@$4@$3@@$2@$1@$0@@$0$6@$5@$4@$3@@|@|@|@|@|@|@|@@@"])
  fun op ptree_size_def x = x
    val op ptree_size_def =
    DT(((("patricia",9),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("pair",[8,9]),("patricia",[1,2,3,4,5,6,7])]),["DISK_THM"]),
       [read"%212%168%50%228%396$0@%290@@%213@|@@%212%168%50%185%31%163%34%228%396$2@%327$1@$0@@@%193%336%259%381@@@%193$1@$2$0@@@@|@|@|@@%168%50%185%31%185%35%188%38%188%41%228%396$4@%266$3@$2@$1@$0@@@%193%336%259%381@@@%193$3@%193$2@%193%396$4@$1@@%396$4@$0@@@@@@|@|@|@|@|@@@"])
  fun op BRANCHING_BIT_tupled_primitive_def x = x
    val op BRANCHING_BIT_tupled_primitive_def =
    DT(((("patricia",17),[]),[]),
       [read"%220%265@%376%243%18%212%371$0@@%185%77%185%75%236%397%382%217%338$0@@%285$1@@@%228$0@$1@@@@$2%197%282$0@@%282$1@@@%197$0@$1@@@|@|@@|@@%3%26%386$0@%75%77%302%272%382%217%338$1@@%285$0@@@%228$1@$0@@@%213@%358$3%197%282$1@@%282$0@@@@@@||@||@@"])
  fun op BRANCHING_BIT_curried_def x = x
    val op BRANCHING_BIT_curried_def =
    DT(((("patricia",18),[]),[]),
       [read"%185%158%185%161%228%264$1@$0@@%265%197$1@$0@@@|@|@"])
  fun op PEEK_tupled_primitive_def x = x
    val op PEEK_tupled_primitive_def =
    DT(((("patricia",21),[]),[]),
       [read"%222%343@%378%245%20%212%373$0@@%185%73%188%80%188%65%185%62%185%70$5%206%275%258$0@$1@@$2@$3@@$1@@%206%266$4@$0@$2@$3@@$1@@|@|@|@|@|@@|@@%14%28%389$0@%101%62%394$1@%303%334@@%61%46%303%273%228$2@$1@@%355$0@@%334@@||@%73%70%65%80%303$7%206%275%258$2@$4@@$1@$0@@$4@@@||||@||@||@@"])
  fun op PEEK_curried_def x = x
    val op PEEK_curried_def =
    DT(((("patricia",22),[]),[]),
       [read"%188%160%185%161%229%339$1@$0@@%343%206$1@$0@@@|@|@"])
  fun op JOIN_def x = x
    val op JOIN_def =
    DT(((("patricia",25),[("pair",[16])]),["DISK_THM"]),
       [read"%185%75%188%91%185%77%188%92%232%319%202$3@%208$2@%205$1@$0@@@@@%324%70%275%258$0@$4@@%266%330$0@$4@@$0@$3@$1@@%266%330$0@$4@@$0@$1@$3@@|@%264$3@$1@@@|@|@|@|@"])
  fun op ADD_tupled_primitive_def x = x
    val op ADD_tupled_primitive_def =
    DT(((("patricia",26),[]),[]),
       [read"%223%252@%379%246%21%212%374$0@@%212%188%65%163%48%188%80%185%73%185%62%185%70%236%212%331$0@$1@$2@@%397%258$0@$1@@@@$6%207$3@%195$1@$4@@@%207%266$2@$0@$5@$3@@%195$1@$4@@@@|@|@|@|@|@|@@%188%80%163%48%188%65%185%73%185%62%185%70%236%212%331$0@$1@$2@@%258$0@$1@@@$6%207$3@%195$1@$4@@@%207%266$2@$0@$3@$5@@%195$1@$4@@@@|@|@|@|@|@|@@@|@@%1%29%390$0@%101%105%385$0@%62%48%395$3@%304%327$1@$0@@@%61%46%304%275%228$1@$3@@%327$3@$2@@%319%202$3@%208%327$3@$2@@%205$1@%327$1@$0@@@@@@@||@%73%70%65%80%304%275%331$2@$5@$3@@%275%258$2@$5@@%266$3@$2@$9%207$1@%195$5@$4@@@@$0@@%266$3@$2@$1@$9%207$0@%195$5@$4@@@@@@%319%202$5@%208%327$5@$4@@%205$3@%266$3@$2@$1@$0@@@@@@@||||@||@||@||@@"])
  fun op ADD_curried_def x = x
    val op ADD_curried_def =
    DT(((("patricia",27),[]),[]),
       [read"%188%160%187%162%232%248$1@$0@@%252%207$1@$0@@@|@|@"])
  fun op BRANCH_primitive_def x = x
    val op BRANCH_primitive_def =
    DT(((("patricia",30),[]),[]),
       [read"%221%262@%377%244%19%372$0@|@@%2%27%387$0@%73%106%388$0@%70%131%391$0@%143%89%395$1@%304$0@@%115%116%395$2@%304%327$1@$0@@@%133%134%304%266$9@$7@%327$3@$2@@%327$1@$0@@@||@%135%136%137%138%304%266$11@$9@%327$5@$4@@%266$3@$2@$1@$0@@@||||@||@%120%121%122%123%395$4@%304%266$3@$2@$1@$0@@@%146%147%304%266$11@$9@%266$5@$4@$3@$2@@%327$1@$0@@@||@%148%149%150%151%304%266$13@$11@%266$7@$6@$5@$4@@%266$3@$2@$1@$0@@@||||@||||@||@||@||@||@@"])
  fun op REMOVE_def x = x
    val op REMOVE_def =
    DT(((("patricia",33),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("pair",[8,9]),("patricia",[1,2,3,4,5,6,7])]),["DISK_THM"]),
       [read"%212%185%62%232%349%290@$0@@%290@|@@%212%185%61%163%46%185%62%232%349%327$2@$1@@$0@@%275%228$2@$0@@%290@%327$2@$1@@@|@|@|@@%185%73%185%70%188%65%188%80%185%62%232%349%266$4@$3@$2@$1@@$0@@%275%331$3@$0@$4@@%275%258$3@$0@@%262%200$4@%203$3@%209%349$2@$0@@$1@@@@@%262%200$4@%203$3@%209$2@%349$1@$0@@@@@@@%266$4@$3@$2@$1@@@|@|@|@|@|@@@"])
  fun op TRAVERSE_AUX_def x = x
    val op TRAVERSE_AUX_def =
    DT(((("patricia",34),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("pair",[8,9]),("patricia",[1,2,3,4,5,6,7])]),["DISK_THM"]),
       [read"%212%183%24%227%366%290@$0@@$0@|@@%212%185%62%163%46%183%24%227%366%327$2@$1@@$0@@%276$2@$0@@|@|@|@@%185%73%185%70%188%65%188%80%183%24%227%366%266$4@$3@$2@$1@@$0@@%366$2@%366$1@$0@@@|@|@|@|@|@@@"])
  fun op TRAVERSE_def x = x
    val op TRAVERSE_def =
    DT(((("patricia",35),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("pair",[8,9]),("patricia",[1,2,3,4,5,6,7])]),["DISK_THM"]),
       [read"%212%227%363%290@@%333@@%212%185%61%163%46%227%363%327$1@$0@@@%276$1@%333@@|@|@@%185%73%185%70%188%65%188%80%227%363%266$3@$2@$1@$0@@@%255%363$1@@%363$0@@@|@|@|@|@@@"])
  fun op KEYS_def x = x
    val op KEYS_def =
    DT(((("patricia",36),[]),[]),
       [read"%188%89%227%320$0@@%348%214@%363$0@@@|@"])
  fun op TRANSFORM_def x = x
    val op TRANSFORM_def =
    DT(((("patricia",37),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("pair",[8,9]),("patricia",[1,2,3,4,5,6,7])]),["DISK_THM"]),
       [read"%212%169%51%232%362$0@%291@@%290@|@@%212%169%51%185%61%164%47%232%362$2@%328$1@$0@@@%327$1@$2$0@@@|@|@|@@%169%51%185%73%185%70%189%66%189%81%232%362$4@%267$3@$2@$1@$0@@@%266$3@$2@%362$4@$1@@%362$4@$0@@@|@|@|@|@|@@@"])
  fun op EVERY_LEAF_def x = x
    val op EVERY_LEAF_def =
    DT(((("patricia",38),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("pair",[8,9]),("patricia",[1,2,3,4,5,6,7])]),["DISK_THM"]),
       [read"%212%172%8%217%286$0@%290@@%359@|@@%212%172%8%185%61%163%46%217%286$2@%327$1@$0@@@$2$1@$0@@|@|@|@@%172%8%185%73%185%70%188%65%188%80%217%286$4@%266$3@$2@$1@$0@@@%212%286$4@$1@@%286$4@$0@@@|@|@|@|@|@@@"])
  fun op EXISTS_LEAF_def x = x
    val op EXISTS_LEAF_def =
    DT(((("patricia",39),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("pair",[8,9]),("patricia",[1,2,3,4,5,6,7])]),["DISK_THM"]),
       [read"%212%172%8%217%288$0@%290@@%293@|@@%212%172%8%185%61%163%46%217%288$2@%327$1@$0@@@$2$1@$0@@|@|@|@@%172%8%185%73%185%70%188%65%188%80%217%288$4@%266$3@$2@$1@$0@@@%382%288$4@$1@@%288$4@$0@@@|@|@|@|@|@@@"])
  fun op SIZE_def x = x
    val op SIZE_def =
    DT(((("patricia",40),[]),[]),
       [read"%188%89%228%353$0@@%323%363$0@@@|@"])
  fun op DEPTH_def x = x
    val op DEPTH_def =
    DT(((("patricia",41),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("pair",[8,9]),("patricia",[1,2,3,4,5,6,7])]),["DISK_THM"]),
       [read"%212%228%281%290@@%213@@%212%185%61%163%46%228%281%327$1@$0@@@%336%259%381@@@|@|@@%185%73%185%70%188%65%188%80%228%281%266$3@$2@$1@$0@@@%193%336%259%381@@@%329%281$1@@%281$0@@@@|@|@|@|@@@"])
  fun op IS_PTREE_def x = x
    val op IS_PTREE_def =
    DT(((("patricia",42),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("pair",[8,9]),("patricia",[1,2,3,4,5,6,7])]),["DISK_THM"]),
       [read"%212%217%311%290@@%359@@%212%185%62%163%46%217%311%327$1@$0@@@%359@|@|@@%185%73%185%70%188%65%188%80%217%311%266$3@$2@$1@$0@@@%212%214$3@%289%336%260%381@@@$2@@@%212%311$1@@%212%311$0@@%212%397%232$1@%290@@@%212%397%232$0@%290@@@%212%286%62%46%212%331$4@$1@$5@@%258$4@$1@@||@$1@@%286%62%46%212%331$4@$1@$5@@%397%258$4@$1@@@||@$0@@@@@@@@|@|@|@|@@@"])
  fun op IN_PTREE_def x = x
    val op IN_PTREE_def =
    DT(((("patricia",43),[]),[]),
       [read"%185%71%191%90%217%309$1@$0@@%318%342$0@$1@@@|@|@"])
  fun op INSERT_PTREE_def x = x
    val op INSERT_PTREE_def =
    DT(((("patricia",44),[]),[]),
       [read"%185%71%191%90%234%308$1@$0@@%250$0@%198$1@%383@@@|@|@"])
  fun op PTREE_OF_NUMSET_def x = x
    val op PTREE_OF_NUMSET_def =
    DT(((("patricia",45),[]),[]),
       [read"%191%90%170%84%234%346$1@$0@@%300%269%308@@$1@%352$0@@@|@|@"])
  fun op NUMSET_OF_PTREE_def x = x
    val op NUMSET_OF_PTREE_def =
    DT(((("patricia",46),[]),[]),
       [read"%191%90%219%337$0@@%326%365$0@@@|@"])
  fun op UNION_PTREE_def x = x
    val op UNION_PTREE_def =
    DT(((("patricia",47),[]),[]),
       [read"%191%93%191%96%234%370$1@$0@@%346$1@%337$0@@@|@|@"])
  fun op IS_EMPTY_primitive_def x = x
    val op IS_EMPTY_primitive_def =
    DT(((("patricia",48),[]),[]),
       [read"%224%310@%380%247%22%375$0@|@@%4%30%393$0@%301%359@@%153%154%301%293@||@%155%156%107%108%301%293@||||@||@@"])
  fun op FIND_def x = x
    val op FIND_def =
    DT(((("patricia",51),[]),[]),
       [read"%188%89%185%62%215%297$1@$0@@%360%339$1@$0@@@|@|@"])
  fun op ADD_LIST_def x = x
    val op ADD_LIST_def =
    DT(((("patricia",52),[]),[]), [read"%225%251@%299%248@@"])
  fun op datatype_ptree x = x
    val op datatype_ptree =
    DT(((("patricia",10),[("bool",[25,171])]),["DISK_THM"]),
       [read"%278%79%290@%327@%266@@"])
  fun op ptree_11 x = x
    val op ptree_11 =
    DT(((("patricia",11),
        [("bool",[14,25,26,31,51,53,56,63,132,133,138,181]),
         ("ind_type",[33,34]),("pair",[8,9]),
         ("patricia",[1,2,3,4,5,6,7])]),["DISK_THM"]),
       [read"%212%185%31%163%34%185%32%163%36%217%232%327$3@$2@@%327$1@$0@@@%212%228$3@$1@@%215$2@$0@@@|@|@|@|@@%185%31%185%35%188%38%188%41%185%32%185%37%188%40%188%43%217%232%266$7@$6@$5@$4@@%266$3@$2@$1@$0@@@%212%228$7@$3@@%212%228$6@$2@@%212%232$5@$1@@%232$4@$0@@@@@|@|@|@|@|@|@|@|@@"])
  fun op ptree_distinct x = x
    val op ptree_distinct =
    DT(((("patricia",12),
        [("bool",[14,25,26,31,36,47,51,53,54,56,63,132,133,138,181]),
         ("ind_type",[33,34]),("pair",[8,9]),
         ("patricia",[1,2,3,4,5,6,7])]),["DISK_THM"]),
       [read"%212%163%34%185%31%397%232%290@%327$0@$1@@@|@|@@%212%188%41%188%38%185%35%185%31%397%232%290@%266$0@$1@$2@$3@@@|@|@|@|@@%188%41%188%38%185%37%163%34%185%32%185%31%397%232%327$0@$2@@%266$1@$3@$4@$5@@@|@|@|@|@|@|@@@"])
  fun op ptree_case_cong x = x
    val op ptree_case_cong =
    DT(((("patricia",13),
        [("bool",[14,25,26,53,132,133,138,181]),
         ("patricia",[1,2,3,4,5,6,7,8])]),["DISK_THM"]),
       [read"%188%5%188%6%164%98%171%52%175%56%236%212%232$4@$3@@%212%236%232$3@%290@@%216$2@%102@@@%212%185%31%163%34%236%232$5@%327$1@$0@@@%216$3$1@$0@@%53$1@$0@@@|@|@@%185%31%185%35%188%38%188%41%236%232$7@%266$3@$2@$1@$0@@@%216$4$3@$2@$1@$0@@%57$3@$2@$1@$0@@@|@|@|@|@@@@@%216%392$4@$2@$1@$0@@%392$3@%102@%53@%57@@@|@|@|@|@|@"])
  fun op ptree_nchotomy x = x
    val op ptree_nchotomy =
    DT(((("patricia",14),
        [("bool",[14,25,26,53,132,133,138,181]),
         ("patricia",[1,2,3,4,5,6,7])]),["DISK_THM"]),
       [read"%188%78%382%232$0@%290@@%382%240%71%237%23%232$2@%327$1@$0@@|@|@@%240%72%240%71%241%74%241%76%232$4@%266$3@$2@$1@$0@@|@|@|@|@@@|@"])
  fun op ptree_Axiom x = x
    val op ptree_Axiom =
    DT(((("patricia",15),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("pair",[8,9]),("patricia",[1,2,3,4,5,6,7])]),["DISK_THM"]),
       [read"%164%54%171%55%176%58%238%59%212%216$0%290@@$3@@%212%185%31%163%34%216$2%327$1@$0@@@$4$1@$0@@|@|@@%185%31%185%35%188%38%188%41%216$4%266$3@$2@$1@$0@@@$5$3@$2@$1@$0@$4$1@@$4$0@@@|@|@|@|@@@|@|@|@|@"])
  fun op ptree_induction x = x
    val op ptree_induction =
    DT(((("patricia",16),
        [("bool",[14,25,26,53,132,133,138]),
         ("patricia",[1,2,3,4,5,6,7])]),["DISK_THM"]),
       [read"%178%11%236%212$0%290@@%212%185%71%163%23$2%327$1@$0@@|@|@@%188%74%188%76%236%212$2$1@@$2$0@@@%185%71%185%72$4%266$0@$1@$3@$2@@|@|@@|@|@@@@%188%74$1$0@|@@|@"])
  fun op BRANCHING_BIT_ind x = x
    val op BRANCHING_BIT_ind =
    DT(((("patricia",19),
        [("arithmetic",
         [18,22,24,25,26,27,46,59,64,71,73,74,75,76,82,93,158,159,168,173,
          177,180,183,210,214,227,228]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,56,58,63,64,96,101,104,105,124,
          129]),("combin",[19]),("numeral",[0,3,5,7,8,9,17,18]),
         ("pair",[5,7,8,9,16,49]),("patricia",[17,18]),
         ("prim_rec",[43,44]),("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%174%9%236%185%75%185%77%236%236%397%382%217%338$1@@%285$0@@@%228$1@$0@@@@$2%282$1@@%282$0@@@@$2$1@$0@@|@|@@%185%99%185%104$2$1@$0@|@|@@|@"])
  fun op BRANCHING_BIT_def x = x
    val op BRANCHING_BIT_def =
    DT(((("patricia",20),
        [("arithmetic",
         [18,22,24,25,26,27,46,59,64,71,73,74,75,76,82,93,158,159,168,173,
          177,180,183,210,214,227,228]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,56,58,63,64,96,101,104,105,124,
          129]),("combin",[19]),("numeral",[0,3,5,7,8,9,17,18]),
         ("pair",[5,7,8,9,16,49]),("patricia",[17,18]),
         ("prim_rec",[43,44]),("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%185%77%185%75%228%264$0@$1@@%272%382%217%338$0@@%285$1@@@%228$0@$1@@@%213@%358%264%282$0@@%282$1@@@@@|@|@"])
  fun op PEEK_ind x = x
    val op PEEK_ind =
    DT(((("patricia",23),
        [("arithmetic",[24,25,26,27,46,59,71,88,93,173]),
         ("bool",[14,25,26,27,30,36,53,54,58,63,64,104,132,133,138,181]),
         ("numeral",[3,8]),("pair",[5,7,8,9,16]),
         ("patricia",[1,2,3,4,5,6,7,9]),("prim_rec",[42]),
         ("relation",[101,113,115]),
         ("sat",[1,3,5,6,7,11,15])]),["DISK_THM"]),
       [read"%179%12%236%212%185%62$1%290@$0@|@@%212%185%61%163%46%185%62$3%327$2@$1@@$0@|@|@|@@%185%73%185%70%188%65%188%80%185%62%236$5%275%258$3@$0@@$2@$1@@$0@@$5%266$4@$3@$2@$1@@$0@@|@|@|@|@|@@@@%188%101%185%104$2$1@$0@|@|@@|@"])
  fun op PEEK_def x = x
    val op PEEK_def =
    DT(((("patricia",24),
        [("arithmetic",[24,25,26,27,46,59,71,88,93,173]),
         ("bool",[15,25,26,27,30,36,54,58,63,64,104]),("combin",[19]),
         ("numeral",[3,8]),("pair",[7,8,9,16,49]),("patricia",[8,9,21,22]),
         ("prim_rec",[42]),("relation",[113,115,121,126])]),["DISK_THM"]),
       [read"%212%185%62%229%339%290@$0@@%334@|@@%212%185%62%185%61%163%46%229%339%327$1@$0@@$2@@%273%228$2@$1@@%355$0@@%334@@|@|@|@@%188%80%185%73%185%70%188%65%185%62%229%339%266$3@$2@$1@$4@@$0@@%339%275%258$2@$0@@$1@$4@@$0@@|@|@|@|@|@@@"])
  fun op ADD_ind x = x
    val op ADD_ind =
    DT(((("patricia",28),
        [("arithmetic",[24,25,26,27,46,59,71,93,173]),
         ("bool",[14,25,26,27,36,53,54,58,63,104,105,124,132,133,138,181]),
         ("numeral",[3,8]),("pair",[5,7,8,16]),
         ("patricia",[1,2,3,4,5,6,7,9]),("prim_rec",[42]),
         ("relation",[101,113,115]),
         ("sat",[1,3,5,6,7,11,15])]),["DISK_THM"]),
       [read"%180%13%236%212%185%62%163%48$2%290@%195$1@$0@@|@|@@%212%185%61%163%46%185%62%163%48$4%327$3@$2@@%195$1@$0@@|@|@|@|@@%185%73%185%70%188%65%188%80%185%62%163%48%236%212%236%212%331$4@$1@$5@@%397%258$4@$1@@@@$6$2@%195$1@$0@@@@%236%212%331$4@$1@$5@@%258$4@$1@@@$6$3@%195$1@$0@@@@@$6%266$5@$4@$3@$2@@%195$1@$0@@@|@|@|@|@|@|@@@@%188%101%185%104%163%117$3$2@%195$1@$0@@|@|@|@@|@"])
  fun op ADD_def x = x
    val op ADD_def =
    DT(((("patricia",29),
        [("arithmetic",[24,25,26,27,46,59,71,93,173]),
         ("bool",[15,25,36,53,54,58,63,104,105,124,129]),("combin",[19]),
         ("numeral",[3,8]),("pair",[7,8,16,49]),("patricia",[8,9,26,27]),
         ("prim_rec",[42]),("relation",[113,115,121,126])]),["DISK_THM"]),
       [read"%212%185%62%163%48%232%248%290@%195$1@$0@@@%327$1@$0@@|@|@@%212%185%62%185%61%163%48%163%46%232%248%327$2@$0@@%195$3@$1@@@%275%228$2@$3@@%327$3@$1@@%319%202$3@%208%327$3@$1@@%205$2@%327$2@$0@@@@@@@|@|@|@|@@%188%80%185%73%185%70%188%65%185%62%163%48%232%248%266$4@$3@$2@$5@@%195$1@$0@@@%275%331$3@$1@$4@@%275%258$3@$1@@%266$4@$3@%248$2@%195$1@$0@@@$5@@%266$4@$3@$2@%248$5@%195$1@$0@@@@@%319%202$1@%208%327$1@$0@@%205$4@%266$4@$3@$2@$5@@@@@@@|@|@|@|@|@|@@@"])
  fun op BRANCH_ind x = x
    val op BRANCH_ind =
    DT(((("patricia",31),
        [("bool",
         [14,25,26,47,48,53,54,58,63,72,76,77,78,80,132,133,138,181]),
         ("pair",[5]),("patricia",[1,2,3,4,5,6,7]),("relation",[101,107]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%177%10%236%212%185%73%185%70%188%89$3%200$2@%203$1@%209%290@$0@@@@|@|@|@@%212%185%73%185%70%185%153%163%154$4%200$3@%203$2@%209%327$1@$0@@%290@@@@|@|@|@|@@%212%185%73%185%70%185%155%185%156%188%107%188%108$6%200$5@%203$4@%209%266$3@$2@$1@$0@@%290@@@@|@|@|@|@|@|@@%212%185%73%185%70%185%109%163%110%185%124%163%125$6%200$5@%203$4@%209%327$3@$2@@%327$1@$0@@@@@|@|@|@|@|@|@@%212%185%73%185%70%185%109%163%110%185%126%185%127%188%128%188%129$8%200$7@%203$6@%209%327$5@$4@@%266$3@$2@$1@$0@@@@@|@|@|@|@|@|@|@|@@%212%185%73%185%70%185%111%185%112%188%113%188%114%185%139%163%140$8%200$7@%203$6@%209%266$5@$4@$3@$2@@%327$1@$0@@@@@|@|@|@|@|@|@|@|@@%185%73%185%70%185%111%185%112%188%113%188%114%185%141%185%142%188%144%188%145$10%200$9@%203$8@%209%266$7@$6@$5@$4@@%266$3@$2@$1@$0@@@@@|@|@|@|@|@|@|@|@|@|@@@@@@@@%185%99%185%104%188%119%188%132$4%200$3@%203$2@%209$1@$0@@@@|@|@|@|@@|@"])
  fun op BRANCH_def x = x
    val op BRANCH_def =
    DT(((("patricia",32),
        [("bool",[15]),("combin",[19]),("pair",[49]),("patricia",[8,30]),
         ("relation",[107,126])]),["DISK_THM"]),
       [read"%212%232%262%200%73@%203%70@%209%290@%89@@@@@%89@@%212%232%262%200%73@%203%70@%209%327%153@%154@@%290@@@@@%327%153@%154@@@%212%232%262%200%73@%203%70@%209%266%155@%156@%107@%108@@%290@@@@@%266%155@%156@%107@%108@@@%212%232%262%200%73@%203%70@%209%327%109@%110@@%327%124@%125@@@@@@%266%73@%70@%327%109@%110@@%327%124@%125@@@@%212%232%262%200%73@%203%70@%209%327%109@%110@@%266%126@%127@%128@%129@@@@@@%266%73@%70@%327%109@%110@@%266%126@%127@%128@%129@@@@%212%232%262%200%73@%203%70@%209%266%111@%112@%113@%114@@%327%139@%140@@@@@@%266%73@%70@%266%111@%112@%113@%114@@%327%139@%140@@@@%232%262%200%73@%203%70@%209%266%111@%112@%113@%114@@%266%141@%142@%144@%145@@@@@@%266%73@%70@%266%111@%112@%113@%114@@%266%141@%142@%144@%145@@@@@@@@@"])
  fun op IS_EMPTY_ind x = x
    val op IS_EMPTY_ind =
    DT(((("patricia",49),
        [("bool",[14,25,26,27,53,54,63,132,133,138,181]),
         ("patricia",[1,2,3,4,5,6,7]),("relation",[101,107]),
         ("sat",[1,3,5,6,7,11,15])]),["DISK_THM"]),
       [read"%178%11%236%212$0%290@@%212%185%99%163%103$2%327$1@$0@@|@|@@%185%118%185%130%188%143%188%152$4%266$3@$2@$1@$0@@|@|@|@|@@@@%188%101$1$0@|@@|@"])
  fun op IS_EMPTY_def x = x
    val op IS_EMPTY_def =
    DT(((("patricia",50),
        [("bool",[15]),("combin",[19]),("patricia",[8,48]),
         ("relation",[107,126])]),["DISK_THM"]),
       [read"%212%217%310%290@@%359@@%212%217%310%327%99@%103@@@%293@@%217%310%266%118@%130@%143@%152@@@%293@@@"])
  fun op BRANCHING_BIT x = x
    val op BRANCHING_BIT =
    DT(((("patricia",53),
        [("arithmetic",
         [18,22,24,25,26,27,46,59,64,71,73,74,75,76,82,91,93,158,159,168,
          172,173,177,180,183,209,210,214,227,228,237,350]),
         ("bit",[53,54,88,107]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,55,56,58,63,64,96,101,104,105,
          108,109,124,129,169]),("combin",[19]),("num",[9]),
         ("numeral",[0,3,5,7,8,9,17,18]),("pair",[5,7,8,9,16,49]),
         ("patricia",[17,18]),("prim_rec",[1,43,44]),
         ("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%185%25%185%45%236%397%228$1@$0@@@%397%217%258%264$1@$0@@$1@@%258%264$1@$0@@$0@@@@|@|@"])
  fun op BRANCHING_BIT_ZERO x = x
    val op BRANCHING_BIT_ZERO =
    DT(((("patricia",54),
        [("arithmetic",
         [18,22,24,25,26,27,46,59,64,71,73,74,75,76,82,93,158,159,168,173,
          177,180,183,210,214,227,228]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,56,58,63,64,96,101,104,105,124,
          129,169]),("combin",[19]),("num",[7]),
         ("numeral",[0,3,5,7,8,9,17,18]),("pair",[5,7,8,9,16,49]),
         ("patricia",[17,18]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%185%25%185%45%217%228%264$1@$0@@%213@@%382%217%338$1@@%285$0@@@%228$1@$0@@@|@|@"])
  fun op BRANCHING_BIT_SYM x = x
    val op BRANCHING_BIT_SYM =
    DT(((("patricia",55),
        [("arithmetic",
         [18,22,24,25,26,27,46,59,64,71,73,74,75,76,82,93,158,159,168,173,
          177,180,183,210,214,227,228]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,55,56,58,63,64,96,99,100,101,
          104,105,124,129,147,169]),("combin",[19]),("num",[7,9]),
         ("numeral",[0,3,5,7,8,9,17,18]),("pair",[5,7,8,9,16,49]),
         ("patricia",[17,18,54]),("prim_rec",[1,43,44]),
         ("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%185%25%185%45%228%264$1@$0@@%264$0@$1@@|@|@"])
  fun op EVERY_LEAF_ADD x = x
    val op EVERY_LEAF_ADD =
    DT(((("patricia",56),
        [("arithmetic",[24,25,26,27,46,59,71,93,173]),
         ("bool",
         [14,15,25,26,27,30,32,36,51,53,54,56,58,63,64,104,105,124,129,132,
          133,138]),("combin",[19]),("numeral",[3,8]),("pair",[7,8,16,49]),
         ("patricia",[1,2,3,4,5,6,7,8,9,25,26,27,38]),("prim_rec",[42]),
         ("relation",[113,115,121,126])]),["DISK_THM"]),
       [read"%172%8%188%89%185%62%163%46%236%212$3$1@$0@@%286$3@$2@@@%286$3@%248$2@%195$1@$0@@@@|@|@|@|@"])
  fun op MONO_EVERY_LEAF x = x
    val op MONO_EVERY_LEAF =
    DT(((("patricia",57),
        [("bool",
         [2,14,15,25,26,51,53,54,58,63,99,100,105,124,132,133,138]),
         ("patricia",[1,2,3,4,5,6,7,38]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%172%8%172%15%188%89%236%212%185%62%163%46%236$4$1@$0@@$3$1@$0@@|@|@@%286$2@$0@@@%286$1@$0@@|@|@|@"])
  fun op NOT_ADD_EMPTY x = x
    val op NOT_ADD_EMPTY =
    DT(((("patricia",58),
        [("arithmetic",[24,25,26,27,46,59,71,93,173]),
         ("bool",
         [14,15,25,26,27,30,31,36,47,51,53,54,56,58,63,64,104,105,124,129,
          132,133,138,181]),("combin",[8,11,15,16,17,19,33,34,35]),
         ("ind_type",[33,34]),("marker",[6]),("numeral",[3,8]),
         ("pair",[7,8,9,16,49]),("patricia",[1,2,3,4,5,6,7,8,9,25,26,27]),
         ("prim_rec",[42]),("relation",[113,115,121,126])]),["DISK_THM"]),
       [read"%188%89%185%62%163%46%397%232%248$2@%195$1@$0@@@%290@@|@|@|@"])
  fun op EMPTY_IS_PTREE x = x
    val op EMPTY_IS_PTREE =
    DT(((("patricia",59),[("bool",[25]),("patricia",[42])]),["DISK_THM"]),
       [read"%311%290@"])
  fun op ADD_IS_PTREE x = x
    val op ADD_IS_PTREE =
    DT(((("patricia",60),
        [("arithmetic",
         [18,22,24,25,26,27,28,37,38,41,46,58,59,64,71,73,74,75,76,82,93,
          158,159,168,172,173,176,177,180,183,210,212,214,217,227,228,
          237]),("bit",[0,15,24,27,43,86,88,107]),
         ("bool",
         [14,15,25,26,27,30,31,32,36,43,47,48,51,52,53,54,55,56,58,63,64,
          71,83,92,96,100,101,104,105,124,129,132,133,138,169,181]),
         ("combin",[19]),("ind_type",[33,34]),("num",[9]),
         ("numeral",[0,3,5,7,8,9,17,18,33]),("pair",[5,7,8,9,16,49]),
         ("patricia",[1,2,3,4,5,6,7,8,9,17,18,25,26,27,38,42,53,56,57,58]),
         ("prim_rec",[6,7,42,43,44]),("relation",[101,113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%188%89%187%159%236%311$1@@%311%248$1@$0@@@|@|@"])
  fun op EVERY_LEAF_BRANCH x = x
    val op EVERY_LEAF_BRANCH =
    DT(((("patricia",61),
        [("bool",[14,15,25,26,51,53,56,63,132,133,138,181]),
         ("combin",[19]),("pair",[49]),
         ("patricia",[1,2,3,4,5,6,7,8,30,38]),
         ("relation",[107,126])]),["DISK_THM"]),
       [read"%172%8%185%73%185%70%188%65%188%80%217%286$4@%262%200$3@%203$2@%209$1@$0@@@@@@%212%286$4@$1@@%286$4@$0@@@|@|@|@|@|@"])
  fun op EVERY_LEAF_REMOVE x = x
    val op EVERY_LEAF_REMOVE =
    DT(((("patricia",62),
        [("bool",[14,25,26,27,30,51,53,58,63,64,105,124,132,133,138]),
         ("patricia",[1,2,3,4,5,6,7,33,38,61])]),["DISK_THM"]),
       [read"%172%8%188%89%185%62%236%286$2@$1@@%286$2@%349$1@$0@@@|@|@|@"])
  fun op IS_PTREE_BRANCH x = x
    val op IS_PTREE_BRANCH =
    DT(((("patricia",63),
        [("bool",
         [14,15,25,26,27,31,36,47,51,52,53,54,56,58,63,96,105,124,132,133,
          138,181]),("combin",[19]),("ind_type",[33,34]),("pair",[8,9,49]),
         ("patricia",[1,2,3,4,5,6,7,8,30,38,42]),
         ("relation",[107,126])]),["DISK_THM"]),
       [read"%185%73%185%70%188%65%188%80%236%212%214$3@%289%336%260%381@@@$2@@@%212%397%212%232$1@%290@@%232$0@%290@@@@%212%286%62%46%212%331$4@$1@$5@@%258$4@$1@@||@$1@@%212%286%62%46%212%331$4@$1@$5@@%397%258$4@$1@@@||@$0@@%212%311$1@@%311$0@@@@@@@%311%262%200$3@%203$2@%209$1@$0@@@@@@|@|@|@|@"])
  fun op REMOVE_IS_PTREE x = x
    val op REMOVE_IS_PTREE =
    DT(((("patricia",64),
        [("bool",
         [14,25,26,27,30,36,51,53,54,56,58,63,64,99,100,105,124,132,133,
          138]),("combin",[0,1,3,5,19,20]),
         ("patricia",[1,2,3,4,5,6,7,33,42,62,63]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%188%89%185%62%236%311$1@@%311%349$1@$0@@@|@|@"])
  fun op PEEK_NONE x = x
    val op PEEK_NONE =
    DT(((("patricia",65),
        [("arithmetic",[24,25,26,27,46,59,71,88,93,173]),
         ("bool",
         [2,14,15,25,26,27,30,36,51,53,54,56,58,63,64,104,105,124,132,133,
          138]),("combin",[19]),("numeral",[3,8]),("option",[27]),
         ("pair",[7,8,9,16,49]),("patricia",[1,2,3,4,5,6,7,8,9,21,22,38]),
         ("prim_rec",[42]),("relation",[113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%172%8%188%89%185%62%236%212%163%46%397$3$1@$0@@|@@%286$2@$1@@@%229%339$1@$0@@%334@@|@|@|@"])
  fun op PEEK_ADD x = x
    val op PEEK_ADD =
    DT(((("patricia",66),
        [("arithmetic",
         [18,22,24,25,26,27,28,37,41,46,59,64,71,73,74,75,76,82,88,93,158,
          159,168,173,176,177,180,183,210,212,214,227,228]),
         ("bit",[0,15,43,86,88,107]),
         ("bool",
         [14,15,25,26,27,30,32,36,48,51,52,53,54,55,56,58,63,64,71,83,92,
          96,99,100,101,104,105,124,129,132,133,138,147,169]),
         ("combin",[0,1,3,5,19,20]),("num",[9]),
         ("numeral",[0,3,5,7,8,9,17,18,33]),("option",[10,11]),
         ("pair",[5,7,8,9,16,49]),
         ("patricia",[1,2,3,4,5,6,7,8,9,17,18,21,22,25,26,27,42,53,65]),
         ("prim_rec",[6,7,42,43,44]),("relation",[101,113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%188%89%185%62%163%46%185%61%236%311$3@@%229%339%248$3@%195$2@$1@@@$0@@%273%228$2@$0@@%355$1@@%339$3@$0@@@@|@|@|@|@"])
  fun op BRANCH x = x
    val op BRANCH =
    DT(((("patricia",67),
        [("bool",
         [14,15,25,26,27,31,36,47,51,53,54,56,58,63,105,129,132,133,138,
          147,181]),("combin",[19]),("ind_type",[33,34]),("pair",[8,9,49]),
         ("patricia",[1,2,3,4,5,6,7,8,30]),
         ("relation",[107,126])]),["DISK_THM"]),
       [read"%185%73%185%70%188%65%188%80%232%262%200$3@%203$2@%209$1@$0@@@@@%275%232$1@%290@@$0@%275%232$0@%290@@$1@%266$3@$2@$1@$0@@@@|@|@|@|@"])
  fun op PEEK_REMOVE x = x
    val op PEEK_REMOVE =
    DT(((("patricia",68),
        [("arithmetic",[24,25,26,27,46,59,71,88,93,173]),
         ("bool",
         [14,15,25,26,27,30,36,53,54,55,56,58,63,64,65,73,74,75,99,100,104,
          105,108,109,124,129,132,133,138,147]),("combin",[0,1,3,5,19,20]),
         ("numeral",[3,8]),("option",[10,11,27]),("pair",[7,8,9,16,49]),
         ("patricia",[1,2,3,4,5,6,7,8,9,21,22,33,42,65,67]),
         ("prim_rec",[42]),("relation",[113,115,121,126]),
         ("sat",
         [1,3,5,6,7,11,12,13,14,15,16,17,18,19,20,23])]),["DISK_THM"]),
       [read"%188%89%185%62%185%61%236%311$2@@%229%339%349$2@$1@@$0@@%273%228$1@$0@@%334@%339$2@$0@@@@|@|@|@"])
  fun op EVERY_LEAF_TRANSFORM x = x
    val op EVERY_LEAF_TRANSFORM =
    DT(((("patricia",69),
        [("bool",
         [2,14,15,25,26,51,53,54,58,63,99,100,105,124,132,133,138]),
         ("patricia",[1,2,3,4,5,6,7,37,38]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%172%8%173%16%165%49%188%89%236%212%185%62%163%46%236$5$1@$0@@$4$1@$3$0@@@|@|@@%286$3@$0@@@%287$2@%361$1@$0@@@|@|@|@|@"])
  fun op TRANSFORM_EMPTY x = x
    val op TRANSFORM_EMPTY =
    DT(((("patricia",70),
        [("bool",[14,25,26,27,31,36,47,51,53,54,56,58,63,132,133,138,181]),
         ("ind_type",[33,34]),("pair",[8,9]),
         ("patricia",[1,2,3,4,5,6,7,37])]),["DISK_THM"]),
       [read"%165%49%188%89%217%233%361$1@$0@@%291@@%232$0@%290@@|@|@"])
  fun op TRANSFORM_IS_PTREE x = x
    val op TRANSFORM_IS_PTREE =
    DT(((("patricia",71),
        [("bool",[14,25,26,27,36,51,53,54,56,58,63,105,124,132,133,138]),
         ("combin",[0,1,3,5,19,20]),
         ("patricia",[1,2,3,4,5,6,7,37,42,69,70]),
         ("sat",[1,3,5,6,7,11,13,14,15,17,18])]),["DISK_THM"]),
       [read"%165%49%188%89%236%311$0@@%312%361$1@$0@@@|@|@"])
  fun op PEEK_TRANSFORM x = x
    val op PEEK_TRANSFORM =
    DT(((("patricia",72),
        [("arithmetic",[24,25,26,27,46,59,71,88,93,173]),
         ("bool",
         [14,15,25,26,27,30,36,53,54,56,58,63,64,104,132,133,138,147]),
         ("combin",[19]),("numeral",[3,8]),("option",[7,10]),
         ("pair",[7,8,9,16,49]),("patricia",[1,2,3,4,5,6,7,8,9,21,22,37]),
         ("prim_rec",[42]),("relation",[113,115,121,126])]),["DISK_THM"]),
       [read"%165%49%188%89%185%62%230%340%361$2@$1@@$0@@%384%339$1@$0@@%335@%157%356$3$0@@|@@|@|@|@"])
  fun op ADD_TRANSFORM x = x
    val op ADD_TRANSFORM =
    DT(((("patricia",73),
        [("arithmetic",[24,25,26,27,46,59,71,93,173]),
         ("bool",
         [14,15,25,26,27,30,31,36,51,53,54,56,58,63,64,93,95,101,104,105,
          124,129,132,133,138,145,147,181]),
         ("combin",[8,11,15,16,17,19,33,34,35]),("ind_type",[33,34]),
         ("marker",[6,9]),("numeral",[3,8]),("pair",[7,8,9,16,49]),
         ("patricia",[1,2,3,4,5,6,7,8,9,25,26,27,37]),("prim_rec",[42]),
         ("relation",[113,115,121,126])]),["DISK_THM"]),
       [read"%165%49%188%89%185%62%163%46%233%361$3@%248$2@%195$1@$0@@@@%249%361$3@$2@@%196$1@$3$0@@@@|@|@|@|@"])
  fun op TRANSFORM_BRANCH x = x
    val op TRANSFORM_BRANCH =
    DT(((("patricia",74),
        [("bool",[14,15,25,26,31,51,53,56,63,132,133,138,181]),
         ("combin",[19]),("ind_type",[33,34]),("pair",[8,9,49]),
         ("patricia",[1,2,3,4,5,6,7,8,30,37]),
         ("relation",[107,126])]),["DISK_THM"]),
       [read"%165%49%185%73%185%70%188%65%188%80%233%361$4@%262%200$3@%203$2@%209$1@$0@@@@@@%263%201$3@%204$2@%210%361$4@$1@@%361$4@$0@@@@@@|@|@|@|@|@"])
  fun op REMOVE_TRANSFORM x = x
    val op REMOVE_TRANSFORM =
    DT(((("patricia",75),
        [("bool",[14,25,26,27,30,31,51,53,56,63,64,132,133,138,147,181]),
         ("ind_type",[33,34]),("pair",[8,9]),
         ("patricia",[1,2,3,4,5,6,7,33,37,74])]),["DISK_THM"]),
       [read"%165%49%188%89%185%62%233%361$2@%349$1@$0@@@%350%361$2@$1@@$0@@|@|@|@"])
  fun op REMOVE_ADD_EQ x = x
    val op REMOVE_ADD_EQ =
    DT(((("patricia",76),
        [("arithmetic",[24,25,26,27,46,59,71,93,173,217,237]),
         ("bit",[0,15,24]),
         ("bool",
         [14,15,25,26,27,30,31,32,36,51,53,54,55,56,58,63,64,104,105,124,
          129,132,133,138,147,181]),("combin",[19]),("ind_type",[33,34]),
         ("numeral",[3,8]),("pair",[7,8,9,16,49]),
         ("patricia",[1,2,3,4,5,6,7,8,9,25,26,27,30,33]),("prim_rec",[42]),
         ("relation",[107,113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15,17,18])]),["DISK_THM"]),
       [read"%188%89%185%62%163%46%232%349%248$2@%195$1@$0@@@$1@@%349$2@$1@@|@|@|@"])
  fun op ADD_ADD x = x
    val op ADD_ADD =
    DT(((("patricia",77),
        [("arithmetic",[24,25,26,27,46,59,71,93,173,217,237]),
         ("bit",[0,15,24]),
         ("bool",
         [14,15,25,26,27,30,31,32,36,51,53,54,55,56,58,63,64,104,105,124,
          129,132,133,138,147,181]),("combin",[19]),("ind_type",[33,34]),
         ("numeral",[3,8]),("pair",[7,8,9,16,49]),
         ("patricia",[1,2,3,4,5,6,7,8,9,25,26,27]),("prim_rec",[42]),
         ("relation",[113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15,17,18])]),["DISK_THM"]),
       [read"%188%89%185%62%163%46%163%48%232%248%248$3@%195$2@$1@@@%195$2@$0@@@%248$3@%195$2@$0@@@|@|@|@|@"])
  fun op EVERY_LEAF_PEEK x = x
    val op EVERY_LEAF_PEEK =
    DT(((("patricia",78),
        [("arithmetic",[24,25,26,27,46,59,71,88,93,173]),
         ("bool",
         [14,15,25,26,27,30,36,51,53,54,58,63,64,104,105,124,132,133,138]),
         ("combin",[19]),("numeral",[3,8]),("option",[14,16]),
         ("pair",[7,8,9,16,49]),("patricia",[1,2,3,4,5,6,7,8,9,21,22,38]),
         ("prim_rec",[42]),("relation",[113,115,121,126])]),["DISK_THM"]),
       [read"%172%8%188%89%185%62%236%212%286$2@$1@@%315%339$1@$0@@@@$2$0@%360%339$1@$0@@@@|@|@|@"])
  fun op IS_PTREE_PEEK x = x
    val op IS_PTREE_PEEK =
    DT(((("patricia",79),
        [("arithmetic",[24,25,26,27,28,41,46,59,71,88,93,173,176,180,212]),
         ("bit",[0,15,43,86]),
         ("bool",
         [2,14,15,25,26,27,30,31,36,47,51,53,54,56,58,63,64,83,96,99,100,
          101,104,105,108,109,124,129,132,133,138,147,181]),
         ("combin",[0,1,3,5,19,20]),("ind_type",[33,34]),
         ("numeral",[3,8,33]),("option",[14,22]),("pair",[7,8,9,16,49]),
         ("patricia",[1,2,3,4,5,6,7,8,9,21,22,38,42,65,78]),
         ("prim_rec",[6,42]),("relation",[113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,16,17,18])]),["DISK_THM"]),
       [read"%212%185%62%397%315%339%290@$0@@@|@@%212%185%62%185%61%164%44%217%316%340%328$1@$0@@$2@@@%228$1@$2@@|@|@|@@%185%73%185%70%190%67%190%82%236%313%268$3@$2@$1@$0@@@%212%240%62%212%258$3@$0@@%317%341$2@$0@@@|@@%212%240%62%212%397%258$3@$0@@@%317%341$1@$0@@@|@@%185%62%185%71%236%382%397%331$4@$1@$5@@@%212%214$0@$4@@%397%217%258$0@$5@@%258$0@$1@@@@@@%212%397%317%341$3@$1@@@@%397%317%341$2@$1@@@@@|@|@@@@|@|@|@|@@@"])
  fun op PTREE_EQ x = x
    val op PTREE_EQ =
    DT(((("patricia",80),
        [("arithmetic",[24,25,26,27,46,59,71,88,93,173,177,180,217]),
         ("bit",[0,15]),
         ("bool",
         [2,14,15,25,26,27,30,31,36,43,47,48,51,52,53,54,55,56,58,63,64,71,
          73,74,75,77,78,81,83,84,93,94,96,99,100,101,104,105,108,109,111,
          124,125,129,132,133,138,140,146,181]),("combin",[0,1,3,5,19,20]),
         ("ind_type",[33,34]),("numeral",[3,8]),
         ("option",[6,10,11,14,16,22]),("pair",[7,8,9,16,49]),
         ("patricia",[1,2,3,4,5,6,7,8,9,21,22,42,59,65,79]),
         ("prim_rec",[4,42]),("relation",[113,115,121,126]),
         ("sat",
         [1,3,5,6,7,11,12,13,14,15,16,17,18,19,20,23])]),["DISK_THM"]),
       [read"%188%92%188%94%236%212%311$1@@%311$0@@@%217%185%62%229%339$2@$0@@%339$1@$0@@|@@%232$1@$0@@@|@|@"])
  fun op REMOVE_REMOVE x = x
    val op REMOVE_REMOVE =
    DT(((("patricia",81),
        [("bool",[25,26,27,36,51,53,56,58,63,105,124,129,147]),
         ("patricia",[64,68,80])]),["DISK_THM"]),
       [read"%188%89%185%62%236%311$1@@%232%349%349$1@$0@@$0@@%349$1@$0@@@|@|@"])
  fun op REMOVE_ADD x = x
    val op REMOVE_ADD =
    DT(((("patricia",82),
        [("bool",[25,26,27,30,36,51,53,54,56,58,63,64,105,124,129,147]),
         ("option",[10,11,28]),
         ("patricia",[60,64,66,68,80])]),["DISK_THM"]),
       [read"%188%89%185%62%163%46%185%61%236%311$3@@%232%349%248$3@%195$2@$1@@@$0@@%275%228$2@$0@@%349$3@$0@@%248%349$3@$0@@%195$2@$1@@@@@|@|@|@|@"])
  fun op ADD_ADD_SYM x = x
    val op ADD_ADD_SYM =
    DT(((("patricia",83),
        [("bool",[25,26,27,30,51,54,56,58,63,64,105,124,129,147]),
         ("option",[10]),("patricia",[60,66,80])]),["DISK_THM"]),
       [read"%188%89%185%62%185%61%163%46%163%48%236%212%311$4@@%397%228$3@$2@@@@%232%248%248$4@%195$3@$1@@@%195$2@$0@@@%248%248$4@%195$2@$0@@@%195$3@$1@@@@|@|@|@|@|@"])
  fun op FILTER_ALL x = x
    val op FILTER_ALL =
    DT(((("patricia",84),
        [("arithmetic",[28,37]),
         ("bool",[14,25,26,27,30,36,53,54,56,58,63,64,71,75,92,105,124]),
         ("list",[17,18,22,27,32,43,49,128]),("prim_rec",[6,7]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%166%7%182%63%217%185%71%236%214$0@%322$1@@@%397$2%283$0@$1@@@@|@@%226%295$1@$0@@%332@@|@|@"])
  fun op TRAVERSE_TRANSFORM x = x
    val op TRAVERSE_TRANSFORM =
    DT(((("patricia",85),
        [("bool",[14,25,26,51,53,56,63,132,133,138]),("list",[48,104]),
         ("patricia",[1,2,3,4,5,6,7,35,37])]),["DISK_THM"]),
       [read"%165%49%188%89%227%364%361$1@$0@@@%363$0@@|@|@"])
  fun op MEM_TRAVERSE_PEEK x = x
    val op MEM_TRAVERSE_PEEK =
    DT(((("patricia",86),
        [("arithmetic",[24,25,26,27,46,59,71,88,93,173]),
         ("bool",
         [14,15,25,26,27,30,36,52,53,54,55,56,58,63,64,99,100,104,105,124,
          132,133,138]),("combin",[0,1,3,5,19,20]),("list",[25,230]),
         ("numeral",[3,8]),("option",[14,22]),("pair",[7,8,9,16,49]),
         ("patricia",[1,2,3,4,5,6,7,8,9,21,22,35,42,65]),
         ("pred_set",[10,33,80]),("prim_rec",[42]),
         ("relation",[113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%188%89%185%62%236%311$1@@%217%306$0@%326%363$1@@@@%315%339$1@$0@@@@|@|@"])
  fun op IN_NUMSET_OF_PTREE x = x
    val op IN_NUMSET_OF_PTREE =
    DT(((("patricia",87),
        [("bool",[25,53,56,58,63,105,124]),
         ("patricia",[43,46,86])]),["DISK_THM"]),
       [read"%191%90%185%71%236%314$1@@%217%306$0@%337$1@@@%309$0@$1@@@|@|@"])
  fun op ADD_LIST_IS_PTREE x = x
    val op ADD_LIST_IS_PTREE =
    DT(((("patricia",88),
        [("bool",[14,25,36,51,53,58,63,105,124]),("list",[29,43]),
         ("patricia",[52,60])]),["DISK_THM"]),
       [read"%188%89%184%64%236%311$1@@%311%251$1@$0@@@|@|@"])
  fun op ADD_LIST_TO_EMPTY_IS_PTREE x = x
    val op ADD_LIST_TO_EMPTY_IS_PTREE =
    DT(((("patricia",89),
        [("bool",[25,53,54,63]),("patricia",[59,88]),
         ("sat",[1,3,5,6,7,11,13,14,15,17,18])]),["DISK_THM"]),
       [read"%184%64%311%251%290@$0@@|@"])
  fun op PTREE_OF_NUMSET_IS_PTREE x = x
    val op PTREE_OF_NUMSET_IS_PTREE =
    DT(((("patricia",90),
        [("bool",[14,25,36,51,53,58,63,105,124]),("combin",[16]),
         ("list",[29,43]),("patricia",[44,45,60])]),["DISK_THM"]),
       [read"%191%90%170%84%236%314$1@@%314%346$1@$0@@@|@|@"])
  fun op PTREE_OF_NUMSET_IS_PTREE_EMPTY x = x
    val op PTREE_OF_NUMSET_IS_PTREE_EMPTY =
    DT(((("patricia",91),
        [("bool",[53,58,63,105,124]),("patricia",[59,90])]),["DISK_THM"]),
       [read"%170%84%314%346%292@$0@@|@"])
  fun op NOT_KEY_LEFT_AND_RIGHT x = x
    val op NOT_KEY_LEFT_AND_RIGHT =
    DT(((("patricia",92),
        [("bool",[14,25,26,36,53,54,56,58,63,100,105,124]),
         ("combin",[0,1,3,5,19,20]),("patricia",[42,78]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%185%73%185%70%188%65%188%80%185%62%185%61%236%212%311%266$5@$4@$3@$2@@@%212%315%339$3@$1@@@%315%339$2@$0@@@@@%397%228$1@$0@@@|@|@|@|@|@|@"])
  fun op ALL_DISTINCT_TRAVERSE x = x
    val op ALL_DISTINCT_TRAVERSE =
    DT(((("patricia",93),
        [("bool",[14,25,26,51,53,54,55,58,63,100,105,124,132,133,138]),
         ("list",[120,215,221]),
         ("patricia",[1,2,3,4,5,6,7,35,42,59,86,92]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%188%89%236%311$0@@%254%363$0@@@|@"])
  fun op MEM_ALL_DISTINCT_IMP_PERM x = x
    val op MEM_ALL_DISTINCT_IMP_PERM =
    DT(((("patricia",94),
        [("bool",[2,15,25,26,30,53,54,55,58,63,74,83,84,99,100,105,124]),
         ("list",[110,170,216]),("patricia",[84]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[0])]),["DISK_THM"]),
       [read"%182%68%182%69%236%212%253$1@@%212%253$0@@%163%157%217%305$0@%325$2@@@%305$0@%325$1@@@|@@@@%344$1@$0@@|@|@"])
  fun op MEM_TRAVERSE x = x
    val op MEM_TRAVERSE =
    DT(((("patricia",95),
        [("bool",[25,53,56,58,63,105,124]),
         ("patricia",[43,86,87])]),["DISK_THM"]),
       [read"%191%90%185%62%236%314$1@@%217%306$0@%326%365$1@@@@%306$0@%337$1@@@@|@|@"])
  fun op INSERT_PTREE_IS_PTREE x = x
    val op INSERT_PTREE_IS_PTREE =
    DT(((("patricia",96),
        [("bool",[25,53,58,63,105,124]),
         ("patricia",[44,60])]),["DISK_THM"]),
       [read"%191%90%185%158%236%314$1@@%314%308$0@$1@@@|@|@"])
  fun op FINITE_NUMSET_OF_PTREE x = x
    val op FINITE_NUMSET_OF_PTREE =
    DT(((("patricia",97),
        [("bool",[25,63]),("list",[233]),("patricia",[46])]),["DISK_THM"]),
       [read"%191%90%298%337$0@@|@"])
  fun op ADD_INSERT x = x
    val op ADD_INSERT =
    DT(((("patricia",98),
        [("bool",[58]),("one",[3]),("patricia",[44])]),["DISK_THM"]),
       [read"%186%100%191%90%185%71%234%250$1@%198$0@$2@@@%308$0@$1@@|@|@|@"])
  fun op PEEK_INSERT_PTREE x = x
    val op PEEK_INSERT_PTREE =
    DT(((("patricia",99),[("one",[3]),("patricia",[66,98])]),["DISK_THM"]),
       [read"%191%90%185%62%185%61%236%314$2@@%231%342%308$1@$2@@$0@@%274%228$1@$0@@%357%383@@%342$2@$0@@@@|@|@|@"])
  fun op MEM_TRAVERSE_INSERT_PTREE x = x
    val op MEM_TRAVERSE_INSERT_PTREE =
    DT(((("patricia",100),
        [("bool",[25,26,27,30,51,52,53,54,56,58,63,64,105,124]),
         ("option",[14]),("patricia",[86,96,99])]),["DISK_THM"]),
       [read"%191%90%185%158%185%60%236%314$2@@%217%306$1@%326%365%308$0@$2@@@@@%382%228$1@$0@@%212%397%228$1@$0@@@%306$1@%326%365$2@@@@@@@|@|@|@"])
  fun op PERM_INSERT_PTREE x = x
    val op PERM_INSERT_PTREE =
    DT(((("patricia",101),
        [("bool",[14,25,26,36,51,53,54,55,56,58,63,99,105,124]),
         ("combin",[3,5,16,19]),
         ("list",[25,28,43,173,215,233,247,250,252]),
         ("patricia",[46,93,94,95,96,97,100]),
         ("pred_set",[33,41,80,187,190]),("rich_list",[55,95]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[24])]),["DISK_THM"]),
       [read"%191%90%170%84%236%298$0@@%236%314$1@@%345%365%300%269%308@@$1@%352$0@@@@%352%369%337$1@@$0@@@@@|@|@"])
  fun op IN_PTREE_OF_NUMSET x = x
    val op IN_PTREE_OF_NUMSET =
    DT(((("patricia",102),
        [("bool",[25,51,58,63,105,124]),("list",[249]),
         ("patricia",[43,45,86,90,95,97,101]),("pred_set",[33,190]),
         ("sorting",[24])]),["DISK_THM"]),
       [read"%191%90%170%84%185%71%236%212%314$2@@%298$1@@@%217%309$0@%346$2@$1@@@%382%309$0@$2@@%306$0@$1@@@@|@|@|@"])
  fun op IN_PTREE_EMPTY x = x
    val op IN_PTREE_EMPTY =
    DT(((("patricia",103),
        [("arithmetic",[24,25,26,27,46,59,71,88,93,173]),
         ("bool",[15,25,26,27,30,36,54,58,63,64,104]),("combin",[19]),
         ("numeral",[3,8]),("option",[14]),("pair",[7,8,9,16,49]),
         ("patricia",[8,9,21,22,43]),("prim_rec",[42]),
         ("relation",[113,115,121,126])]),["DISK_THM"]),
       [read"%185%71%397%309$0@%292@@|@"])
  fun op IN_PTREE_OF_NUMSET_EMPTY x = x
    val op IN_PTREE_OF_NUMSET_EMPTY =
    DT(((("patricia",104),
        [("bool",[26,27,51,52,58,63,105,124]),
         ("patricia",[59,102,103])]),["DISK_THM"]),
       [read"%170%84%185%71%236%298$1@@%217%306$0@$1@@%309$0@%346%292@$1@@@@|@|@"])
  fun op PTREE_EXTENSION x = x
    val op PTREE_EXTENSION =
    DT(((("patricia",105),
        [("bool",[25,26,27,51,53,54,56,58,62,63,105,124]),("one",[3]),
         ("option",[6,10,11,14]),("patricia",[43,80])]),["DISK_THM"]),
       [read"%191%93%191%96%236%212%314$1@@%314$0@@@%217%234$1@$0@@%185%158%217%309$0@$2@@%309$0@$1@@|@@@|@|@"])
  fun op PTREE_OF_NUMSET_NUMSET_OF_PTREE x = x
    val op PTREE_OF_NUMSET_NUMSET_OF_PTREE =
    DT(((("patricia",106),
        [("bool",[25,26,27,51,52,56,58,63,105,124]),
         ("patricia",[59,87,90,91,97,102,103,105]),
         ("pred_set",[33,190])]),["DISK_THM"]),
       [read"%191%90%170%84%236%212%314$1@@%298$0@@@%234%346%292@%369%337$1@@$0@@@%346$1@$0@@@|@|@"])
  fun op NUMSET_OF_PTREE_PTREE_OF_NUMSET x = x
    val op NUMSET_OF_PTREE_PTREE_OF_NUMSET =
    DT(((("patricia",107),
        [("bool",[25,36,51,53,56,58,63,105,124]),("patricia",[87,90,102]),
         ("pred_set",[3,33])]),["DISK_THM"]),
       [read"%191%90%170%84%236%212%314$1@@%298$0@@@%219%337%346$1@$0@@@%369%337$1@@$0@@@|@|@"])
  fun op NUMSET_OF_PTREE_EMPTY x = x
    val op NUMSET_OF_PTREE_EMPTY =
    DT(((("patricia",108),
        [("bool",[25,56]),("list",[240]),
         ("patricia",[35,46])]),["DISK_THM"]), [read"%219%337%292@@%284@"])
  fun op PTREE_OF_NUMSET_EMPTY x = x
    val op PTREE_OF_NUMSET_EMPTY =
    DT(((("patricia",109),
        [("bool",[25,56]),("list",[29,246]),
         ("patricia",[45])]),["DISK_THM"]),
       [read"%191%90%234%346$0@%284@@$0@|@"])
  fun op NUMSET_OF_PTREE_PTREE_OF_NUMSET_EMPTY x = x
    val op NUMSET_OF_PTREE_PTREE_OF_NUMSET_EMPTY =
    DT(((("patricia",110),
        [("bool",[51,58,63,105,124]),("patricia",[59,107,108]),
         ("pred_set",[41])]),["DISK_THM"]),
       [read"%170%84%236%298$0@@%219%337%346%292@$0@@@$0@@|@"])
  fun op IN_PTREE_INSERT_PTREE x = x
    val op IN_PTREE_INSERT_PTREE =
    DT(((("patricia",111),
        [("bool",[25,26,27,30,52,53,56,58,63,64,105,124]),("option",[14]),
         ("patricia",[43,99])]),["DISK_THM"]),
       [read"%191%90%185%70%185%71%236%314$2@@%217%309$0@%308$1@$2@@@%382%228$1@$0@@%309$0@$2@@@@|@|@|@"])
  fun op IN_PTREE_REMOVE x = x
    val op IN_PTREE_REMOVE =
    DT(((("patricia",112),
        [("bool",[25,26,27,30,51,53,54,56,58,63,64,105,124]),
         ("option",[14]),("patricia",[43,68])]),["DISK_THM"]),
       [read"%191%90%185%70%185%71%236%314$2@@%217%309$0@%351$2@$1@@@%212%397%228$0@$1@@@%309$0@$2@@@@|@|@|@"])
  fun op IN_PTREE_UNION_PTREE x = x
    val op IN_PTREE_UNION_PTREE =
    DT(((("patricia",113),
        [("bool",[25,51,56,58,63,105,124]),
         ("patricia",[47,87,97,102])]),["DISK_THM"]),
       [read"%191%93%191%96%185%71%236%212%314$2@@%314$1@@@%217%309$0@%370$2@$1@@@%382%309$0@$2@@%309$0@$1@@@@|@|@|@"])
  fun op UNION_PTREE_IS_PTREE x = x
    val op UNION_PTREE_IS_PTREE =
    DT(((("patricia",114),
        [("bool",[25,53,58,63,105,124]),
         ("patricia",[47,90])]),["DISK_THM"]),
       [read"%191%93%191%96%236%212%314$1@@%314$0@@@%314%370$1@$0@@@|@|@"])
  fun op UNION_PTREE_COMM x = x
    val op UNION_PTREE_COMM =
    DT(((("patricia",115),
        [("bool",[25,26,51,53,54,58,63,99,100,105,124]),
         ("patricia",[105,113,114]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%191%93%191%96%236%212%314$1@@%314$0@@@%234%370$1@$0@@%370$0@$1@@@|@|@"])
  fun op UNION_PTREE_COMM_EMPTY x = x
    val op UNION_PTREE_COMM_EMPTY =
    DT(((("patricia",116),
        [("bool",[51,58,63,105,124]),("patricia",[59,115])]),["DISK_THM"]),
       [read"%191%90%236%314$0@@%234%370%292@$0@@%370$0@%292@@@|@"])
  fun op UNION_PTREE_EMPTY x = x
    val op UNION_PTREE_EMPTY =
    DT(((("patricia",117),
        [("bool",[25,53,56,58,63,105,124]),
         ("patricia",[47,108,109,116])]),["DISK_THM"]),
       [read"%212%191%90%234%370$0@%292@@$0@|@@%191%90%236%314$0@@%234%370%292@$0@@$0@@|@@"])
  fun op UNION_PTREE_ASSOC x = x
    val op UNION_PTREE_ASSOC =
    DT(((("patricia",118),
        [("bool",[25,26,51,53,54,58,63,105,124]),
         ("patricia",[105,113,114]),
         ("sat",[1,3,5,6,7,11,12,13,15,17,18])]),["DISK_THM"]),
       [read"%191%93%191%96%191%97%236%212%314$2@@%212%314$1@@%314$0@@@@%234%370$2@%370$1@$0@@@%370%370$2@$1@@$0@@@|@|@|@"])
  fun op PTREE_OF_NUMSET_UNION x = x
    val op PTREE_OF_NUMSET_UNION =
    DT(((("patricia",119),
        [("bool",[25,26,51,53,54,58,63,105,124]),("patricia",[90,102,105]),
         ("pred_set",[33,190]),
         ("sat",[1,3,5,6,7,11,12,13,15,17,18])]),["DISK_THM"]),
       [read"%191%90%170%86%170%88%236%212%314$2@@%212%298$1@@%298$0@@@@%234%346$2@%369$1@$0@@@%346%346$2@$1@@$0@@@|@|@|@"])
  fun op PTREE_OF_NUMSET_INSERT x = x
    val op PTREE_OF_NUMSET_INSERT =
    DT(((("patricia",120),
        [("bool",[25,26,51,53,54,55,58,63,105,124]),
         ("patricia",[90,96,102,105,111]),("pred_set",[80,187]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%191%90%170%84%185%158%236%212%314$2@@%298$1@@@%234%346$2@%307$0@$1@@@%308$0@%346$2@$1@@@@|@|@|@"])
  fun op PTREE_OF_NUMSET_INSERT_EMPTY x = x
    val op PTREE_OF_NUMSET_INSERT_EMPTY =
    DT(((("patricia",121),
        [("bool",[51,58,63,105,124]),("patricia",[59,120])]),["DISK_THM"]),
       [read"%170%84%185%158%236%298$1@@%234%346%292@%307$0@$1@@@%308$0@%346%292@$1@@@@|@|@"])
  fun op PTREE_OF_NUMSET_DELETE x = x
    val op PTREE_OF_NUMSET_DELETE =
    DT(((("patricia",123),
        [("bool",[26,27,51,58,63,105,124,129,147]),
         ("patricia",[59,103,122])]),["DISK_THM"]),
       [read"%170%84%185%158%236%298$1@@%234%346%292@%280$1@$0@@@%351%346%292@$1@@$0@@@|@|@"])
  fun op TRAVERSE_AUX x = x
    val op TRAVERSE_AUX =
    DT(((("patricia",124),
        [("bool",[14,25,26,36,51,53,54,55,56,63,132,133,138]),
         ("list",[20,48,56]),("patricia",[1,2,3,4,5,6,7,34,35]),
         ("sat",[1,3,5,6,7,11,14,17,18,19,20,23])]),["DISK_THM"]),
       [read"%188%89%227%363$0@@%366$0@%333@@|@"])
  fun op PTREE_TRAVERSE_EQ x = x
    val op PTREE_TRAVERSE_EQ =
    DT(((("patricia",125),
        [("bool",[25,26,27,36,51,53,54,55,56,58,62,63,105,124]),
         ("one",[3]),("option",[6,10,11,14]),("patricia",[71,80,85,86]),
         ("sat",[1,3,5,6,7,11,14,17,18,19,20,23])]),["DISK_THM"]),
       [read"%188%92%189%95%236%212%311$1@@%312$0@@@%217%185%62%217%306$0@%326%363$2@@@@%306$0@%326%364$1@@@@|@@%227%363$1@@%364$0@@@@|@|@"])
  fun op QSORT_MEM_EQ x = x
    val op QSORT_MEM_EQ =
    DT(((("patricia",126),
        [("bool",[25,53,54,63]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[4,5,24,44])]),["DISK_THM"]),
       [read"%182%69%182%68%167%17%236%226%347$0@$1@@%347$0@$2@@@%163%157%217%305$0@%325$2@@@%305$0@%325$3@@@|@@|@|@|@"])
  fun op KEYS_PEEK x = x
    val op KEYS_PEEK =
    DT(((("patricia",127),
        [("bool",[2,15,25,26,53,54,58,63,74,83,100,105,124]),
         ("patricia",[36,125,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%188%92%189%95%236%212%311$1@@%312$0@@@%217%227%320$1@@%321$0@@@%227%363$1@@%364$0@@@@|@|@"])
  fun op PERM_ADD x = x
    val op PERM_ADD =
    DT(((("patricia",128),
        [("bool",[25,26,27,51,53,54,55,56,58,63,105,124]),
         ("combin",[12,16]),("list",[29,120,215,250,251,252]),
         ("patricia",[71,73,85,87,93,94,95,96,97,98,101,107,109,111,120]),
         ("pred_set",[185,187]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[4])]),["DISK_THM"]),
       [read"%188%89%185%62%163%46%236%212%311$2@@%397%306$1@%326%363$2@@@@@@%345%363%248$2@%195$1@$0@@@@%276$1@%363$2@@@@|@|@|@"])
  fun op PERM_NOT_ADD x = x
    val op PERM_NOT_ADD =
    DT(((("patricia",129),
        [("bool",[25,26,27,30,51,52,53,54,56,58,63,64,105,124]),
         ("option",[14]),("patricia",[60,66,86,125]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%188%89%185%62%163%46%236%212%311$2@@%306$1@%326%363$2@@@@@%227%363%248$2@%195$1@$0@@@@%363$2@@@|@|@|@"])
  fun op PERM_NOT_REMOVE x = x
    val op PERM_NOT_REMOVE =
    DT(((("patricia",130),
        [("bool",[25,26,27,30,48,51,53,54,56,58,63,64,105,124]),
         ("option",[14]),("patricia",[64,68,86,125]),
         ("sat",[1,3,5,6,7,11,14,17,18,19,20,23])]),["DISK_THM"]),
       [read"%188%89%185%62%236%212%311$1@@%397%306$0@%326%363$1@@@@@@%227%363%349$1@$0@@@%363$1@@@|@|@"])
  fun op PERM_DELETE_PTREE x = x
    val op PERM_DELETE_PTREE =
    DT(((("patricia",131),
        [("bool",
         [2,14,25,26,27,30,36,51,52,53,54,55,56,58,63,64,99,105,124]),
         ("list",[82,216]),("option",[14]),("patricia",[64,68,86,93,94]),
         ("rich_list",[179]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%191%90%185%62%236%212%314$1@@%306$0@%326%365$1@@@@@%345%365%351$1@$0@@@%296%158%397%228$0@$1@@|@%365$1@@@@|@|@"])
  fun op FILTER_NONE x = x
    val op FILTER_NONE =
    DT(((("patricia",132),
        [("arithmetic",[37]),
         ("bool",[14,25,26,27,30,36,48,51,53,56,58,63,64,105,124]),
         ("list",[17,22,27,43,48,128]),("prim_rec",[6,7])]),["DISK_THM"]),
       [read"%166%7%182%63%236%185%71%236%214$0@%322$1@@@$2%283$0@$1@@@|@@%226%295$1@$0@@$0@@|@|@"])
  fun op PERM_REMOVE x = x
    val op PERM_REMOVE =
    DT(((("patricia",133),
        [("bool",[25,51,53,56,58,63,105,124]),
         ("patricia",[71,75,85,131])]),["DISK_THM"]),
       [read"%188%89%185%62%236%212%311$1@@%306$0@%326%363$1@@@@@%345%363%349$1@$0@@@%296%158%397%228$0@$1@@|@%363$1@@@@|@|@"])
  fun op SIZE_ADD x = x
    val op SIZE_ADD =
    DT(((("patricia",134),
        [("arithmetic",[64]),
         ("bool",[25,26,27,30,51,53,54,56,58,63,64,75,105,124,129]),
         ("list",[22]),("patricia",[40,128,129]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[23])]),["DISK_THM"]),
       [read"%188%89%185%62%163%46%236%311$2@@%228%353%248$2@%195$1@$0@@@@%272%306$1@%326%363$2@@@@%353$2@@%193%353$2@@%336%259%381@@@@@@|@|@|@"])
  fun op SIZE_REMOVE x = x
    val op SIZE_REMOVE =
    DT(((("patricia",135),
        [("arithmetic",[17,24,25,27,41,46,65,71,93,172,173,177,180,269]),
         ("bool",
         [2,14,15,25,26,27,30,36,43,51,52,53,54,55,56,58,63,64,74,84,93,96,
          99,101,104,105,124,129]),("combin",[3,5]),
         ("list",[22,27,43,46,120,170,215]),("numeral",[3,5,8]),
         ("patricia",[40,93,130,132,133]),("prim_rec",[7]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[23])]),["DISK_THM"]),
       [read"%188%89%185%62%236%311$1@@%228%353%349$1@$0@@@%272%306$0@%326%363$1@@@@%211%353$1@@%336%259%381@@@@%353$1@@@@|@|@"])
  fun op SIZE x = x
    val op SIZE =
    DT(((("patricia",136),
        [("arithmetic",[91]),("bool",[25,56]),("list",[22,57]),
         ("numeral",[3]),("patricia",[35,40])]),["DISK_THM"]),
       [read"%212%228%353%290@@%213@@%212%185%62%163%46%228%353%327$1@$0@@@%336%259%381@@@|@|@@%185%73%185%70%188%65%188%80%228%353%266$3@$2@$1@$0@@@%193%353$1@@%353$0@@@|@|@|@|@@@"])
  fun op SIZE_PTREE_OF_NUMSET x = x
    val op SIZE_PTREE_OF_NUMSET =
    DT(((("patricia",137),
        [("arithmetic",[22,25,27,71,91,173,177,180]),
         ("bool",
         [14,25,26,27,36,51,52,53,54,55,56,58,63,96,100,104,105,124,129,
          147]),("combin",[16]),("list",[22,29,43,55,120,215,221,248]),
         ("numeral",[3,5,8]),("patricia",[44,45,93,96,100,134]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%191%90%170%84%236%298$0@@%236%212%314$1@@%254%255%365$1@@%352$0@@@@@%228%354%346$1@$0@@@%193%354$1@@%271$0@@@@@|@|@"])
  fun op SIZE_PTREE_OF_NUMSET_EMPTY x = x
    val op SIZE_PTREE_OF_NUMSET_EMPTY =
    DT(((("patricia",138),
        [("arithmetic",[22,25]),("bool",[25,51,53,58,63,105,124]),
         ("list",[20,252]),("patricia",[35,59,136,137])]),["DISK_THM"]),
       [read"%170%84%236%298$0@@%228%354%346%292@$0@@@%271$0@@@|@"])
  fun op CARD_LIST_TO_SET x = x
    val op CARD_LIST_TO_SET =
    DT(((("patricia",139),
        [("bool",[14,25,26,27,53,56,58,63,105,124,129,147]),
         ("list",[22,43,215,233,240]),("pred_set",[207,208]),
         ("prim_rec",[1])]),["DISK_THM"]),
       [read"%182%63%236%253$0@@%228%270%325$0@@@%322$0@@@|@"])
  fun op CARD_NUMSET_OF_PTREE x = x
    val op CARD_NUMSET_OF_PTREE =
    DT(((("patricia",140),
        [("bool",[25,53,56,58,63,105,124]),
         ("patricia",[40,46,93,139])]),["DISK_THM"]),
       [read"%191%90%236%314$0@@%228%271%337$0@@@%354$0@@@|@"])
  fun op DELETE_UNION x = x
    val op DELETE_UNION =
    DT(((("patricia",141),
        [("bool",[25,26,27,48,53,54,63]),("pred_set",[3,33,102]),
         ("sat",[1,3,5,6,7,11,12,13,15,17,18])]),["DISK_THM"]),
       [read"%163%157%166%85%166%87%218%279%368$1@$0@@$2@@%368%279$1@$2@@%279$0@$2@@@|@|@|@"])
  end
  val _ = DB.bindl "patricia"
  [("ptree_TY_DEF",ptree_TY_DEF,DB.Def),
   ("ptree_case_def",ptree_case_def,DB.Def),
   ("ptree_size_def",ptree_size_def,DB.Def),
   ("BRANCHING_BIT_tupled_primitive_def",
    BRANCHING_BIT_tupled_primitive_def,
    DB.Def),
   ("BRANCHING_BIT_curried_def",BRANCHING_BIT_curried_def,DB.Def),
   ("PEEK_tupled_primitive_def",PEEK_tupled_primitive_def,DB.Def),
   ("PEEK_curried_def",PEEK_curried_def,DB.Def),
   ("JOIN_def",JOIN_def,DB.Def),
   ("ADD_tupled_primitive_def",ADD_tupled_primitive_def,DB.Def),
   ("ADD_curried_def",ADD_curried_def,DB.Def),
   ("BRANCH_primitive_def",BRANCH_primitive_def,DB.Def),
   ("REMOVE_def",REMOVE_def,DB.Def),
   ("TRAVERSE_AUX_def",TRAVERSE_AUX_def,DB.Def),
   ("TRAVERSE_def",TRAVERSE_def,DB.Def), ("KEYS_def",KEYS_def,DB.Def),
   ("TRANSFORM_def",TRANSFORM_def,DB.Def),
   ("EVERY_LEAF_def",EVERY_LEAF_def,DB.Def),
   ("EXISTS_LEAF_def",EXISTS_LEAF_def,DB.Def),
   ("SIZE_def",SIZE_def,DB.Def), ("DEPTH_def",DEPTH_def,DB.Def),
   ("IS_PTREE_def",IS_PTREE_def,DB.Def),
   ("IN_PTREE_def",IN_PTREE_def,DB.Def),
   ("INSERT_PTREE_def",INSERT_PTREE_def,DB.Def),
   ("PTREE_OF_NUMSET_def",PTREE_OF_NUMSET_def,DB.Def),
   ("NUMSET_OF_PTREE_def",NUMSET_OF_PTREE_def,DB.Def),
   ("UNION_PTREE_def",UNION_PTREE_def,DB.Def),
   ("IS_EMPTY_primitive_def",IS_EMPTY_primitive_def,DB.Def),
   ("FIND_def",FIND_def,DB.Def), ("ADD_LIST_def",ADD_LIST_def,DB.Def),
   ("datatype_ptree",datatype_ptree,DB.Thm), ("ptree_11",ptree_11,DB.Thm),
   ("ptree_distinct",ptree_distinct,DB.Thm),
   ("ptree_case_cong",ptree_case_cong,DB.Thm),
   ("ptree_nchotomy",ptree_nchotomy,DB.Thm),
   ("ptree_Axiom",ptree_Axiom,DB.Thm),
   ("ptree_induction",ptree_induction,DB.Thm),
   ("BRANCHING_BIT_ind",BRANCHING_BIT_ind,DB.Thm),
   ("BRANCHING_BIT_def",BRANCHING_BIT_def,DB.Thm),
   ("PEEK_ind",PEEK_ind,DB.Thm), ("PEEK_def",PEEK_def,DB.Thm),
   ("ADD_ind",ADD_ind,DB.Thm), ("ADD_def",ADD_def,DB.Thm),
   ("BRANCH_ind",BRANCH_ind,DB.Thm), ("BRANCH_def",BRANCH_def,DB.Thm),
   ("IS_EMPTY_ind",IS_EMPTY_ind,DB.Thm),
   ("IS_EMPTY_def",IS_EMPTY_def,DB.Thm),
   ("BRANCHING_BIT",BRANCHING_BIT,DB.Thm),
   ("BRANCHING_BIT_ZERO",BRANCHING_BIT_ZERO,DB.Thm),
   ("BRANCHING_BIT_SYM",BRANCHING_BIT_SYM,DB.Thm),
   ("EVERY_LEAF_ADD",EVERY_LEAF_ADD,DB.Thm),
   ("MONO_EVERY_LEAF",MONO_EVERY_LEAF,DB.Thm),
   ("NOT_ADD_EMPTY",NOT_ADD_EMPTY,DB.Thm),
   ("EMPTY_IS_PTREE",EMPTY_IS_PTREE,DB.Thm),
   ("ADD_IS_PTREE",ADD_IS_PTREE,DB.Thm),
   ("EVERY_LEAF_BRANCH",EVERY_LEAF_BRANCH,DB.Thm),
   ("EVERY_LEAF_REMOVE",EVERY_LEAF_REMOVE,DB.Thm),
   ("IS_PTREE_BRANCH",IS_PTREE_BRANCH,DB.Thm),
   ("REMOVE_IS_PTREE",REMOVE_IS_PTREE,DB.Thm),
   ("PEEK_NONE",PEEK_NONE,DB.Thm), ("PEEK_ADD",PEEK_ADD,DB.Thm),
   ("BRANCH",BRANCH,DB.Thm), ("PEEK_REMOVE",PEEK_REMOVE,DB.Thm),
   ("EVERY_LEAF_TRANSFORM",EVERY_LEAF_TRANSFORM,DB.Thm),
   ("TRANSFORM_EMPTY",TRANSFORM_EMPTY,DB.Thm),
   ("TRANSFORM_IS_PTREE",TRANSFORM_IS_PTREE,DB.Thm),
   ("PEEK_TRANSFORM",PEEK_TRANSFORM,DB.Thm),
   ("ADD_TRANSFORM",ADD_TRANSFORM,DB.Thm),
   ("TRANSFORM_BRANCH",TRANSFORM_BRANCH,DB.Thm),
   ("REMOVE_TRANSFORM",REMOVE_TRANSFORM,DB.Thm),
   ("REMOVE_ADD_EQ",REMOVE_ADD_EQ,DB.Thm), ("ADD_ADD",ADD_ADD,DB.Thm),
   ("EVERY_LEAF_PEEK",EVERY_LEAF_PEEK,DB.Thm),
   ("IS_PTREE_PEEK",IS_PTREE_PEEK,DB.Thm), ("PTREE_EQ",PTREE_EQ,DB.Thm),
   ("REMOVE_REMOVE",REMOVE_REMOVE,DB.Thm),
   ("REMOVE_ADD",REMOVE_ADD,DB.Thm), ("ADD_ADD_SYM",ADD_ADD_SYM,DB.Thm),
   ("FILTER_ALL",FILTER_ALL,DB.Thm),
   ("TRAVERSE_TRANSFORM",TRAVERSE_TRANSFORM,DB.Thm),
   ("MEM_TRAVERSE_PEEK",MEM_TRAVERSE_PEEK,DB.Thm),
   ("IN_NUMSET_OF_PTREE",IN_NUMSET_OF_PTREE,DB.Thm),
   ("ADD_LIST_IS_PTREE",ADD_LIST_IS_PTREE,DB.Thm),
   ("ADD_LIST_TO_EMPTY_IS_PTREE",ADD_LIST_TO_EMPTY_IS_PTREE,DB.Thm),
   ("PTREE_OF_NUMSET_IS_PTREE",PTREE_OF_NUMSET_IS_PTREE,DB.Thm),
   ("PTREE_OF_NUMSET_IS_PTREE_EMPTY",
    PTREE_OF_NUMSET_IS_PTREE_EMPTY,
    DB.Thm), ("NOT_KEY_LEFT_AND_RIGHT",NOT_KEY_LEFT_AND_RIGHT,DB.Thm),
   ("ALL_DISTINCT_TRAVERSE",ALL_DISTINCT_TRAVERSE,DB.Thm),
   ("MEM_ALL_DISTINCT_IMP_PERM",MEM_ALL_DISTINCT_IMP_PERM,DB.Thm),
   ("MEM_TRAVERSE",MEM_TRAVERSE,DB.Thm),
   ("INSERT_PTREE_IS_PTREE",INSERT_PTREE_IS_PTREE,DB.Thm),
   ("FINITE_NUMSET_OF_PTREE",FINITE_NUMSET_OF_PTREE,DB.Thm),
   ("ADD_INSERT",ADD_INSERT,DB.Thm),
   ("PEEK_INSERT_PTREE",PEEK_INSERT_PTREE,DB.Thm),
   ("MEM_TRAVERSE_INSERT_PTREE",MEM_TRAVERSE_INSERT_PTREE,DB.Thm),
   ("PERM_INSERT_PTREE",PERM_INSERT_PTREE,DB.Thm),
   ("IN_PTREE_OF_NUMSET",IN_PTREE_OF_NUMSET,DB.Thm),
   ("IN_PTREE_EMPTY",IN_PTREE_EMPTY,DB.Thm),
   ("IN_PTREE_OF_NUMSET_EMPTY",IN_PTREE_OF_NUMSET_EMPTY,DB.Thm),
   ("PTREE_EXTENSION",PTREE_EXTENSION,DB.Thm),
   ("PTREE_OF_NUMSET_NUMSET_OF_PTREE",
    PTREE_OF_NUMSET_NUMSET_OF_PTREE,
    DB.Thm),
   ("NUMSET_OF_PTREE_PTREE_OF_NUMSET",
    NUMSET_OF_PTREE_PTREE_OF_NUMSET,
    DB.Thm), ("NUMSET_OF_PTREE_EMPTY",NUMSET_OF_PTREE_EMPTY,DB.Thm),
   ("PTREE_OF_NUMSET_EMPTY",PTREE_OF_NUMSET_EMPTY,DB.Thm),
   ("NUMSET_OF_PTREE_PTREE_OF_NUMSET_EMPTY",
    NUMSET_OF_PTREE_PTREE_OF_NUMSET_EMPTY,
    DB.Thm), ("IN_PTREE_INSERT_PTREE",IN_PTREE_INSERT_PTREE,DB.Thm),
   ("IN_PTREE_REMOVE",IN_PTREE_REMOVE,DB.Thm),
   ("IN_PTREE_UNION_PTREE",IN_PTREE_UNION_PTREE,DB.Thm),
   ("UNION_PTREE_IS_PTREE",UNION_PTREE_IS_PTREE,DB.Thm),
   ("UNION_PTREE_COMM",UNION_PTREE_COMM,DB.Thm),
   ("UNION_PTREE_COMM_EMPTY",UNION_PTREE_COMM_EMPTY,DB.Thm),
   ("UNION_PTREE_EMPTY",UNION_PTREE_EMPTY,DB.Thm),
   ("UNION_PTREE_ASSOC",UNION_PTREE_ASSOC,DB.Thm),
   ("PTREE_OF_NUMSET_UNION",PTREE_OF_NUMSET_UNION,DB.Thm),
   ("PTREE_OF_NUMSET_INSERT",PTREE_OF_NUMSET_INSERT,DB.Thm),
   ("PTREE_OF_NUMSET_INSERT_EMPTY",PTREE_OF_NUMSET_INSERT_EMPTY,DB.Thm),
   ("PTREE_OF_NUMSET_DELETE",PTREE_OF_NUMSET_DELETE,DB.Thm),
   ("TRAVERSE_AUX",TRAVERSE_AUX,DB.Thm),
   ("PTREE_TRAVERSE_EQ",PTREE_TRAVERSE_EQ,DB.Thm),
   ("QSORT_MEM_EQ",QSORT_MEM_EQ,DB.Thm), ("KEYS_PEEK",KEYS_PEEK,DB.Thm),
   ("PERM_ADD",PERM_ADD,DB.Thm), ("PERM_NOT_ADD",PERM_NOT_ADD,DB.Thm),
   ("PERM_NOT_REMOVE",PERM_NOT_REMOVE,DB.Thm),
   ("PERM_DELETE_PTREE",PERM_DELETE_PTREE,DB.Thm),
   ("FILTER_NONE",FILTER_NONE,DB.Thm), ("PERM_REMOVE",PERM_REMOVE,DB.Thm),
   ("SIZE_ADD",SIZE_ADD,DB.Thm), ("SIZE_REMOVE",SIZE_REMOVE,DB.Thm),
   ("SIZE",SIZE,DB.Thm),
   ("SIZE_PTREE_OF_NUMSET",SIZE_PTREE_OF_NUMSET,DB.Thm),
   ("SIZE_PTREE_OF_NUMSET_EMPTY",SIZE_PTREE_OF_NUMSET_EMPTY,DB.Thm),
   ("CARD_LIST_TO_SET",CARD_LIST_TO_SET,DB.Thm),
   ("CARD_NUMSET_OF_PTREE",CARD_NUMSET_OF_PTREE,DB.Thm),
   ("DELETE_UNION",DELETE_UNION,DB.Thm)]

  local open Portable GrammarSpecials Parse
    fun UTOFF f = Feedback.trace("Parse.unicode_trace_off_complaints",0)f
  in
  val _ = mk_local_grms [("sortingTheory.sorting_grammars",
                          sortingTheory.sorting_grammars),
                         ("wordsTheory.words_grammars",
                          wordsTheory.words_grammars)]
  val _ = List.app (update_grms reveal) []
  val _ = update_grms
       (UTOFF (temp_set_fixity "'"))
       (Infix(HOLgrammars.LEFT, 2000))
  val _ = update_grms
       (UTOFF (temp_set_fixity "|+"))
       (Infix(HOLgrammars.LEFT, 600))
  val _ = update_grms
       (UTOFF (temp_set_fixity "|++"))
       (Infix(HOLgrammars.LEFT, 500))
  val _ = update_grms
       (UTOFF (temp_set_fixity "\\\\"))
       (Infix(HOLgrammars.LEFT, 600))
  val _ = update_grms temp_add_type "ptree"
  val _ = update_grms temp_add_type "ptree"








  val _ = update_grms
       (UTOFF temp_overload_on)
       ("Empty", (Term.prim_mk_const { Name = "Empty", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("Empty", (Term.prim_mk_const { Name = "Empty", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("Leaf", (Term.prim_mk_const { Name = "Leaf", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("Leaf", (Term.prim_mk_const { Name = "Leaf", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("Branch", (Term.prim_mk_const { Name = "Branch", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("Branch", (Term.prim_mk_const { Name = "Branch", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("ptree_CASE", (Term.prim_mk_const { Name = "ptree_CASE", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("ptree_size", (Term.prim_mk_const { Name = "ptree_size", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BRANCHING_BIT_tupled", (Term.prim_mk_const { Name = "BRANCHING_BIT_tupled", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BRANCHING_BIT_tupled", (Term.prim_mk_const { Name = "BRANCHING_BIT_tupled", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BRANCHING_BIT", (Term.prim_mk_const { Name = "BRANCHING_BIT", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BRANCHING_BIT", (Term.prim_mk_const { Name = "BRANCHING_BIT", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("PEEK_tupled", (Term.prim_mk_const { Name = "PEEK_tupled", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("PEEK_tupled", (Term.prim_mk_const { Name = "PEEK_tupled", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("PEEK", (Term.prim_mk_const { Name = "PEEK", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("PEEK", (Term.prim_mk_const { Name = "PEEK", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("'", (Term.prim_mk_const { Name = "PEEK", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("JOIN", (Term.prim_mk_const { Name = "JOIN", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("JOIN", (Term.prim_mk_const { Name = "JOIN", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("ADD_tupled", (Term.prim_mk_const { Name = "ADD_tupled", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("ADD_tupled", (Term.prim_mk_const { Name = "ADD_tupled", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("ADD", (Term.prim_mk_const { Name = "ADD", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("ADD", (Term.prim_mk_const { Name = "ADD", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("|+", (Term.prim_mk_const { Name = "ADD", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BRANCH", (Term.prim_mk_const { Name = "BRANCH", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BRANCH", (Term.prim_mk_const { Name = "BRANCH", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("REMOVE", (Term.prim_mk_const { Name = "REMOVE", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("\\\\", (Term.prim_mk_const { Name = "REMOVE", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("TRAVERSE_AUX", (Term.prim_mk_const { Name = "TRAVERSE_AUX", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("TRAVERSE", (Term.prim_mk_const { Name = "TRAVERSE", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("KEYS", (Term.prim_mk_const { Name = "KEYS", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("KEYS", (Term.prim_mk_const { Name = "KEYS", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("TRANSFORM", (Term.prim_mk_const { Name = "TRANSFORM", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("EVERY_LEAF", (Term.prim_mk_const { Name = "EVERY_LEAF", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("EXISTS_LEAF", (Term.prim_mk_const { Name = "EXISTS_LEAF", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("SIZE", (Term.prim_mk_const { Name = "SIZE", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("SIZE", (Term.prim_mk_const { Name = "SIZE", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("DEPTH", (Term.prim_mk_const { Name = "DEPTH", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("IS_PTREE", (Term.prim_mk_const { Name = "IS_PTREE", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("LIST_TO_SET", (Term.prim_mk_const { Name = "LIST_TO_SET", Thy = "list"}))
  val _ = update_grms
       (UTOFF (temp_set_fixity "IN_PTREE"))
       (Infix(HOLgrammars.NONASSOC, 425))
  val _ = update_grms
       (UTOFF (temp_set_fixity "INSERT_PTREE"))
       (Infix(HOLgrammars.RIGHT, 490))
  val _ = update_grms
       (UTOFF (temp_set_fixity "UNION_PTREE"))
       (Infix(HOLgrammars.LEFT, 500))
  val _ = update_grms
       temp_thytype_abbrev
       ({Thy="patricia",Name="ptreeset"}, T"ptree" "patricia" [T"one" "one" []])
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("IN_PTREE", (Term.prim_mk_const { Name = "IN_PTREE", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("IN_PTREE", (Term.prim_mk_const { Name = "IN_PTREE", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("INSERT_PTREE", (Term.prim_mk_const { Name = "INSERT_PTREE", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("INSERT_PTREE", (Term.prim_mk_const { Name = "INSERT_PTREE", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_add_listform)
       {separator = [TOK ";", BreakSpace(1, 0)]
, leftdelim = [TOK "<{"]
, rightdelim = [TOK "}>"]
, cons = "INSERT_PTREE", nilstr = "Empty", block_info = (INCONSISTENT, 0)}
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("PTREE_OF_NUMSET", (Term.prim_mk_const { Name = "PTREE_OF_NUMSET", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("PTREE_OF_NUMSET", (Term.prim_mk_const { Name = "PTREE_OF_NUMSET", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("|++", (Term.prim_mk_const { Name = "PTREE_OF_NUMSET", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("NUMSET_OF_PTREE", (Term.prim_mk_const { Name = "NUMSET_OF_PTREE", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("NUMSET_OF_PTREE", (Term.prim_mk_const { Name = "NUMSET_OF_PTREE", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("UNION_PTREE", (Term.prim_mk_const { Name = "UNION_PTREE", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("UNION_PTREE", (Term.prim_mk_const { Name = "UNION_PTREE", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("IS_EMPTY", (Term.prim_mk_const { Name = "IS_EMPTY", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("IS_EMPTY", (Term.prim_mk_const { Name = "IS_EMPTY", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("FIND", (Term.prim_mk_const { Name = "FIND", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("FIND", (Term.prim_mk_const { Name = "FIND", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("ADD_LIST", (Term.prim_mk_const { Name = "ADD_LIST", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("ADD_LIST", (Term.prim_mk_const { Name = "ADD_LIST", Thy = "patricia"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("|++", (Term.prim_mk_const { Name = "ADD_LIST", Thy = "patricia"}))
  val patricia_grammars = Parse.current_lgrms()
  end


  val _ =
    TypeBase.write [
      let
        open TypeBasePure
        val tyinfo0 = mk_datatype_info
          {ax=ORIG ptree_Axiom,
           case_def=ptree_case_def,
           case_cong=ptree_case_cong,
           induction=ORIG ptree_induction,
           nchotomy=ptree_nchotomy,
           size=SOME(Parse.Term`(patricia$ptree_size) :('a -> (num$num)) -> ('a patricia$ptree) -> (num$num)`,
                     ORIG ptree_size_def),
           encode = NONE,
           lift=NONE,
           one_one=SOME ptree_11,
           distinct=SOME ptree_distinct,
           fields=let fun T t s A = mk_thy_type{Thy=t,Tyop=s,Args=A}
    val U = mk_vartype
in
[] end,
           accessors=[],
           updates=[],
           recognizers=[],
           destructors=[]}
        val tyinfo0 = tyinfo0
        val () = computeLib.write_datatype_info tyinfo0
      in
        tyinfo0
      end
    ];
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "patricia",
    thydataty = "simp",
    data =
        "patricia.EMPTY_IS_PTREE patricia.FINITE_NUMSET_OF_PTREE patricia.UNION_PTREE_IS_PTREE patricia.PTREE_OF_NUMSET_EMPTY patricia.NUMSET_OF_PTREE_EMPTY patricia.IN_PTREE_EMPTY patricia.ADD_INSERT patricia.INSERT_PTREE_IS_PTREE patricia.PTREE_OF_NUMSET_IS_PTREE patricia.ALL_DISTINCT_TRAVERSE patricia.PTREE_OF_NUMSET_IS_PTREE_EMPTY patricia.REMOVE_ADD_EQ patricia.ADD_LIST_IS_PTREE patricia.REMOVE_REMOVE patricia.ADD_ADD patricia.REMOVE_IS_PTREE patricia.TRANSFORM_IS_PTREE patricia.ADD_IS_PTREE"
  }
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "patricia",
    thydataty = "compute",
    data =
        "patricia.TRAVERSE_AUX_def patricia.UNION_PTREE_def patricia.PTREE_OF_NUMSET_EMPTY patricia.ADD_INSERT patricia.TRAVERSE_AUX pred_set.FINITE_DELETE pred_set.FINITE_UNION pred_set.FINITE_INSERT pred_set.FINITE_EMPTY patricia.DELETE_UNION pred_set.DELETE_INSERT pred_set.EMPTY_DELETE list.LIST_TO_SET_THM patricia.SIZE patricia.ADD_LIST_def patricia.FIND_def patricia.IS_EMPTY_def patricia.KEYS_def patricia.NUMSET_OF_PTREE_def"
  }

val _ = if !Globals.print_thy_loads then print "done\n" else ()
val _ = Theory.load_complete "patricia"
end
