structure sptreeTheory :> sptreeTheory =
struct
  val _ = if !Globals.print_thy_loads then print "Loading sptreeTheory ... " else ()
  open Type Term Thm
  infixr -->

  fun C s t ty = mk_thy_const{Name=s,Thy=t,Ty=ty}
  fun T s t A = mk_thy_type{Tyop=s, Thy=t,Args=A}
  fun V s q = mk_var(s,q)
  val U     = mk_vartype
  (*  Parents *)
  local open alistTheory logrootTheory
  in end;
  val _ = Theory.link_parents
          ("sptree",
          Arbnum.fromString "1488588548",
          Arbnum.fromString "68722")
          [("logroot",
           Arbnum.fromString "1488586117",
           Arbnum.fromString "342994"),
           ("alist",
           Arbnum.fromString "1488586983",
           Arbnum.fromString "780164")];
  val _ = Theory.incorporate_types "sptree" [("spt", 1)];

  val idvector = 
    let fun ID(thy,oth) = {Thy = thy, Other = oth}
    in Vector.fromList
  [ID("min", "fun"), ID("min", "bool"), ID("sptree", "spt"),
   ID("list", "list"), ID("pair", "prod"), ID("num", "num"),
   ID("option", "option"), ID("ind_type", "recspace"), ID("bool", "!"),
   ID("arithmetic", "*"), ID("arithmetic", "+"), ID("pair", ","),
   ID("arithmetic", "-"), ID("bool", "/\\"), ID("num", "0"),
   ID("prim_rec", "<"), ID("min", "="), ID("min", "==>"), ID("bool", "?"),
   ID("min", "@"), ID("list", "ALL_DISTINCT"), ID("alist", "ALOOKUP"),
   ID("list", "APPEND"), ID("bool", "ARB"), ID("arithmetic", "BIT1"),
   ID("arithmetic", "BIT2"), ID("sptree", "BN"), ID("ind_type", "BOTTOM"),
   ID("sptree", "BS"), ID("bool", "COND"), ID("list", "CONS"),
   ID("ind_type", "CONSTR"), ID("bool", "DATATYPE"),
   ID("pred_set", "DELETE"), ID("arithmetic", "DIV"), ID("list", "EL"),
   ID("pred_set", "EMPTY"), ID("arithmetic", "EVEN"),
   ID("ind_type", "FCONS"), ID("pred_set", "FINITE"), ID("list", "FOLDL"),
   ID("list", "FOLDR"), ID("pair", "FST"), ID("combin", "I"),
   ID("pred_set", "IMAGE"), ID("bool", "IN"), ID("pred_set", "INSERT"),
   ID("pred_set", "INTER"), ID("list", "LENGTH"), ID("bool", "LET"),
   ID("list", "LIST_TO_SET"), ID("sptree", "LN"), ID("sptree", "LS"),
   ID("list", "MAP"), ID("list", "NIL"), ID("option", "NONE"),
   ID("arithmetic", "NUMERAL"), ID("option", "OPTION_MAP"),
   ID("pair", "SND"), ID("option", "SOME"), ID("num", "SUC"),
   ID("bool", "T"), ID("bool", "TYPE_DEFINITION"), ID("pair", "UNCURRY"),
   ID("pred_set", "UNION"), ID("relation", "WF"), ID("relation", "WFREC"),
   ID("arithmetic", "ZERO"), ID("bool", "\\/"), ID("pred_set", "count"),
   ID("sptree", "delete"), ID("sptree", "difference"),
   ID("sptree", "domain"), ID("sptree", "foldi"),
   ID("sptree", "fromAList"), ID("sptree", "fromList"),
   ID("sptree", "insert"), ID("sptree", "insert_tupled"),
   ID("sptree", "inter"), ID("sptree", "inter_eq"),
   ID("list", "list_CASE"), ID("sptree", "lookup"),
   ID("sptree", "lookup_tupled"), ID("sptree", "lrnext"),
   ID("sptree", "map"), ID("sptree", "mk_BN"),
   ID("sptree", "mk_BN_tupled"), ID("sptree", "mk_BS"),
   ID("sptree", "mk_BS_tupled"), ID("sptree", "mk_wf"),
   ID("option", "option_CASE"), ID("pair", "pair_CASE"),
   ID("sptree", "size"), ID("sptree", "spt_CASE"),
   ID("sptree", "spt_size"), ID("sptree", "toAList"),
   ID("sptree", "toList"), ID("sptree", "toListA"), ID("sptree", "union"),
   ID("sptree", "wf"), ID("bool", "~")]
  end;
  local open SharingTables
  in
  val tyvector = build_type_vector idvector
  [TYOP [1], TYV "'a", TYOP [2, 1], TYOP [0, 2, 0], TYOP [0, 2, 2],
   TYOP [0, 2, 4], TYOP [3, 1], TYOP [0, 2, 6], TYOP [0, 6, 7], TYOP [5],
   TYOP [4, 9, 1], TYOP [3, 10], TYOP [0, 2, 11], TYOP [0, 2, 9],
   TYOP [0, 1, 9], TYOP [0, 14, 13], TYV "'b", TYOP [0, 2, 16],
   TYOP [0, 1, 17], TYOP [0, 2, 18], TYOP [0, 19, 16], TYOP [0, 2, 17],
   TYOP [0, 21, 20], TYOP [0, 1, 16], TYOP [0, 23, 22], TYOP [0, 16, 24],
   TYOP [0, 2, 25], TYOP [4, 1, 2], TYOP [4, 2, 27], TYOP [0, 28, 2],
   TYOP [0, 1, 4], TYOP [0, 2, 30], TYOP [4, 2, 2], TYOP [0, 32, 2],
   TYOP [2, 16], TYOP [0, 34, 2], TYOP [0, 16, 1], TYOP [0, 36, 35],
   TYOP [0, 9, 9], TYOP [6, 1], TYOP [4, 9, 2], TYOP [0, 40, 39],
   TYOP [0, 2, 39], TYOP [0, 9, 42], TYOP [0, 2, 35], TYOP [4, 9, 27],
   TYOP [0, 45, 2], TYOP [0, 9, 30], TYOP [0, 6, 2], TYOP [0, 11, 2],
   TYOP [0, 34, 1], TYOP [0, 1, 50], TYOP [0, 9, 51], TYOP [0, 1, 1],
   TYOP [0, 16, 53], TYOP [0, 9, 54], TYOP [0, 55, 52], TYOP [0, 9, 0],
   TYOP [0, 2, 57], TYOP [0, 9, 4], TYOP [0, 1, 2], TYOP [7, 1],
   TYOP [0, 61, 0], TYOP [0, 11, 0], TYOP [0, 1, 3], TYOP [0, 9, 64],
   TYOP [0, 9, 3], TYOP [0, 2, 64], TYOP [0, 2, 3], TYOP [0, 11, 63],
   TYOP [0, 9, 57], TYOP [0, 45, 0], TYOP [0, 45, 71], TYOP [0, 40, 0],
   TYOP [0, 40, 73], TYOP [0, 28, 0], TYOP [0, 28, 75], TYOP [0, 32, 0],
   TYOP [0, 32, 77], TYOP [0, 16, 16], TYOP [0, 1, 79], TYOP [0, 9, 80],
   TYOP [0, 16, 79], TYOP [0, 2, 82], TYOP [0, 2, 83], TYOP [0, 1, 84],
   TYOP [0, 2, 61], TYOP [0, 31, 0], TYOP [0, 5, 87], TYOP [0, 60, 88],
   TYOP [0, 2, 89], TYV "'c", TYOP [2, 91], TYOP [6, 16], TYOP [0, 1, 0],
   TYOP [0, 94, 0], TYOP [0, 16, 0], TYOP [0, 96, 0], TYOP [0, 23, 0],
   TYOP [0, 98, 0], TYOP [0, 85, 0], TYOP [0, 100, 0], TYOP [0, 14, 0],
   TYOP [0, 102, 0], TYOP [0, 36, 0], TYOP [0, 104, 0], TYOP [0, 63, 0],
   TYOP [0, 106, 0], TYOP [0, 57, 0], TYOP [0, 108, 0], TYOP [0, 81, 0],
   TYOP [0, 110, 0], TYOP [0, 65, 0], TYOP [0, 112, 0], TYOP [0, 55, 0],
   TYOP [0, 114, 0], TYOP [0, 66, 0], TYOP [0, 116, 0], TYOP [0, 62, 0],
   TYOP [0, 118, 0], TYOP [0, 3, 0], TYOP [0, 120, 0], TYOP [0, 19, 0],
   TYOP [0, 122, 0], TYOP [0, 67, 0], TYOP [0, 124, 0], TYOP [0, 21, 0],
   TYOP [0, 126, 0], TYOP [0, 68, 0], TYOP [0, 128, 0], TYOP [0, 84, 0],
   TYOP [0, 130, 0], TYOP [0, 6, 0], TYOP [0, 132, 0], TYOP [0, 34, 0],
   TYOP [0, 134, 0], TYOP [0, 92, 0], TYOP [0, 136, 0], TYOP [0, 9, 38],
   TYOP [0, 2, 27], TYOP [0, 1, 139], TYOP [0, 1, 10], TYOP [0, 9, 141],
   TYOP [0, 27, 45], TYOP [0, 9, 143], TYOP [0, 2, 40], TYOP [0, 9, 145],
   TYOP [4, 39, 93], TYOP [0, 93, 147], TYOP [0, 39, 148],
   TYOP [0, 27, 28], TYOP [0, 2, 150], TYOP [0, 2, 32], TYOP [0, 2, 152],
   TYOP [0, 0, 0], TYOP [0, 0, 154], TYOP [0, 1, 94], TYOP [0, 16, 96],
   TYOP [0, 49, 0], TYOP [0, 49, 158], TYOP [0, 57, 108], TYOP [0, 38, 0],
   TYOP [0, 38, 161], TYOP [0, 46, 0], TYOP [0, 46, 163], TYOP [0, 41, 0],
   TYOP [0, 41, 165], TYOP [0, 29, 0], TYOP [0, 29, 167], TYOP [0, 33, 0],
   TYOP [0, 33, 169], TYOP [0, 12, 0], TYOP [0, 12, 171], TYOP [0, 6, 132],
   TYOP [3, 16], TYOP [0, 174, 0], TYOP [0, 174, 175], TYOP [0, 39, 0],
   TYOP [0, 39, 177], TYOP [0, 93, 0], TYOP [0, 93, 179], TYOP [0, 61, 62],
   TYOP [0, 34, 134], TYOP [0, 92, 136], TYOP [0, 17, 0], TYOP [0, 184, 0],
   TYOP [0, 86, 0], TYOP [0, 186, 0], TYOP [0, 69, 0], TYOP [0, 188, 69],
   TYOP [0, 70, 0], TYOP [0, 190, 70], TYOP [0, 72, 0], TYOP [0, 192, 72],
   TYOP [0, 74, 0], TYOP [0, 194, 74], TYOP [0, 76, 0], TYOP [0, 196, 76],
   TYOP [0, 78, 0], TYOP [0, 198, 78], TYOP [3, 9], TYOP [0, 200, 0],
   TYOP [0, 9, 39], TYOP [0, 11, 202], TYOP [0, 6, 6], TYOP [0, 6, 204],
   TYOP [0, 34, 34], TYOP [0, 34, 206], TYOP [0, 16, 206],
   TYOP [0, 34, 208], TYOP [0, 0, 138], TYOP [0, 39, 39],
   TYOP [0, 39, 211], TYOP [0, 0, 212], TYOP [0, 0, 5], TYOP [0, 1, 204],
   TYOP [0, 11, 11], TYOP [0, 10, 216], TYOP [0, 9, 61], TYOP [0, 218, 61],
   TYOP [0, 1, 219], TYOP [0, 9, 220], TYOP [0, 57, 70], TYOP [0, 6, 1],
   TYOP [0, 9, 223], TYOP [0, 218, 218], TYOP [0, 61, 225],
   TYOP [0, 6, 40], TYOP [0, 40, 227], TYOP [0, 1, 40], TYOP [0, 40, 229],
   TYOP [0, 230, 228], TYOP [0, 11, 16], TYOP [0, 16, 232],
   TYOP [0, 10, 79], TYOP [0, 234, 233], TYOP [0, 10, 9], TYOP [0, 57, 57],
   TYOP [0, 38, 237], TYOP [0, 1, 95], TYOP [0, 9, 108], TYOP [0, 10, 0],
   TYOP [0, 241, 0], TYOP [0, 10, 242], TYOP [0, 9, 237],
   TYOP [0, 57, 237], TYOP [0, 6, 9], TYOP [0, 9, 1], TYOP [0, 247, 247],
   TYOP [0, 6, 94], TYOP [0, 200, 57], TYOP [0, 11, 241], TYOP [0, 16, 34],
   TYOP [0, 6, 174], TYOP [0, 23, 253], TYOP [0, 11, 200],
   TYOP [0, 236, 255], TYOP [0, 39, 93], TYOP [0, 23, 257],
   TYOP [0, 40, 2], TYOP [0, 1, 39], TYOP [0, 62, 186], TYOP [0, 81, 234],
   TYOP [0, 2, 229], TYOP [0, 9, 263], TYOP [0, 264, 230],
   TYOP [0, 49, 49], TYOP [0, 266, 49], TYOP [0, 69, 267],
   TYOP [0, 38, 38], TYOP [0, 269, 38], TYOP [0, 70, 270],
   TYOP [0, 46, 46], TYOP [0, 272, 46], TYOP [0, 72, 273],
   TYOP [0, 41, 41], TYOP [0, 275, 41], TYOP [0, 74, 276],
   TYOP [0, 29, 29], TYOP [0, 278, 29], TYOP [0, 76, 279],
   TYOP [0, 33, 33], TYOP [0, 281, 33], TYOP [0, 78, 282],
   TYOP [0, 34, 57], TYOP [0, 16, 17], TYOP [0, 9, 285], TYOP [0, 81, 286],
   TYOP [0, 57, 58], TYOP [0, 9, 288], TYOP [0, 1, 237], TYOP [0, 9, 290],
   TYOP [0, 291, 289], TYOP [0, 11, 12], TYOP [0, 9, 293],
   TYOP [0, 1, 216], TYOP [0, 9, 295], TYOP [0, 296, 294], TYOP [0, 92, 2],
   TYOP [0, 2, 298], TYOP [0, 92, 34], TYOP [0, 34, 300], TYOP [0, 2, 92],
   TYOP [0, 92, 302], TYOP [0, 10, 49], TYOP [0, 304, 2], TYOP [0, 2, 305],
   TYOP [0, 11, 306], TYOP [0, 34, 93], TYOP [0, 9, 308], TYOP [0, 2, 34],
   TYOP [0, 23, 310], TYOP [0, 260, 39], TYOP [0, 39, 312],
   TYOP [0, 39, 313], TYOP [0, 16, 39], TYOP [0, 315, 39],
   TYOP [0, 39, 316], TYOP [0, 93, 317], TYOP [0, 30, 2],
   TYOP [0, 27, 319], TYOP [0, 9, 60], TYOP [0, 321, 2], TYOP [0, 10, 322],
   TYOP [0, 27, 2], TYOP [0, 9, 324], TYOP [0, 325, 2], TYOP [0, 45, 326],
   TYOP [0, 43, 39], TYOP [0, 40, 328], TYOP [0, 93, 39],
   TYOP [0, 39, 330], TYOP [0, 331, 39], TYOP [0, 147, 332],
   TYOP [0, 2, 324], TYOP [0, 334, 2], TYOP [0, 28, 335], TYOP [0, 5, 2],
   TYOP [0, 32, 337], TYOP [0, 1, 42], TYOP [0, 2, 339], TYOP [0, 340, 39],
   TYOP [0, 2, 42], TYOP [0, 342, 341], TYOP [0, 260, 343],
   TYOP [0, 39, 344], TYOP [0, 2, 345], TYOP [0, 31, 2], TYOP [0, 5, 347],
   TYOP [0, 60, 348], TYOP [0, 2, 349], TYOP [0, 2, 350], TYOP [0, 16, 35],
   TYOP [0, 34, 352], TYOP [0, 353, 2], TYOP [0, 34, 35],
   TYOP [0, 355, 354], TYOP [0, 16, 2], TYOP [0, 357, 356],
   TYOP [0, 2, 358], TYOP [0, 34, 359], TYOP [0, 34, 174]]
  end
  val _ = Theory.incorporate_consts "sptree" tyvector
     [("wf", 3), ("union", 5), ("toListA", 8), ("toList", 7),
      ("toAList", 12), ("spt_size", 15), ("spt_CASE", 26), ("size", 13),
      ("mk_wf", 4), ("mk_BS_tupled", 29), ("mk_BS", 31),
      ("mk_BN_tupled", 33), ("mk_BN", 5), ("map", 37), ("lrnext", 38),
      ("lookup_tupled", 41), ("lookup", 43), ("inter_eq", 5),
      ("inter", 44), ("insert_tupled", 46), ("insert", 47),
      ("fromList", 48), ("fromAList", 49), ("foldi", 56), ("domain", 58),
      ("difference", 44), ("delete", 59), ("LS", 60), ("LN", 2),
      ("BS", 31), ("BN", 5)];

  local open SharingTables
  in
  val tmvector = build_term_vector idvector tyvector
  [TMV("'spt'", 62), TMV("M", 2), TMV("M'", 2), TMV("P", 63), TMV("P", 57),
   TMV("P", 65), TMV("P", 66), TMV("P", 3), TMV("P", 67), TMV("P", 68),
   TMV("R", 69), TMV("R", 70), TMV("R", 72), TMV("R", 74), TMV("R", 76),
   TMV("R", 78), TMV("a", 1), TMV("a", 16), TMV("a", 57), TMV("a", 11),
   TMV("a", 28), TMV("a", 32), TMV("a'", 1), TMV("a'", 16), TMV("a'", 40),
   TMV("a''", 1), TMV("a''", 16), TMV("a''", 45), TMV("a'''", 1),
   TMV("a'''", 16), TMV("a0", 61), TMV("a0", 2), TMV("a0'", 61),
   TMV("a0'", 2), TMV("a1", 1), TMV("a1", 61), TMV("a1", 2), TMV("a1'", 1),
   TMV("a1'", 2), TMV("a2", 61), TMV("a2", 2), TMV("a2'", 2),
   TMV("acc", 1), TMV("acc", 6), TMV("b", 1), TMV("b", 16), TMV("b'", 1),
   TMV("b'", 16), TMV("f", 23), TMV("f", 14), TMV("f", 36), TMV("f", 81),
   TMV("f", 55), TMV("f'", 23), TMV("f0", 16), TMV("f1", 23),
   TMV("f1", 21), TMV("f1'", 21), TMV("f2", 19), TMV("f2", 84),
   TMV("f2'", 19), TMV("f3", 85), TMV("fn", 17), TMV("fromAList", 49),
   TMV("i", 9), TMV("inc", 9), TMV("insert_tupled", 46), TMV("k", 9),
   TMV("k1", 9), TMV("k2", 9), TMV("l", 6), TMV("lookup_tupled", 41),
   TMV("lrnext", 38), TMV("ls", 11), TMV("m", 2), TMV("m1", 2),
   TMV("m2", 2), TMV("m2", 34), TMV("mk_BN_tupled", 33),
   TMV("mk_BS_tupled", 29), TMV("n", 9), TMV("rep", 86), TMV("s", 2),
   TMV("s0", 2), TMV("spt", 90), TMV("ss", 2), TMV("t", 2), TMV("t", 34),
   TMV("t1", 2), TMV("t1", 34), TMV("t1'", 2), TMV("t1'", 34),
   TMV("t1''", 2), TMV("t1''", 34), TMV("t2", 2), TMV("t2", 34),
   TMV("t2'", 2), TMV("t2'", 34), TMV("t2''", 2), TMV("t2''", 34),
   TMV("t3", 2), TMV("t3", 92), TMV("t4", 92), TMV("v", 1), TMV("v", 16),
   TMV("v", 11), TMV("v", 9), TMV("v", 10), TMV("v", 2), TMV("v'", 16),
   TMV("v0", 1), TMV("v1", 1), TMV("v1", 27), TMV("v1", 2), TMV("v10", 1),
   TMV("v10", 2), TMV("v11", 2), TMV("v12", 1), TMV("v12", 2),
   TMV("v13", 2), TMV("v14", 1), TMV("v15", 2), TMV("v16", 1),
   TMV("v16", 2), TMV("v17", 2), TMV("v18", 1), TMV("v18", 2),
   TMV("v19", 2), TMV("v2", 1), TMV("v2", 2), TMV("v20", 1), TMV("v21", 2),
   TMV("v22", 1), TMV("v22", 2), TMV("v23", 2), TMV("v24", 1),
   TMV("v24", 2), TMV("v25", 2), TMV("v26", 1), TMV("v27", 2),
   TMV("v3", 39), TMV("v3", 2), TMV("v4", 1), TMV("v4", 16), TMV("v4", 93),
   TMV("v4", 2), TMV("v5", 2), TMV("v6", 1), TMV("v6", 2), TMV("v7", 2),
   TMV("v8", 1), TMV("v9", 2), TMV("w", 16), TMV("x", 1), TMV("x", 9),
   TMV("x", 2), TMV("x1", 1), TMV("x1", 2), TMV("x2", 2), TMV("xs", 11),
   TMV("y", 1), TMC(8, 95), TMC(8, 97), TMC(8, 99), TMC(8, 101),
   TMC(8, 103), TMC(8, 105), TMC(8, 107), TMC(8, 109), TMC(8, 111),
   TMC(8, 113), TMC(8, 115), TMC(8, 117), TMC(8, 119), TMC(8, 121),
   TMC(8, 123), TMC(8, 125), TMC(8, 127), TMC(8, 129), TMC(8, 131),
   TMC(8, 133), TMC(8, 106), TMC(8, 108), TMC(8, 118), TMC(8, 120),
   TMC(8, 135), TMC(8, 137), TMC(9, 138), TMC(10, 138), TMC(11, 140),
   TMC(11, 142), TMC(11, 144), TMC(11, 146), TMC(11, 149), TMC(11, 151),
   TMC(11, 153), TMC(12, 138), TMC(13, 155), TMC(14, 9), TMC(15, 70),
   TMC(16, 156), TMC(16, 157), TMC(16, 155), TMC(16, 159), TMC(16, 160),
   TMC(16, 162), TMC(16, 164), TMC(16, 166), TMC(16, 168), TMC(16, 170),
   TMC(16, 172), TMC(16, 173), TMC(16, 176), TMC(16, 70), TMC(16, 178),
   TMC(16, 180), TMC(16, 181), TMC(16, 68), TMC(16, 182), TMC(16, 183),
   TMC(17, 155), TMC(18, 95), TMC(18, 185), TMC(18, 187), TMC(18, 108),
   TMC(18, 118), TMC(18, 120), TMC(19, 189), TMC(19, 191), TMC(19, 193),
   TMC(19, 195), TMC(19, 197), TMC(19, 199), TMC(20, 201), TMC(21, 203),
   TMC(22, 205), TMC(23, 1), TMC(24, 38), TMC(25, 38), TMC(26, 5),
   TMC(26, 207), TMC(27, 61), TMC(28, 31), TMC(28, 209), TMC(29, 210),
   TMC(29, 213), TMC(29, 214), TMC(30, 215), TMC(30, 217), TMC(31, 221),
   TMC(32, 154), TMC(33, 222), TMC(34, 138), TMC(35, 224), TMC(36, 57),
   TMC(37, 57), TMC(38, 226), TMC(39, 108), TMC(40, 231), TMC(41, 235),
   TMC(42, 236), TMC(43, 38), TMC(43, 211), TMC(43, 4), TMC(44, 238),
   TMC(45, 239), TMC(45, 240), TMC(45, 243), TMC(46, 244), TMC(47, 245),
   TMC(48, 246), TMC(49, 248), TMC(50, 249), TMC(50, 250), TMC(50, 251),
   TMC(51, 2), TMC(51, 34), TMC(51, 92), TMC(52, 60), TMC(52, 252),
   TMC(53, 254), TMC(53, 256), TMC(54, 6), TMC(54, 11), TMC(55, 39),
   TMC(55, 93), TMC(56, 38), TMC(57, 258), TMC(58, 259), TMC(59, 260),
   TMC(60, 38), TMC(61, 0), TMC(62, 261), TMC(63, 262), TMC(63, 265),
   TMC(64, 245), TMC(65, 188), TMC(65, 190), TMC(65, 192), TMC(65, 194),
   TMC(65, 196), TMC(65, 198), TMC(66, 268), TMC(66, 271), TMC(66, 274),
   TMC(66, 277), TMC(66, 280), TMC(66, 283), TMC(67, 9), TMC(68, 155),
   TMC(69, 70), TMC(70, 59), TMC(71, 44), TMC(72, 58), TMC(72, 284),
   TMC(73, 287), TMC(73, 292), TMC(73, 297), TMC(73, 56), TMC(74, 49),
   TMC(75, 48), TMC(76, 47), TMC(77, 46), TMC(78, 44), TMC(78, 299),
   TMC(78, 301), TMC(78, 303), TMC(79, 5), TMC(80, 307), TMC(81, 43),
   TMC(81, 309), TMC(82, 41), TMC(83, 38), TMC(84, 311), TMC(84, 37),
   TMC(85, 5), TMC(86, 33), TMC(87, 31), TMC(88, 29), TMC(89, 4),
   TMC(89, 206), TMC(90, 314), TMC(90, 318), TMC(91, 320), TMC(91, 323),
   TMC(91, 327), TMC(91, 329), TMC(91, 333), TMC(91, 336), TMC(91, 338),
   TMC(92, 13), TMC(93, 26), TMC(93, 346), TMC(93, 351), TMC(93, 360),
   TMC(94, 15), TMC(95, 12), TMC(96, 7), TMC(96, 361), TMC(97, 8),
   TMC(98, 5), TMC(99, 3), TMC(99, 134), TMC(100, 154)]
  end
  local
  val DT = Thm.disk_thm val read = Term.read_raw tmvector
  in
  fun op spt_TY_DEF x = x
    val op spt_TY_DEF =
    DT(((("sptree",0),[("bool",[14,25,26,53,132,133,138])]),["DISK_THM"]),
       [read"%223%81%292%32%173%0%220%183%32%220%309%216$0@%249%198@%236@%80%241|@@@%309%221%16%216$1@%16%249%290%198@@$0@%80%241|@|$0@@|@@%309%225%30%225%35%197%216$2@%30%35%249%290%290%198@@@%236@%256$1@%256$0@%80%241|@@@||$1@$0@@@%197$3$1@@$3$0@@@|@|@@%225%30%221%34%225%39%197%216$3@%30%34%39%249%290%290%290%198@@@@$1@%256$2@%256$0@%80%241|@@@|||$2@$1@$0@@@%197$4$2@@$4$0@@@|@|@|@@@@@$1$0@@|@@$0$1@@|@|@$0@|@"])
  fun op spt_case_def x = x
    val op spt_case_def =
    DT(((("sptree",10),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%197%162%104%163%48%177%56%175%58%201%351%275@$3@$2@$1@$0@@$3@|@|@|@|@@%197%161%16%162%104%163%48%177%56%175%58%201%351%278$4@@$3@$2@$1@$0@@$2$4@@|@|@|@|@|@@%197%184%31%184%36%162%104%163%48%177%56%175%58%201%351%239$5@$4@@$3@$2@$1@$0@@$1$5@$4@@|@|@|@|@|@|@@%184%31%161%34%184%40%162%104%163%48%177%56%175%58%201%351%242$6@$5@$4@@$3@$2@$1@$0@@$0$6@$5@$4@@|@|@|@|@|@|@|@@@@"])
  fun op spt_size_def x = x
    val op spt_size_def =
    DT(((("sptree",11),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%197%165%49%213%355$0@%275@@%198@|@@%197%165%49%161%16%213%355$1@%278$0@@@%188%286%237%308@@@$1$0@@@|@|@@%197%165%49%184%31%184%36%213%355$2@%239$1@$0@@@%188%286%237%308@@@%188%355$2@$1@@%355$2@$0@@@@|@|@|@@%165%49%184%31%161%34%184%40%213%355$3@%242$2@$1@$0@@@%188%286%237%308@@@%188%355$3@$2@@%188$3$1@@%355$3@$0@@@@@|@|@|@|@@@@"])
  fun op wf_def x = x
    val op wf_def =
    DT(((("sptree",19),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%197%202%361%275@@%291@@%197%161%16%202%361%278$0@@@%291@|@@%197%184%88%184%94%202%361%239$1@$0@@@%197%361$1@@%197%361$0@@%363%197%217$1@%275@@%217$0@%275@@@@@@|@|@@%184%88%161%16%184%94%202%361%242$2@$1@$0@@@%197%361$2@@%197%361$0@@%363%197%217$2@%275@@%217$0@%275@@@@@@|@|@|@@@@"])
  fun op lookup_tupled_primitive_def x = x
    val op lookup_tupled_primitive_def =
    DT(((("sptree",20),[]),[]),
       [read"%207%331@%305%230%13%197%299$0@@%197%184%94%184%88%182%67%220%363%213$0@%198@@@$3%192%252%196$0@%286%237%308@@@@%286%238%308@@@@%246%255$0@@$1@$2@@@%192$0@%239$1@$2@@@@|@|@|@@%161%16%184%94%184%88%182%67%220%363%213$0@%198@@@$4%192%252%196$0@%286%237%308@@@@%286%238%308@@@@%246%255$0@@$1@$2@@@%192$0@%242$1@$3@$2@@@@|@|@|@|@@@|@@%71%24%346$0@%67%113%352$0@%262%284@@%16%262%245%213$2@%198@@%289$0@@%284@@|@%88%94%262%245%213$3@%198@@%284@$5%192%252%196$3@%286%237%308@@@@%286%238%308@@@@%246%255$3@@$1@$0@@@@@||@%90%25%96%262%245%213$4@%198@@%289$1@@$6%192%252%196$4@%286%237%308@@@@%286%238%308@@@@%246%255$4@@$2@$0@@@@@|||@||@||@@"])
  fun op lookup_curried_def x = x
    val op lookup_curried_def =
    DT(((("sptree",21),[]),[]),
       [read"%182%154%184%157%214%329$1@$0@@%331%192$1@$0@@@|@|@"])
  fun op insert_tupled_primitive_def x = x
    val op insert_tupled_primitive_def =
    DT(((("sptree",24),[]),[]),
       [read"%206%322@%304%229%12%197%298$0@@%197%161%16%182%67%220%197%363%213$0@%198@@@%363%255$0@@@@$2%191%252%196$0@%286%237%308@@@@%286%238%308@@@@%189$1@%275@@@%191$0@%189$1@%275@@@@|@|@@%197%161%16%182%67%220%197%363%213$0@%198@@@%255$0@@@$2%191%252%196$0@%286%237%308@@@@%286%238%308@@@@%189$1@%275@@@%191$0@%189$1@%275@@@@|@|@@%197%161%22%161%16%182%67%220%197%363%213$0@%198@@@%363%255$0@@@@$3%191%252%196$0@%286%237%308@@@@%286%238%308@@@@%189$1@%275@@@%191$0@%189$1@%278$2@@@@@|@|@|@@%197%161%22%161%16%182%67%220%197%363%213$0@%198@@@%255$0@@@$3%191%252%196$0@%286%237%308@@@@%286%238%308@@@@%189$1@%275@@@%191$0@%189$1@%278$2@@@@@|@|@|@@%197%184%88%184%94%161%16%182%67%220%197%363%213$0@%198@@@%363%255$0@@@@$4%191%252%196$0@%286%237%308@@@@%286%238%308@@@@%189$1@$2@@@%191$0@%189$1@%239$3@$2@@@@@|@|@|@|@@%197%184%94%184%88%161%16%182%67%220%197%363%213$0@%198@@@%255$0@@@$4%191%252%196$0@%286%237%308@@@@%286%238%308@@@@%189$1@$2@@@%191$0@%189$1@%239$2@$3@@@@@|@|@|@|@@%197%184%94%161%22%184%88%161%16%182%67%220%197%363%213$0@%198@@@%255$0@@@$5%191%252%196$0@%286%237%308@@@@%286%238%308@@@@%189$1@$2@@@%191$0@%189$1@%242$2@$3@$4@@@@@|@|@|@|@|@@%161%22%184%88%184%94%161%16%182%67%220%197%363%213$0@%198@@@%363%255$0@@@@$5%191%252%196$0@%286%237%308@@@@%286%238%308@@@@%189$1@$2@@@%191$0@%189$1@%242$3@$4@$2@@@@@|@|@|@|@|@@@@@@@@@|@@%66%27%345$0@%67%112%343$0@%16%141%353$0@%263%246%213$3@%198@@%278$1@@%246%255$3@@%239$5%191%252%196$3@%286%237%308@@@@%286%238%308@@@@%189$1@%275@@@@%275@@%239%275@$5%191%252%196$3@%286%237%308@@@@%286%238%308@@@@%189$1@%275@@@@@@@@%22%263%246%213$4@%198@@%278$2@@%246%255$4@@%242$6%191%252%196$4@%286%237%308@@@@%286%238%308@@@@%189$2@%275@@@@$0@%275@@%242%275@$0@$6%191%252%196$4@%286%237%308@@@@%286%238%308@@@@%189$2@%275@@@@@@@|@%88%94%263%246%213$5@%198@@%242$1@$3@$0@@%246%255$5@@%239$7%191%252%196$5@%286%237%308@@@@%286%238%308@@@@%189$3@$1@@@@$0@@%239$1@$7%191%252%196$5@%286%237%308@@@@%286%238%308@@@@%189$3@$0@@@@@@@||@%90%28%96%263%246%213$6@%198@@%242$2@$4@$0@@%246%255$6@@%242$8%191%252%196$6@%286%237%308@@@@%286%238%308@@@@%189$4@$2@@@@$1@$0@@%242$2@$1@$8%191%252%196$6@%286%237%308@@@@%286%238%308@@@@%189$4@$0@@@@@@@|||@||@||@||@@"])
  fun op insert_curried_def x = x
    val op insert_curried_def =
    DT(((("sptree",25),[]),[]),
       [read"%182%154%161%156%184%158%217%321$2@$1@$0@@%322%191$2@%189$1@$0@@@@|@|@|@"])
  fun op mk_BN_tupled_primitive_def x = x
    val op mk_BN_tupled_primitive_def =
    DT(((("sptree",28),[]),[]),
       [read"%209%336@%307%232%15%301$0@|@@%78%21%349$0@%108%113%353$1@%353$0@%263%275@@%130%263%239%275@%278$0@@@|@%131%133%263%239%275@%239$1@$0@@@||@%134%135%137%263%239%275@%242$2@$1@$0@@@|||@@%150%263%239%278$0@@$1@@|@%151%115%263%239%239$1@$0@@$2@@||@%116%117%119%263%239%242$2@$1@$0@@$3@@|||@||@||@@"])
  fun op mk_BN_curried_def x = x
    val op mk_BN_curried_def =
    DT(((("sptree",29),[]),[]),
       [read"%184%155%184%157%217%335$1@$0@@%336%195$1@$0@@@|@|@"])
  fun op mk_BS_tupled_primitive_def x = x
    val op mk_BS_tupled_primitive_def =
    DT(((("sptree",32),[]),[]),
       [read"%208%338@%306%231%14%300$0@|@@%79%20%348$0@%108%112%343$0@%153%141%353$0@%353$3@%263%278$1@@@%132%263%242%278$0@@$2@%275@@|@%134%136%263%242%239$1@$0@@$3@%275@@||@%137%138%139%263%242%242$2@$1@$0@@$4@%275@@|||@@%114%263%242$4@$2@%278$0@@@|@%116%118%263%242$5@$3@%239$1@$0@@@||@%119%120%121%263%242$6@$4@%242$2@$1@$0@@@|||@||@||@||@@"])
  fun op mk_BS_curried_def x = x
    val op mk_BS_curried_def =
    DT(((("sptree",33),[]),[]),
       [read"%184%155%161%156%184%158%217%337$2@$1@$0@@%338%194$2@%189$1@$0@@@@|@|@|@"])
  fun op delete_def x = x
    val op delete_def =
    DT(((("sptree",36),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%197%182%67%217%311$0@%275@@%275@|@@%197%182%67%161%16%217%311$1@%278$0@@@%246%213$1@%198@@%275@%278$0@@@|@|@@%197%182%67%184%88%184%94%217%311$2@%239$1@$0@@@%246%213$2@%198@@%239$1@$0@@%246%255$2@@%335%311%252%196$2@%286%237%308@@@@%286%238%308@@@@$1@@$0@@%335$1@%311%252%196$2@%286%237%308@@@@%286%238%308@@@@$0@@@@@|@|@|@@%182%67%184%88%161%16%184%94%217%311$3@%242$2@$1@$0@@@%246%213$3@%198@@%239$2@$0@@%246%255$3@@%337%311%252%196$3@%286%237%308@@@@%286%238%308@@@@$2@@$1@$0@@%337$2@$1@%311%252%196$3@%286%237%308@@@@%286%238%308@@@@$0@@@@@|@|@|@|@@@@"])
  fun op fromList_def x = x
    val op fromList_def =
    DT(((("sptree",37),[]),[]),
       [read"%180%70%217%320$0@@%288%258%294%64%86%16%192%188$2@%286%237%308@@@@%321$2@$0@$1@@|||@@%192%198@%275@@$0@@@|@"])
  fun op size_def x = x
    val op size_def =
    DT(((("sptree",38),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%197%213%350%275@@%198@@%197%161%16%213%350%278$0@@@%286%237%308@@@|@@%197%184%88%184%94%213%350%239$1@$0@@@%188%350$1@@%350$0@@@|@|@@%184%88%161%16%184%94%213%350%242$2@$1@$0@@@%188%188%350$2@@%350$0@@@%286%237%308@@@@|@|@|@@@@"])
  fun op union_def x = x
    val op union_def =
    DT(((("sptree",44),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%197%184%86%217%360%275@$0@@$0@|@@%197%161%16%184%86%217%360%278$1@@$0@@%353$0@%278$1@@%44%278$2@|@%88%94%242$1@$3@$0@||@%90%142%96%242$2@$4@$0@|||@@|@|@@%197%184%88%184%94%184%86%217%360%239$2@$1@@$0@@%353$0@%239$2@$1@@%16%242$3@$0@$2@|@%90%96%239%360$4@$1@@%360$3@$0@@||@%92%25%98%242%360$5@$2@@$1@%360$4@$0@@|||@@|@|@|@@%184%88%161%16%184%94%184%86%217%360%242$3@$2@$1@@$0@@%353$0@%242$3@$2@$1@@%22%242$4@$3@$2@|@%90%96%242%360$5@$1@@$4@%360$3@$0@@||@%92%28%98%242%360$6@$2@@$5@%360$4@$0@@|||@@|@|@|@|@@@@"])
  fun op inter_def x = x
    val op inter_def =
    DT(((("sptree",48),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%197%185%87%217%323%275@$0@@%275@|@@%197%161%16%185%87%217%323%278$1@@$0@@%354$0@%275@%45%278$2@|@%89%95%275||@%91%143%97%278$4@|||@@|@|@@%197%184%88%184%94%185%87%217%323%239$2@$1@@$0@@%354$0@%275@%17%275|@%91%97%335%323$4@$1@@%323$3@$0@@||@%93%26%99%335%323$5@$2@@%323$4@$0@@|||@@|@|@|@@%184%88%161%16%184%94%185%87%217%323%242$3@$2@$1@@$0@@%354$0@%275@%23%278$3@|@%91%97%335%323$5@$1@@%323$3@$0@@||@%93%29%99%337%323$6@$2@@$5@%323$4@$0@@|||@@|@|@|@|@@@@"])
  fun op inter_eq_def x = x
    val op inter_eq_def =
    DT(((("sptree",49),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%197%184%86%217%327%275@$0@@%275@|@@%197%161%16%184%86%217%327%278$1@@$0@@%353$0@%275@%44%246%200$2@$0@@%278$2@@%275@|@%88%94%275||@%90%46%96%246%200$4@$1@@%278$4@@%275@|||@@|@|@@%197%184%88%184%94%184%86%217%327%239$2@$1@@$0@@%353$0@%275@%16%275|@%90%96%335%327$4@$1@@%327$3@$0@@||@%92%25%98%335%327$5@$2@@%327$4@$0@@|||@@|@|@|@@%184%88%161%16%184%94%184%86%217%327%242$3@$2@$1@@$0@@%353$0@%275@%22%246%200$0@$3@@%278$3@@%275@|@%90%96%335%327$5@$1@@%327$3@$0@@||@%92%28%98%246%200$1@$5@@%337%327$6@$2@@$5@%327$4@$0@@@%335%327$6@$2@@%327$4@$0@@@|||@@|@|@|@|@@@@"])
  fun op difference_def x = x
    val op difference_def =
    DT(((("sptree",50),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%197%185%87%217%312%275@$0@@%275@|@@%197%161%16%185%87%217%312%278$1@@$0@@%354$0@%278$1@@%45%275|@%89%95%278$3@||@%91%47%97%275|||@@|@|@@%197%184%88%184%94%185%87%217%312%239$2@$1@@$0@@%354$0@%239$2@$1@@%17%239$3@$2@|@%91%97%335%312$4@$1@@%312$3@$0@@||@%93%26%99%335%312$5@$2@@%312$4@$0@@|||@@|@|@|@@%184%88%161%16%184%94%185%87%217%312%242$3@$2@$1@@$0@@%354$0@%242$3@$2@$1@@%23%239$4@$2@|@%91%97%337%312$5@$1@@$4@%312$3@$0@@||@%93%29%99%335%312$6@$2@@%312$4@$0@@|||@@|@|@|@|@@@@"])
  fun op lrnext_primitive_def x = x
    val op lrnext_primitive_def =
    DT(((("sptree",57),[]),[]),
       [read"%205%332@%303%228%11%197%297$0@@%182%80%220%363%213$0@%198@@@$1%252%196$0@%286%237%308@@@@%286%238%308@@@@$0@@|@@|@@%72%80%261%244%213$0@%198@@%286%237%308@@@%187%286%238%308@@@$1%252%196$0@%286%237%308@@@@%286%238%308@@@@@@@||@@"])
  fun op domain_def x = x
    val op domain_def =
    DT(((("sptree",61),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%197%204%313%275@@%254@@%197%161%110%204%313%278$0@@@%268%198@%254@@|@@%197%184%88%184%94%204%313%239$1@$0@@@%295%264%80%188%187%286%238%308@@@$0@@%286%238%308@@@|@%313$1@@@%264%80%188%187%286%238%308@@@$0@@%286%237%308@@@|@%313$0@@@@|@|@@%184%88%161%111%184%94%204%313%242$2@$1@$0@@@%295%295%268%198@%254@@%264%80%188%187%286%238%308@@@$0@@%286%238%308@@@|@%313$2@@@@%264%80%188%187%286%238%308@@@$0@@%286%237%308@@@|@%313$0@@@@|@|@|@@@@"])
  fun op foldi_def x = x
    val op foldi_def =
    DT(((("sptree",74),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%197%171%52%182%64%161%42%200%318$2@$1@$0@%276@@$0@|@|@|@@%197%171%52%182%64%161%42%162%17%200%318$3@$2@$1@%279$0@@@$3$2@$0@$1@@|@|@|@|@@%197%171%52%182%64%161%42%185%89%185%95%200%318$4@$3@$2@%240$1@$0@@@%271%65%318$5@%188$4@$0@@%318$5@%188$4@%187%286%238%308@@@$0@@@$3@$2@@$1@|@%332$3@@@|@|@|@|@|@@%171%52%182%64%161%42%185%89%162%17%185%95%200%318$5@$4@$3@%243$2@$1@$0@@@%271%65%318$6@%188$5@$0@@$6$5@$2@%318$6@%188$5@%187%286%238%308@@@$0@@@$4@$3@@@$1@|@%332$4@@@|@|@|@|@|@|@@@@"])
  fun op toAList_def x = x
    val op toAList_def =
    DT(((("sptree",77),[]),[]),
       [read"%210%356@%317%67%103%19%248%190$2@$1@@$0@|||@%198@%283@@"])
  fun op toListA_def x = x
    val op toListA_def =
    DT(((("sptree",84),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%197%180%43%211%359$0@%275@@$0@|@@%197%180%43%161%16%211%359$1@%278$0@@@%247$0@$1@@|@|@@%197%180%43%184%88%184%94%211%359$2@%239$1@$0@@@%359%359$2@$0@@$1@@|@|@|@@%180%43%184%88%161%16%184%94%211%359$3@%242$2@$1@$0@@@%359%247$1@%359$3@$0@@@$2@@|@|@|@|@@@@"])
  fun op toList_def x = x
    val op toList_def =
    DT(((("sptree",87),[]),[]), [read"%184%74%211%357$0@@%359%282@$0@@|@"])
  fun op mk_wf_def x = x
    val op mk_wf_def =
    DT(((("sptree",91),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%197%217%339%275@@%275@@%197%161%153%217%339%278$0@@@%278$0@@|@@%197%184%88%184%94%217%339%239$1@$0@@@%335%339$1@@%339$0@@@|@|@@%184%88%161%153%184%94%217%339%242$2@$1@$0@@@%337%339$2@@$1@%339$0@@@|@|@|@@@@"])
  fun op fromAList_primitive_def x = x
    val op fromAList_primitive_def =
    DT(((("sptree",109),[]),[]),
       [read"%203%319@%302%227%10%197%296$0@@%161%160%182%154%181%159$3$0@%248%190$1@$2@@$0@@|@|@|@@|@@%63%19%328$0@%263%275@@%107%159%344$1@%154%160%263%321$1@$0@$5$2@@@||@||@||@@"])
  fun op map_def x = x
    val op map_def =
    DT(((("sptree",117),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%197%166%50%217%334$0@%276@@%275@|@@%197%166%50%162%17%217%334$1@%279$0@@@%278$1$0@@@|@|@@%197%166%50%185%89%185%95%217%334$2@%240$1@$0@@@%239%334$2@$1@@%334$2@$0@@@|@|@|@@%166%50%185%89%162%17%185%95%217%334$3@%243$2@$1@$0@@@%242%334$3@$2@@$3$1@@%334$3@$0@@@|@|@|@|@@@@"])
  fun op datatype_spt x = x
    val op datatype_spt =
    DT(((("sptree",12),[("bool",[25,171])]),["DISK_THM"]),
       [read"%250%84%275@%278@%239@%242@@"])
  fun op spt_11 x = x
    val op spt_11 =
    DT(((("sptree",13),
        [("bool",[14,25,26,31,51,53,56,63,132,133,138,181]),
         ("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%197%161%16%161%22%202%217%278$1@@%278$0@@@%200$1@$0@@|@|@@%197%184%31%184%36%184%33%184%38%202%217%239$3@$2@@%239$1@$0@@@%197%217$3@$1@@%217$2@$0@@@|@|@|@|@@%184%31%161%34%184%40%184%33%161%37%184%41%202%217%242$5@$4@$3@@%242$2@$1@$0@@@%197%217$5@$2@@%197%200$4@$1@@%217$3@$0@@@@|@|@|@|@|@|@@@"])
  fun op spt_distinct x = x
    val op spt_distinct =
    DT(((("sptree",14),
        [("bool",[14,25,26,31,36,47,51,53,54,56,63,132,133,138,181]),
         ("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%197%161%16%363%217%275@%278$0@@@|@@%197%184%36%184%31%363%217%275@%239$0@$1@@@|@|@@%197%184%40%161%34%184%31%363%217%275@%242$0@$1@$2@@@|@|@|@@%197%184%36%184%31%161%16%363%217%278$0@@%239$1@$2@@@|@|@|@@%197%184%40%161%34%184%31%161%16%363%217%278$0@@%242$1@$2@$3@@@|@|@|@|@@%184%40%161%37%184%36%184%33%184%31%363%217%239$0@$2@@%242$1@$3@$4@@@|@|@|@|@|@@@@@@"])
  fun op spt_case_cong x = x
    val op spt_case_cong =
    DT(((("sptree",15),
        [("bool",[14,25,26,53,132,133,138,181]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10])]),["DISK_THM"]),
       [read"%184%1%184%2%162%104%163%48%177%56%175%58%220%197%217$5@$4@@%197%220%217$4@%275@@%201$3@%109@@@%197%161%16%220%217$5@%278$0@@@%201$3$0@@%53$0@@@|@@%197%184%31%184%36%220%217$6@%239$1@$0@@@%201$3$1@$0@@%57$1@$0@@@|@|@@%184%31%161%34%184%40%220%217$7@%242$2@$1@$0@@@%201$3$2@$1@$0@@%60$2@$1@$0@@@|@|@|@@@@@@%201%351$5@$3@$2@$1@$0@@%351$4@%109@%53@%57@%60@@@|@|@|@|@|@|@"])
  fun op spt_nchotomy x = x
    val op spt_nchotomy =
    DT(((("sptree",16),
        [("bool",[14,25,26,53,132,133,138,181]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%184%85%309%217$0@%275@@%309%221%16%217$1@%278$0@@|@@%309%226%82%226%83%217$2@%239$1@$0@@|@|@@%226%82%221%16%226%83%217$3@%242$2@$1@$0@@|@|@|@@@@|@"])
  fun op spt_Axiom x = x
    val op spt_Axiom =
    DT(((("sptree",17),
        [("bool",[14,25,26,31,53,63,132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%162%54%163%55%179%59%164%61%222%62%197%201$0%275@@$4@@%197%161%16%201$1%278$0@@@$4$0@@|@@%197%184%31%184%36%201$2%239$1@$0@@@$4$1@$0@$2$1@@$2$0@@@|@|@@%184%31%161%34%184%40%201$3%242$2@$1@$0@@@$4$1@$2@$0@$3$2@@$3$0@@@|@|@|@@@@|@|@|@|@|@"])
  fun op spt_induction x = x
    val op spt_induction =
    DT(((("sptree",18),
        [("bool",[14,25,26,53,132,133,138]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%174%7%220%197$0%275@@%197%161%16$1%278$0@@|@@%197%184%82%184%83%220%197$2$1@@$2$0@@@$2%239$1@$0@@@|@|@@%184%82%184%83%220%197$2$1@@$2$0@@@%161%16$3%242$2@$0@$1@@|@@|@|@@@@@%184%82$1$0@|@@|@"])
  fun op lookup_ind x = x
    val op lookup_ind =
    DT(((("sptree",22),
        [("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",
         [14,15,25,26,27,36,51,52,53,54,58,63,96,101,104,105,124,129,132,
          133,138,181]),("combin",[19]),("numeral",[3,5,7,8]),
         ("pair",[5,8,16,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,20,21])]),["DISK_THM"]),
       [read"%172%6%220%197%182%67$1$0@%275@|@@%197%182%67%161%16$2$1@%278$0@@|@|@@%197%182%67%184%88%184%94%220%220%363%213$2@%198@@@$3%252%196$2@%286%237%308@@@@%286%238%308@@@@%246%255$2@@$1@$0@@@@$3$2@%239$1@$0@@@|@|@|@@%182%67%184%88%161%16%184%94%220%220%363%213$3@%198@@@$4%252%196$3@%286%237%308@@@@%286%238%308@@@@%246%255$3@@$2@$0@@@@$4$3@%242$2@$1@$0@@@|@|@|@|@@@@@%182%106%184%113$2$1@$0@|@|@@|@"])
  fun op lookup_def x = x
    val op lookup_def =
    DT(((("sptree",23),
        [("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",
         [14,15,25,26,27,36,51,52,53,54,58,63,96,101,104,105,124,129,132,
          133,138,181]),("combin",[19]),("numeral",[3,5,7,8]),
         ("pair",[5,8,16,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,20,21])]),["DISK_THM"]),
       [read"%197%182%67%214%329$0@%275@@%284@|@@%197%182%67%161%16%214%329$1@%278$0@@@%245%213$1@%198@@%289$0@@%284@@|@|@@%197%184%94%184%88%182%67%214%329$0@%239$1@$2@@@%245%213$0@%198@@%284@%329%252%196$0@%286%237%308@@@@%286%238%308@@@@%246%255$0@@$1@$2@@@@|@|@|@@%184%94%184%88%182%67%161%16%214%329$1@%242$2@$0@$3@@@%245%213$1@%198@@%289$0@@%329%252%196$1@%286%237%308@@@@%286%238%308@@@@%246%255$1@@$2@$3@@@@|@|@|@|@@@@"])
  fun op insert_ind x = x
    val op insert_ind =
    DT(((("sptree",26),
        [("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",
         [14,15,25,26,27,36,51,52,53,54,58,63,96,101,104,105,124,129,132,
          133,138,181]),("combin",[19]),("numeral",[3,5,7,8]),
         ("pair",[5,8,16,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,24,25])]),["DISK_THM"]),
       [read"%170%5%220%197%182%67%161%16%220%197%220%197%363%213$1@%198@@@%255$1@@@$2%252%196$1@%286%237%308@@@@%286%238%308@@@@$0@%275@@@%220%197%363%213$1@%198@@@%363%255$1@@@@$2%252%196$1@%286%237%308@@@@%286%238%308@@@@$0@%275@@@@$2$1@$0@%275@@|@|@@%197%182%67%161%16%161%22%220%197%220%197%363%213$2@%198@@@%255$2@@@$3%252%196$2@%286%237%308@@@@%286%238%308@@@@$1@%275@@@%220%197%363%213$2@%198@@@%363%255$2@@@@$3%252%196$2@%286%237%308@@@@%286%238%308@@@@$1@%275@@@@$3$2@$1@%278$0@@@|@|@|@@%197%182%67%161%16%184%88%184%94%220%197%220%197%363%213$3@%198@@@%255$3@@@$4%252%196$3@%286%237%308@@@@%286%238%308@@@@$2@$1@@@%220%197%363%213$3@%198@@@%363%255$3@@@@$4%252%196$3@%286%237%308@@@@%286%238%308@@@@$2@$0@@@@$4$3@$2@%239$1@$0@@@|@|@|@|@@%182%67%161%16%184%88%161%22%184%94%220%197%220%197%363%213$4@%198@@@%255$4@@@$5%252%196$4@%286%237%308@@@@%286%238%308@@@@$3@$2@@@%220%197%363%213$4@%198@@@%363%255$4@@@@$5%252%196$4@%286%237%308@@@@%286%238%308@@@@$3@$0@@@@$5$4@$3@%242$2@$1@$0@@@|@|@|@|@|@@@@@%182%106%161%111%184%129$3$2@$1@$0@|@|@|@@|@"])
  fun op insert_def x = x
    val op insert_def =
    DT(((("sptree",27),
        [("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",
         [14,15,25,26,27,36,51,52,53,54,58,63,96,101,104,105,124,129,132,
          133,138,181]),("combin",[19]),("numeral",[3,5,7,8]),
         ("pair",[5,8,16,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,24,25])]),["DISK_THM"]),
       [read"%197%182%67%161%16%217%321$1@$0@%275@@%246%213$1@%198@@%278$0@@%246%255$1@@%239%321%252%196$1@%286%237%308@@@@%286%238%308@@@@$0@%275@@%275@@%239%275@%321%252%196$1@%286%237%308@@@@%286%238%308@@@@$0@%275@@@@@|@|@@%197%182%67%161%22%161%16%217%321$2@$0@%278$1@@@%246%213$2@%198@@%278$0@@%246%255$2@@%242%321%252%196$2@%286%237%308@@@@%286%238%308@@@@$0@%275@@$1@%275@@%242%275@$1@%321%252%196$2@%286%237%308@@@@%286%238%308@@@@$0@%275@@@@@|@|@|@@%197%184%94%184%88%182%67%161%16%217%321$1@$0@%239$2@$3@@@%246%213$1@%198@@%242$2@$0@$3@@%246%255$1@@%239%321%252%196$1@%286%237%308@@@@%286%238%308@@@@$0@$2@@$3@@%239$2@%321%252%196$1@%286%237%308@@@@%286%238%308@@@@$0@$3@@@@@|@|@|@|@@%184%94%184%88%182%67%161%22%161%16%217%321$2@$0@%242$3@$1@$4@@@%246%213$2@%198@@%242$3@$0@$4@@%246%255$2@@%242%321%252%196$2@%286%237%308@@@@%286%238%308@@@@$0@$3@@$1@$4@@%242$3@$1@%321%252%196$2@%286%237%308@@@@%286%238%308@@@@$0@$4@@@@@|@|@|@|@|@@@@"])
  fun op mk_BN_ind x = x
    val op mk_BN_ind =
    DT(((("sptree",30),
        [("bool",
         [14,25,26,47,48,53,54,58,63,72,76,77,78,80,132,133,138,181]),
         ("pair",[5,16]),("relation",[101,107]),
         ("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%178%9%220%197$0%275@%275@@%197%161%120$1%275@%278$0@@|@@%197%184%121%184%123$2%275@%239$1@$0@@|@|@@%197%184%124%161%125%184%127$3%275@%242$2@$1@$0@@|@|@|@@%197%161%128%184%94$2%278$1@@$0@|@|@@%197%184%141%184%145%184%94$3%239$2@$1@@$0@|@|@|@@%184%146%161%147%184%149%184%94$4%242$3@$2@$1@@$0@|@|@|@|@@@@@@@@%184%108%184%113$2$1@$0@|@|@@|@"])
  fun op mk_BN_def x = x
    val op mk_BN_def =
    DT(((("sptree",31),
        [("bool",[15,58]),("combin",[19]),("pair",[49]),
         ("relation",[107,126]),("sptree",[10,28,29])]),["DISK_THM"]),
       [read"%197%217%335%275@%275@@%275@@%197%217%335%275@%278%120@@@%239%275@%278%120@@@@%197%217%335%275@%239%121@%123@@@%239%275@%239%121@%123@@@@%197%217%335%275@%242%124@%125@%127@@@%239%275@%242%124@%125@%127@@@@%197%217%335%278%128@@%94@@%239%278%128@@%94@@@%197%217%335%239%141@%145@@%94@@%239%239%141@%145@@%94@@@%217%335%242%146@%147@%149@@%94@@%239%242%146@%147@%149@@%94@@@@@@@@"])
  fun op mk_BS_ind x = x
    val op mk_BS_ind =
    DT(((("sptree",34),
        [("bool",
         [14,25,26,47,48,53,54,58,63,72,76,77,78,80,132,133,138,181]),
         ("pair",[5,16]),("relation",[101,107]),
         ("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9])]),["DISK_THM"]),
       [read"%176%8%220%197%161%153$1%275@$0@%275@|@@%197%161%122%161%153$2%278$1@@$0@%275@|@|@@%197%184%124%184%126%161%153$3%239$2@$1@@$0@%275@|@|@|@@%197%184%127%161%130%184%131%161%153$4%242$3@$2@$1@@$0@%275@|@|@|@|@@%197%184%88%161%153%161%142$3$2@$1@%278$0@@|@|@|@@%197%184%88%161%153%184%146%184%148$4$3@$2@%239$1@$0@@|@|@|@|@@%184%88%161%153%184%149%161%150%184%151$5$4@$3@%242$2@$1@$0@@|@|@|@|@|@@@@@@@@%184%108%161%111%184%129$3$2@$1@$0@|@|@|@@|@"])
  fun op mk_BS_def x = x
    val op mk_BS_def =
    DT(((("sptree",35),
        [("bool",[15,58]),("combin",[19]),("pair",[49]),
         ("relation",[107,126]),("sptree",[10,32,33])]),["DISK_THM"]),
       [read"%197%217%337%275@%153@%275@@%278%153@@@%197%217%337%278%122@@%153@%275@@%242%278%122@@%153@%275@@@%197%217%337%239%124@%126@@%153@%275@@%242%239%124@%126@@%153@%275@@@%197%217%337%242%127@%130@%131@@%153@%275@@%242%242%127@%130@%131@@%153@%275@@@%197%217%337%88@%153@%278%142@@@%242%88@%153@%278%142@@@@%197%217%337%88@%153@%239%146@%148@@@%242%88@%153@%239%146@%148@@@@%217%337%88@%153@%242%149@%150@%151@@@%242%88@%153@%242%149@%150@%151@@@@@@@@@"])
  fun op insert_notEmpty x = x
    val op insert_notEmpty =
    DT(((("sptree",39),
        [("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",
         [14,15,25,26,27,30,31,36,47,51,52,53,54,56,58,63,64,96,101,104,
          105,124,129,132,133,138,169,181]),("combin",[19]),
         ("ind_type",[33,34]),("numeral",[3,5,7,8]),("pair",[5,8,16,49]),
         ("prim_rec",[43,44]),("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,24,25])]),["DISK_THM"]),
       [read"%363%217%321%67@%16@%86@@%275@@"])
  fun op wf_insert x = x
    val op wf_insert =
    DT(((("sptree",40),
        [("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,56,58,63,64,96,101,104,105,124,
          129,132,133,138,169,181]),("combin",[19]),("numeral",[3,5,7,8]),
         ("pair",[5,8,16,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,19,24,25,26,39])]),["DISK_THM"]),
       [read"%182%67%161%16%184%86%220%361$0@@%361%321$2@$1@$0@@@|@|@|@"])
  fun op wf_delete x = x
    val op wf_delete =
    DT(((("sptree",41),
        [("bool",
         [14,25,26,27,30,31,36,47,51,52,53,54,56,58,63,64,96,105,124,129,
          132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9,19,31,35,36])]),["DISK_THM"]),
       [read"%184%86%182%67%220%361$1@@%361%311$0@$1@@@|@|@"])
  fun op lookup_insert1 x = x
    val op lookup_insert1 =
    DT(((("sptree",42),
        [("arithmetic",
         [18,24,25,26,27,46,59,62,71,73,74,76,93,173,177,180,183,200,214,
          252]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,56,58,63,64,96,101,104,105,124,
          129,132,133,138,147,169,181]),("combin",[19]),
         ("numeral",[3,5,7,8]),("option",[10]),("pair",[5,8,16,49]),
         ("prim_rec",[43,44]),("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,20,21,24,25,26])]),["DISK_THM"]),
       [read"%182%67%161%16%184%86%214%329$2@%321$2@$1@$0@@@%289$1@@|@|@|@"])
  fun op lookup_insert x = x
    val op lookup_insert =
    DT(((("sptree",43),
        [("arithmetic",
         [12,18,24,25,26,27,28,41,46,59,62,65,71,73,74,75,76,93,162,163,
          172,173,177,180,183,200,209,214,252,269]),
         ("bool",
         [14,15,25,26,27,30,36,43,51,52,53,54,56,58,63,64,93,96,100,101,
          104,105,107,124,129,132,133,138,147,169,181]),("combin",[19]),
         ("marker",[6]),("num",[7,9]),("numeral",[0,3,5,6,7,8,21]),
         ("option",[10,11,22,27,28]),("pair",[5,8,16,49]),
         ("prim_rec",[43,44]),("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,20,21,24,25,26])]),["DISK_THM"]),
       [read"%182%69%161%103%184%86%182%68%214%329$0@%321$3@$2@$1@@@%245%213$0@$3@@%289$2@@%329$0@$1@@@|@|@|@|@"])
  fun op isEmpty_union x = x
    val op isEmpty_union =
    DT(((("sptree",45),
        [("bool",[14,25,26,27,31,36,47,51,53,54,56,58,63,132,133,138,181]),
         ("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,44])]),["DISK_THM"]),
       [read"%202%217%360%75@%76@@%275@@%197%217%75@%275@@%217%76@%275@@@"])
  fun op wf_union x = x
    val op wf_union =
    DT(((("sptree",46),
        [("bool",
         [14,25,26,36,51,53,54,55,58,63,96,105,124,132,133,138,181]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,19,44,45])]),["DISK_THM"]),
       [read"%184%75%184%76%220%197%361$1@@%361$0@@@%361%360$1@$0@@@|@|@"])
  fun op lookup_union x = x
    val op lookup_union =
    DT(((("sptree",47),
        [("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,56,58,63,64,96,101,104,105,124,
          129,132,133,138,147,181]),("combin",[19]),("numeral",[3,5,7,8]),
         ("option",[6,7,10]),("pair",[5,8,16,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,20,21,44])]),["DISK_THM"]),
       [read"%184%75%184%76%182%67%214%329$0@%360$2@$1@@@%341%329$0@$2@@%329$0@$1@@%103%289$0@|@@|@|@|@"])
  fun op wf_inter x = x
    val op wf_inter =
    DT(((("sptree",51),
        [("bool",
         [14,15,25,26,27,31,36,47,51,52,53,54,56,58,63,96,132,133,138,
          181]),("combin",[19]),("ind_type",[33,34]),("pair",[49]),
         ("relation",[107,126]),
         ("sptree",
         [1,2,3,4,5,6,7,8,9,10,19,28,29,32,33,48])]),["DISK_THM"]),
       [read"%184%75%185%77%361%323$1@$0@@|@|@"])
  fun op lookup_inter x = x
    val op lookup_inter =
    DT(((("sptree",52),
        [("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,56,58,63,64,65,96,101,104,105,
          124,129,132,133,138,147,181]),("combin",[19]),
         ("numeral",[3,5,7,8]),("option",[6,7,10]),("pair",[5,8,16,49]),
         ("prim_rec",[43,44]),("relation",[101,107,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",
         [1,2,3,4,5,6,7,8,9,10,20,21,28,29,32,33,48])]),["DISK_THM"]),
       [read"%184%75%185%77%182%67%214%329$0@%323$2@$1@@@%347%193%329$0@$2@@%330$0@$1@@@%140%144%341$1@%284@%103%342$1@%284@%152%289$1@|@|@||@@|@|@|@"])
  fun op lookup_inter_eq x = x
    val op lookup_inter_eq =
    DT(((("sptree",53),
        [("arithmetic",
         [18,24,25,26,27,46,59,62,71,73,74,76,93,173,177,180,183,200,214,
          252]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,56,58,63,64,65,96,101,104,105,
          124,129,132,133,138,147,181]),("combin",[19]),
         ("numeral",[3,5,7,8]),("option",[6,7,10,11,27,28]),
         ("pair",[5,8,16,49]),("prim_rec",[43,44]),
         ("relation",[101,107,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",
         [1,2,3,4,5,6,7,8,9,10,20,21,28,29,32,33,49])]),["DISK_THM"]),
       [read"%184%75%184%76%182%67%214%329$0@%327$2@$1@@@%341%329$0@$2@@%284@%103%245%214%329$1@$2@@%289$0@@@%289$0@@%284@|@@|@|@|@"])
  fun op lookup_inter_EQ x = x
    val op lookup_inter_EQ =
    DT(((("sptree",54),
        [("bool",[25,26,27,51,52,54,56,58,63]),("option",[6,7,10,11]),
         ("pair",[49]),("sptree",[52])]),["DISK_THM"]),
       [read"%197%202%214%329%154@%323%88@%95@@@%289%160@@@%197%214%329%154@%88@@%289%160@@@%363%215%330%154@%95@@%285@@@@@%202%214%329%154@%323%88@%95@@@%284@@%309%214%329%154@%88@@%284@@%215%330%154@%95@@%285@@@@"])
  fun op lookup_inter_assoc x = x
    val op lookup_inter_assoc =
    DT(((("sptree",55),
        [("bool",[25,56]),("option",[6,7,10]),("pair",[49]),
         ("sptree",[52])]),["DISK_THM"]),
       [read"%214%329%154@%323%88@%325%95@%101@@@@%329%154@%324%323%88@%95@@%101@@@"])
  fun op lookup_difference x = x
    val op lookup_difference =
    DT(((("sptree",56),
        [("arithmetic",
         [18,24,25,26,27,46,59,62,71,73,74,76,93,173,177,180,183,200,214,
          252]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,56,58,63,64,65,92,95,96,101,104,
          105,124,129,132,133,138,145,147,181]),("combin",[19]),
         ("numeral",[3,5,7,8]),("option",[10,11,14,21,22,27,28]),
         ("pair",[5,8,16,49]),("prim_rec",[43,44]),
         ("relation",[101,107,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",
         [1,2,3,4,5,6,7,8,9,10,20,21,28,29,32,33,50])]),["DISK_THM"]),
       [read"%184%75%185%77%182%67%214%329$0@%312$2@$1@@@%245%215%330$0@$1@@%285@@%329$0@$2@@%284@@|@|@|@"])
  fun op lrnext_ind x = x
    val op lrnext_ind =
    DT(((("sptree",58),
        [("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",[15,25,27,36,51,52,53,54,58,63,96,101,104,105,124,129]),
         ("combin",[19]),("numeral",[3,5,7,8]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[57])]),["DISK_THM"]),
       [read"%168%4%220%182%80%220%220%363%213$0@%198@@@$1%252%196$0@%286%237%308@@@@%286%238%308@@@@@@$1$0@@|@@%182%106$1$0@|@@|@"])
  fun op lrnext_def x = x
    val op lrnext_def =
    DT(((("sptree",59),
        [("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",[15,25,27,36,51,52,53,54,58,63,96,101,104,105,124,129]),
         ("combin",[19]),("numeral",[3,5,7,8]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[57])]),["DISK_THM"]),
       [read"%182%80%213%332$0@@%244%213$0@%198@@%286%237%308@@@%187%286%238%308@@@%332%252%196$0@%286%237%308@@@@%286%238%308@@@@@@@|@"])
  fun op lrnext_thm x = x
    val op lrnext_thm =
    DT(((("sptree",60),
        [("arithmetic",
         [1,2,3,4,18,24,25,26,27,46,59,71,73,74,76,79,93,122,128,172,173,
          177,180,183,200,216,227,252,269]),
         ("bool",
         [15,25,27,36,43,51,52,53,54,56,58,63,93,96,101,104,105,124,129,
          147,169]),("combin",[19]),("numeral",[0,3,5,6,7,8]),
         ("prim_rec",[43,44]),("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),("sptree",[57])]),["DISK_THM"]),
       [read"%197%161%16%213%332%198@@%286%237%308@@@|@@%197%182%80%162%17%213%332%286$1@@@%332$1@@|@|@@%197%213%332%308@@%286%237%308@@@@%197%182%80%213%332%237$0@@@%187%286%238%308@@@%332$0@@@|@@%182%80%213%332%238$0@@@%187%286%238%308@@@%332$0@@@|@@@@@"])
  fun op FINITE_domain x = x
    val op FINITE_domain =
    DT(((("sptree",62),
        [("bool",[14,25,26,36,51,53,63,132,133,138]),
         ("pred_set",[127,185,187,190,198,199]),
         ("sptree",[1,2,3,4,5,6,7,8,9,61])]),["DISK_THM"]),
       [read"%257%313%86@@"])
  fun op lookup_fromList x = x
    val op lookup_fromList =
    DT(((("sptree",63),
        [("arithmetic",
         [18,22,24,25,26,27,28,41,46,59,62,71,73,74,76,93,130,172,173,177,
          180,183,199,200,252,269]),
         ("bool",
         [14,15,25,26,27,30,36,43,51,52,53,54,56,58,63,64,65,93,96,101,104,
          105,107,124,129,132,133,138,147,181]),("combin",[19]),
         ("list",[17,22,29,43,128]),("numeral",[3,5,7,8]),("option",[10]),
         ("pair",[5,8,9,16,49]),("prim_rec",[4,6,7,43,44]),
         ("relation",[101,113,121,126]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,20,21,37,43])]),["DISK_THM"]),
       [read"%214%329%80@%320%70@@@%245%199%80@%270%70@@@%289%253%80@%70@@@%284@@"])
  fun op domain_lookup x = x
    val op domain_lookup =
    DT(((("sptree",64),
        [("arithmetic",
         [18,24,25,26,27,46,53,59,62,71,73,74,75,76,79,82,91,93,95,127,128,
          148,162,163,172,173,177,180,181,183,184,186,200,214,252,254,
          269]),
         ("bool",
         [14,15,25,26,27,30,36,37,43,51,52,53,54,56,58,62,63,64,93,96,101,
          104,105,124,129,132,133,138,140,143,147,181]),("combin",[19]),
         ("num",[7,9]),("numeral",[0,3,5,6,7,8,9,21]),
         ("option",[10,11,27,28]),("pair",[5,8,16,49]),
         ("pred_set",[10,33,80,144]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,20,21,61])]),["DISK_THM"]),
       [read"%184%86%182%67%202%266$0@%313$1@@@%221%103%214%329$1@$2@@%289$0@@|@@|@|@"])
  fun op lookup_inter_alt x = x
    val op lookup_inter_alt =
    DT(((("sptree",65),
        [("bool",[25,26,27,37,56,58,63,105,129,140,147]),
         ("option",[6,7,10,11]),("pair",[49]),
         ("sptree",[52,64])]),["DISK_THM"]),
       [read"%214%329%154@%323%88@%95@@@%245%266%154@%314%95@@@%329%154@%88@@%284@@"])
  fun op lookup_NONE_domain x = x
    val op lookup_NONE_domain =
    DT(((("sptree",66),
        [("bool",[6,25,26,27,36,54,56,58,63,72,145]),("option",[6,10,11]),
         ("sptree",[64])]),["DISK_THM"]),
       [read"%202%214%329%67@%86@@%284@@%363%266%67@%313%86@@@@"])
  fun op domain_union x = x
    val op domain_union =
    DT(((("sptree",67),
        [("bool",[25,26,27,37,52,56,58,63,140]),("option",[6,7,10,11]),
         ("pred_set",[3,33]),("sptree",[47,64])]),["DISK_THM"]),
       [read"%204%313%360%88@%94@@@%295%313%88@@%313%94@@@"])
  fun op domain_inter x = x
    val op domain_inter =
    DT(((("sptree",68),
        [("bool",[25,26,27,37,51,54,58,63,140]),("option",[6,7,10,11]),
         ("pair",[49]),("pred_set",[3,45]),
         ("sptree",[52,64])]),["DISK_THM"]),
       [read"%204%313%323%88@%95@@@%269%313%88@@%314%95@@@"])
  fun op domain_insert x = x
    val op domain_insert =
    DT(((("sptree",69),
        [("bool",[25,26,53,54,55,63,75,108,109]),("pred_set",[3,80]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,16,17,18,19,20,23]),
         ("sptree",[43,64])]),["DISK_THM"]),
       [read"%204%313%321%67@%103@%86@@@%268%67@%313%86@@@"])
  fun op domain_sing x = x
    val op domain_sing =
    DT(((("sptree",70),[("sptree",[61,69])]),["DISK_THM"]),
       [read"%204%313%321%67@%103@%275@@@%268%67@%254@@"])
  fun op domain_fromList x = x
    val op domain_fromList =
    DT(((("sptree",71),
        [("arithmetic",
         [22,24,25,26,27,28,37,41,46,59,64,71,79,81,91,93,172,173,177,
          180]),
         ("bool",
         [14,25,26,27,36,37,43,51,52,53,54,55,56,58,63,75,93,96,101,104,
          105,106,107,108,109,124,143]),("list",[22,29,43]),("num",[7]),
         ("numeral",[3,6,8]),("pair",[9,16]),
         ("pred_set",[3,33,41,80,144,296]),("prim_rec",[6,7]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,16,17,18,19,20,23]),
         ("sptree",[37,43,61,64])]),["DISK_THM"]),
       [read"%204%313%320%70@@@%310%270%70@@@"])
  fun op lookup_delete x = x
    val op lookup_delete =
    DT(((("sptree",72),
        [("arithmetic",
         [12,13,18,24,25,26,27,28,41,46,59,62,63,65,71,73,74,75,76,93,158,
          162,163,172,173,176,177,180,183,200,209,214,252,269]),
         ("bool",
         [14,15,25,26,27,30,36,43,51,52,53,54,56,58,63,64,65,93,96,101,104,
          105,107,124,129,132,133,138,147,181]),("combin",[19]),
         ("marker",[6]),("num",[7,9]),("numeral",[0,3,5,6,7,8,21]),
         ("option",[10,11]),("pair",[5,8,16,49]),("prim_rec",[43,44]),
         ("relation",[101,107,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",
         [1,2,3,4,5,6,7,8,9,10,20,21,28,29,32,33,36])]),["DISK_THM"]),
       [read"%184%86%182%68%182%69%214%329$1@%311$0@$2@@@%245%213$1@$0@@%284@%329$1@$2@@@|@|@|@"])
  fun op domain_delete x = x
    val op domain_delete =
    DT(((("sptree",73),
        [("bool",[25,26,27,48,53,54,55,63]),("option",[28]),
         ("pred_set",[3,102]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sptree",[64,72])]),["DISK_THM"]),
       [read"%204%313%311%67@%86@@@%251%313%86@@%67@@"])
  fun op set_foldi_keys x = x
    val op set_foldi_keys =
    DT(((("sptree",75),
        [("arithmetic",
         [3,4,17,18,22,24,25,26,27,46,59,67,70,71,73,74,75,76,79,82,93,110,
          148,172,173,177,180,181,183]),
         ("bool",
         [8,14,25,26,27,30,32,36,37,43,51,52,53,54,56,58,63,64,96,101,104,
          105,124,132,133,138,169]),("combin",[11,19]),("num",[7,9]),
         ("numeral",[0,3,5,6,7,8,9,17,21,34,35,40,41]),
         ("pred_set",[3,10,33,37,41,80,137,144,147,149,150,153]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9,60,61,74])]),["DISK_THM"]),
       [read"%184%86%168%18%182%64%204%316%67%103%18%268$2@$0@|||@$0@$1@$2@@%295$1@%264%80%188$1@%187%332$1@@$0@@|@%313$2@@@@|@|@|@"])
  fun op domain_foldi x = x
    val op domain_foldi =
    DT(((("sptree",76),
        [("arithmetic",[22,25,69]),("pred_set",[41,148]),
         ("sptree",[60,75])]),["DISK_THM"]),
       [read"%204%313%86@@%316%67%103%18%268$2@$0@|||@%198@%254@%86@@"])
  fun op MEM_toAList x = x
    val op MEM_toAList =
    DT(((("sptree",78),
        [("arithmetic",
         [3,4,17,18,22,24,25,26,27,46,53,59,62,67,69,70,71,73,74,75,76,79,
          82,93,95,110,128,148,162,166,172,173,177,180,181,183,184,186,200,
          214,252,254,269]),
         ("bool",
         [8,14,15,25,26,27,30,32,36,37,43,51,52,53,54,56,58,62,63,64,93,96,
          101,104,105,124,129,132,133,138,140,143,147,169,181]),
         ("combin",[8,19]),("list",[25,120]),("num",[7,9]),
         ("numeral",[0,3,5,6,7,8,9,17,21,34,35,40,41]),
         ("option",[6,10,11,16]),("pair",[4,5,8,16,25,49]),
         ("pred_set",[3,10,33,37,41,80,137,144,147,149,150,153]),
         ("prim_rec",[43,44]),("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",
         [1,2,3,4,5,6,7,8,9,10,20,21,60,61,64,74,77])]),["DISK_THM"]),
       [read"%184%86%182%67%161%103%202%267%190$1@$0@@%274%356$2@@@@%214%329$1@$2@@%289$0@@@|@|@|@"])
  fun op ALOOKUP_toAList x = x
    val op ALOOKUP_toAList =
    DT(((("sptree",79),
        [("alist",[8,17]),("bool",[25,26,27,36,54,56,63,95,101,145]),
         ("option",[6,10,11]),("sptree",[78])]),["DISK_THM"]),
       [read"%184%86%182%154%214%234%356$1@@$0@@%329$0@$1@@|@|@"])
  fun op insert_union x = x
    val op insert_union =
    DT(((("sptree",80),
        [("arithmetic",
         [18,24,25,26,27,46,59,62,71,73,74,76,93,110,173,177,180,183,200,
          214,252]),
         ("bool",
         [14,15,25,26,27,30,31,36,51,52,53,54,56,58,63,64,96,101,104,105,
          124,129,132,133,138,147,169,181]),("combin",[19]),
         ("ind_type",[33,34]),("numeral",[3,5,7,8]),("pair",[5,8,16,49]),
         ("prim_rec",[43,44]),("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,24,25,44])]),["DISK_THM"]),
       [read"%182%67%161%103%184%82%217%321$2@$1@$0@@%360%321$2@$1@%275@@$0@@|@|@|@"])
  fun op domain_empty x = x
    val op domain_empty =
    DT(((("sptree",81),
        [("bool",
         [14,25,26,27,31,36,47,51,53,54,55,56,58,63,96,100,105,124,132,133,
          138,181]),("ind_type",[33,34]),("pred_set",[43,90,151]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sptree",[1,2,3,4,5,6,7,8,9,19,61])]),["DISK_THM"]),
       [read"%184%86%220%361$0@@%202%217$0@%275@@%204%313$0@@%254@@@|@"])
  fun op ALL_DISTINCT_MAP_FST_toAList x = x
    val op ALL_DISTINCT_MAP_FST_toAList =
    DT(((("sptree",82),
        [("arithmetic",
         [3,4,17,18,22,24,25,26,27,46,59,64,67,70,71,73,74,75,76,79,82,91,
          93,110,148,159,169,170,172,173,177,180,181,183]),
         ("bool",
         [8,14,25,26,27,32,36,37,43,51,52,53,54,55,56,58,63,64,72,73,75,96,
          101,104,105,124,132,133,138,145,178]),("combin",[3,5,19]),
         ("list",[20,22,23,48,56,57,58,60,64,66,89,106,120,215,221,402]),
         ("marker",[6]),("num",[7,9]),
         ("numeral",[0,3,5,6,7,8,9,17,21,34,35,40,41]),
         ("pair",[4,8,9,13,16,24,25]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sptree",[1,2,3,4,5,6,7,8,9,60,74,77])]),["DISK_THM"]),
       [read"%184%86%233%281%260@%356$0@@@|@"])
  fun op foldi_FOLDR_toAList x = x
    val op foldi_FOLDR_toAList =
    DT(((("sptree",83),
        [("bool",[14,25,26,32,36,53,56,58,132,133,138]),("combin",[19]),
         ("list",[28]),("pair",[16]),
         ("sptree",[1,2,3,4,5,6,7,8,9,74,77])]),["DISK_THM"]),
       [read"%169%51%162%17%184%86%201%315$2@%198@$1@$0@@%259%293$2@@$1@%356$0@@@|@|@|@"])
  fun op toListA_append x = x
    val op toListA_append =
    DT(((("sptree",85),
        [("bool",[14,25,26,53,54,55,58,63,73,75,132,133,138]),
         ("list",[20,56]),("sat",[1,3,5,6,7,11,14,17,18,19,20,23]),
         ("sptree",[1,2,3,4,5,6,7,8,9,84])]),["DISK_THM"]),
       [read"%184%86%180%43%211%359$0@$1@@%235%359%282@$1@@$0@@|@|@"])
  fun op isEmpty_toListA x = x
    val op isEmpty_toListA =
    DT(((("sptree",86),
        [("bool",
         [14,25,26,27,31,36,47,51,53,54,56,58,63,96,105,124,132,133,138,
          169,181]),("ind_type",[33,34]),("list",[20,50,56,100,101,104]),
         ("marker",[9]),
         ("sptree",[1,2,3,4,5,6,7,8,9,19,84,85])]),["DISK_THM"]),
       [read"%184%86%180%43%220%361$1@@%202%217$1@%275@@%211%359$0@$1@@$0@@@|@|@"])
  fun op isEmpty_toList x = x
    val op isEmpty_toList =
    DT(((("sptree",88),
        [("bool",[25,53,58,63,105,124]),("sptree",[86,87])]),["DISK_THM"]),
       [read"%184%86%220%361$0@@%202%217$0@%275@@%211%357$0@@%282@@@|@"])
  fun op MEM_toList x = x
    val op MEM_toList =
    DT(((("sptree",89),
        [("arithmetic",
         [18,24,25,26,27,46,59,62,64,71,73,74,75,76,79,91,93,128,148,159,
          169,170,172,173,177,180,183,200,214,216,227,252,269]),
         ("bool",
         [14,15,25,26,27,30,36,37,43,51,52,53,54,55,56,58,63,64,73,75,93,
          96,101,104,105,106,124,129,132,133,138,143,147,169,181]),
         ("combin",[19]),("list",[25,120]),("numeral",[0,3,5,6,7,8]),
         ("option",[10,11,27,28]),("pair",[5,8,16,49]),("pred_set",[80]),
         ("prim_rec",[43,44]),("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,20,21,84,87])]),["DISK_THM"]),
       [read"%161%153%184%86%202%265$1@%272%357$0@@@@%224%67%214%329$0@$1@@%289$2@@|@@|@|@"])
  fun op spt_eq_thm x = x
    val op spt_eq_thm =
    DT(((("sptree",90),
        [("arithmetic",
         [12,18,22,24,25,26,27,28,41,46,59,62,64,65,71,73,74,76,91,93,128,
          130,158,159,162,164,170,172,173,177,180,183,200,214,228,233,252,
          269]),
         ("bool",
         [2,6,8,14,15,25,26,27,30,31,36,43,47,51,52,53,54,55,56,58,62,63,
          64,71,72,93,96,99,100,101,104,105,106,108,109,124,129,132,133,
          138,145,147,181]),("combin",[19]),("ind_type",[33,34]),
         ("num",[9]),("numeral",[0,3,5,7,8,15,16,17,21,34,35,40,41]),
         ("option",[10,11,27]),("pair",[5,8,16,49]),
         ("pred_set",[3,10,11,43,90,151]),("prim_rec",[4,6,7,43,44]),
         ("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,16,17,18,19,20,23]),
         ("sptree",
         [1,2,3,4,5,6,7,8,9,10,19,20,21,61,64,66,81])]),["DISK_THM"]),
       [read"%184%88%184%94%220%197%361$1@@%361$0@@@%202%217$1@$0@@%182%80%214%329$0@$2@@%329$0@$1@@|@@@|@|@"])
  fun op wf_mk_wf x = x
    val op wf_mk_wf =
    DT(((("sptree",92),
        [("bool",
         [14,15,25,26,27,31,36,47,51,52,53,54,56,58,63,96,132,133,138,
          181]),("combin",[19]),("ind_type",[33,34]),("pair",[49]),
         ("relation",[107,126]),
         ("sptree",
         [1,2,3,4,5,6,7,8,9,10,19,28,29,32,33,91])]),["DISK_THM"]),
       [read"%184%86%361%339$0@@|@"])
  fun op wf_mk_id x = x
    val op wf_mk_id =
    DT(((("sptree",93),
        [("bool",
         [14,25,26,27,30,31,36,47,51,52,53,54,56,58,63,64,96,105,124,129,
          132,133,138,181]),("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9,19,31,35,91])]),["DISK_THM"]),
       [read"%184%86%220%361$0@@%217%339$0@@$0@@|@"])
  fun op lookup_mk_wf x = x
    val op lookup_mk_wf =
    DT(((("sptree",94),
        [("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,56,58,63,64,65,96,101,104,105,
          124,129,132,133,138,147,181]),("combin",[19]),
         ("numeral",[3,5,7,8]),("option",[10,28]),("pair",[5,8,16,49]),
         ("prim_rec",[43,44]),("relation",[101,107,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",
         [1,2,3,4,5,6,7,8,9,10,20,21,28,29,32,33,91])]),["DISK_THM"]),
       [read"%182%154%184%86%214%329$1@%339$0@@@%329$1@$0@@|@|@"])
  fun op domain_mk_wf x = x
    val op domain_mk_wf =
    DT(((("sptree",95),
        [("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,56,58,63,64,65,96,101,104,105,
          124,129,132,133,138,147,181]),("combin",[19]),
         ("numeral",[3,5,7,8]),("option",[10,28]),("pair",[5,8,16,49]),
         ("pred_set",[3]),("prim_rec",[43,44]),
         ("relation",[101,107,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",
         [1,2,3,4,5,6,7,8,9,10,20,21,28,29,32,33,64,91])]),["DISK_THM"]),
       [read"%184%86%204%313%339$0@@@%313$0@@|@"])
  fun op mk_wf_eq x = x
    val op mk_wf_eq =
    DT(((("sptree",96),
        [("bool",[2,15,25,26,53,54,55,58,63,75,83,84,100]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sptree",[90,92,94])]),["DISK_THM"]),
       [read"%184%88%184%94%202%217%339$1@@%339$0@@@%182%154%214%329$0@$2@@%329$0@$1@@|@@|@|@"])
  fun op inter_eq x = x
    val op inter_eq =
    DT(((("sptree",97),
        [("bool",[2,15,25,26,53,54,55,58,63,75,83,84,100]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sptree",[51,90])]),["DISK_THM"]),
       [read"%184%88%185%95%184%100%186%102%202%217%323$3@$2@@%324$1@$0@@@%182%154%214%329$0@%323$4@$3@@@%329$0@%324$2@$1@@@|@@|@|@|@|@"])
  fun op union_mk_wf x = x
    val op union_mk_wf =
    DT(((("sptree",99),
        [("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,56,58,63,64,65,96,101,104,105,
          124,129,132,133,138,147,181]),("combin",[19]),
         ("numeral",[3,5,7,8]),("option",[10,28]),("pair",[5,8,16,49]),
         ("prim_rec",[43,44]),("relation",[101,107,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sptree",
         [1,2,3,4,5,6,7,8,9,10,20,21,28,29,32,33,51,52,91,93,
          96])]),["DISK_THM"]),
       [read"%184%88%185%95%217%323%339$1@@%340$0@@@%339%323$1@$0@@@|@|@"])
  fun op insert_mk_wf x = x
    val op insert_mk_wf =
    DT(((("sptree",100),
        [("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,56,58,63,64,65,96,101,104,105,
          124,129,132,133,138,147,181]),("combin",[19]),
         ("numeral",[3,5,7,8]),("option",[10,28]),("pair",[5,8,16,49]),
         ("prim_rec",[43,44]),("relation",[101,107,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sptree",
         [1,2,3,4,5,6,7,8,9,10,20,21,28,29,32,33,40,43,91,92,93,
          96])]),["DISK_THM"]),
       [read"%182%154%161%103%184%86%217%321$2@$1@%339$0@@@%339%321$2@$1@$0@@@|@|@|@"])
  fun op delete_mk_wf x = x
    val op delete_mk_wf =
    DT(((("sptree",101),
        [("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,56,58,63,64,65,96,101,104,105,
          124,129,132,133,138,147,181]),("combin",[19]),
         ("numeral",[3,5,7,8]),("option",[10,28]),("pair",[5,8,16,49]),
         ("prim_rec",[43,44]),("relation",[101,107,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sptree",
         [1,2,3,4,5,6,7,8,9,10,20,21,28,29,32,33,41,72,91,92,93,
          96])]),["DISK_THM"]),
       [read"%182%154%184%86%217%311$1@%339$0@@@%339%311$1@$0@@@|@|@"])
  fun op union_LN x = x
    val op union_LN =
    DT(((("sptree",102),
        [("bool",[14,25,26,31,51,53,56,63,132,133,138,181]),
         ("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,44])]),["DISK_THM"]),
       [read"%184%86%197%217%360$0@%275@@$0@@%217%360%275@$0@@$0@@|@"])
  fun op inter_LN x = x
    val op inter_LN =
    DT(((("sptree",103),
        [("bool",[14,25,26,51,53,56,132,133,138,181]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,48])]),["DISK_THM"]),
       [read"%184%86%197%217%323$0@%276@@%275@@%219%326%277@$0@@%277@@|@"])
  fun op union_assoc x = x
    val op union_assoc =
    DT(((("sptree",104),
        [("bool",[14,25,26,31,36,51,53,56,63,132,133,138,181]),
         ("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,44])]),["DISK_THM"]),
       [read"%184%88%184%94%184%100%217%360$2@%360$1@$0@@@%360%360$2@$1@@$0@@|@|@|@"])
  fun op inter_assoc x = x
    val op inter_assoc =
    DT(((("sptree",105),
        [("bool",[2,15,25,26,53,54,55,56,58,63,75,83,84,100]),
         ("option",[6,7,10]),("pair",[49]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sptree",[51,52,90])]),["DISK_THM"]),
       [read"%184%88%185%95%186%101%217%323$2@%325$1@$0@@@%324%323$2@$1@@$0@@|@|@|@"])
  fun op lookup_compute x = x
    val op lookup_compute =
    DT(((("sptree",106),
        [("arithmetic",
         [1,2,3,4,12,18,24,25,26,27,46,53,59,62,71,73,74,75,76,93,95,112,
          173,177,180,183,184,186,200,252,254]),
         ("bool",
         [14,15,25,26,27,36,51,52,53,54,56,58,63,64,96,101,104,105,124,129,
          132,133,138,181]),("combin",[19]),("num",[7]),
         ("numeral",[3,5,6,7,8,21]),("pair",[5,8,16,49]),
         ("prim_rec",[43,44]),("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,20,21])]),["DISK_THM"]),
       [read
  fun op insert_compute x = x
    val op insert_compute =
    DT(((("sptree",107),
        [("arithmetic",
         [1,2,3,4,12,18,24,25,26,27,46,53,59,62,71,73,74,75,76,93,95,112,
          173,177,180,183,184,186,200,252,254]),
         ("bool",
         [14,15,25,26,27,36,51,52,53,54,56,58,63,64,96,101,104,105,124,129,
          132,133,138,181]),("combin",[19]),("num",[7]),
         ("numeral",[3,5,6,7,8,21]),("pair",[5,8,16,49]),
         ("prim_rec",[43,44]),("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,24,25])]),["DISK_THM"]),
       [read"%197%217%321%286%80@@%16@%86@@%321%80@%16@%86@@@%197%217%321%198@%16@%275@@%278%16@@@%197%217%321%198@%16@%278%22@@@%278%16@@@%197%217%321%198@%16@%239%88@%94@@@%242%88@%16@%94@@@%197%217%321%198@%16@%242%88@%22@%94@@@%242%88@%16@%94@@@%197%217%321%308@%16@%275@@%278%16@@@%197%217%321%308@%16@%278%22@@@%278%16@@@%197%217%321%308@%16@%239%88@%94@@@%242%88@%16@%94@@@%197%217%321%308@%16@%242%88@%22@%94@@@%242%88@%16@%94@@@%197%217%321%237%80@@%16@%275@@%239%275@%321%80@%16@%275@@@@%197%217%321%237%80@@%16@%278%22@@@%242%275@%22@%321%80@%16@%275@@@@%197%217%321%237%80@@%16@%239%88@%94@@@%239%88@%321%80@%16@%94@@@@%197%217%321%237%80@@%16@%242%88@%22@%94@@@%242%88@%22@%321%80@%16@%94@@@@%197%217%321%238%80@@%16@%275@@%239%321%80@%16@%275@@%275@@@%197%217%321%238%80@@%16@%278%22@@@%242%321%80@%16@%275@@%22@%275@@@%197%217%321%238%80@@%16@%239%88@%94@@@%239%321%80@%16@%88@@%94@@@%217%321%238%80@@%16@%242%88@%22@%94@@@%242%321%80@%16@%88@@%22@%94@@@@@@@@@@@@@@@@@@"])
  fun op delete_compute x = x
    val op delete_compute =
    DT(((("sptree",108),
        [("arithmetic",
         [1,2,3,4,12,24,25,27,53,59,62,71,73,75,95,112,173,180,184,186,
          254]),("bool",[25,26,27,36,51,52,54,56,58,63,64,104,105,129]),
         ("num",[7]),("numeral",[3,5,6,7,8,21]),
         ("sptree",[36])]),["DISK_THM"]),
       [read"%197%217%311%286%80@@%86@@%311%80@%86@@@%197%217%311%198@%275@@%275@@%197%217%311%198@%278%16@@@%275@@%197%217%311%198@%239%88@%94@@@%239%88@%94@@@%197%217%311%198@%242%88@%16@%94@@@%239%88@%94@@@%197%217%311%308@%275@@%275@@%197%217%311%308@%278%16@@@%275@@%197%217%311%308@%239%88@%94@@@%239%88@%94@@@%197%217%311%308@%242%88@%16@%94@@@%239%88@%94@@@%197%217%311%237%80@@%275@@%275@@%197%217%311%237%80@@%278%16@@@%278%16@@@%197%217%311%237%80@@%239%88@%94@@@%335%88@%311%80@%94@@@@%197%217%311%237%80@@%242%88@%16@%94@@@%337%88@%16@%311%80@%94@@@@%197%217%311%238%80@@%275@@%275@@%197%217%311%238%80@@%278%16@@@%278%16@@@%197%217%311%238%80@@%239%88@%94@@@%335%311%80@%88@@%94@@@%217%311%238%80@@%242%88@%16@%94@@@%337%311%80@%88@@%16@%94@@@@@@@@@@@@@@@@@@"])
  fun op fromAList_ind x = x
    val op fromAList_ind =
    DT(((("sptree",110),
        [("arithmetic",[24,25,26,27,46,59,71,93,173]),
         ("bool",[25,27,36,53,54,58,63,104]),("list",[7,46]),
         ("numeral",[3,8]),("pair",[5,16]),("prim_rec",[42]),
         ("relation",[101,113,115]),
         ("sat",[1,3,5,6,7,11,15])]),["DISK_THM"]),
       [read"%167%3%220%197$0%283@@%182%154%161%160%181%159%220$3$0@@$3%248%190$2@$1@@$0@@@|@|@|@@@%181%105$1$0@|@@|@"])
  fun op fromAList_def x = x
    val op fromAList_def =
    DT(((("sptree",111),
        [("arithmetic",[24,25,26,27,46,59,71,93,173]),
         ("bool",[15,25,36,54,58,63,104]),("combin",[19]),("list",[6,7]),
         ("numeral",[3,8]),("pair",[16,49]),("prim_rec",[42]),
         ("relation",[113,115,121,126]),("sptree",[109])]),["DISK_THM"]),
       [read"%197%217%319%283@@%275@@%161%160%181%159%182%154%217%319%248%190$0@$2@@$1@@@%321$0@$2@%319$1@@@|@|@|@@"])
  fun op lookup_fromAList x = x
    val op lookup_fromAList =
    DT(((("sptree",112),
        [("alist",[7]),
         ("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",
         [14,15,25,26,27,36,51,52,53,54,56,58,63,96,101,104,105,124,129,
          132,133,138,181]),("combin",[19]),("list",[6,7]),
         ("numeral",[3,5,7,8]),("pair",[5,8,16,49]),
         ("prim_rec",[42,43,44]),("relation",[101,113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",
         [1,2,3,4,5,6,7,8,9,10,20,21,43,109,110])]),["DISK_THM"]),
       [read"%181%73%182%154%214%329$0@%319$1@@@%234$1@$0@@|@|@"])
  fun op domain_fromAList x = x
    val op domain_fromAList =
    DT(((("sptree",113),
        [("alist",[8,17]),
         ("bool",[2,15,25,26,53,54,55,58,63,75,84,94,99,143]),
         ("list",[89]),("option",[6]),("pair",[8,24]),("pred_set",[3]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sptree",[64,112])]),["DISK_THM"]),
       [read"%181%73%204%313%319$0@@@%273%281%260@$0@@@|@"])
  fun op lookup_fromAList_toAList x = x
    val op lookup_fromAList_toAList =
    DT(((("sptree",114),
        [("bool",[25,36,56]),("sptree",[79,112])]),["DISK_THM"]),
       [read"%184%86%182%154%214%329$0@%319%356$1@@@@%329$0@$1@@|@|@"])
  fun op wf_fromAList x = x
    val op wf_fromAList =
    DT(((("sptree",115),
        [("arithmetic",[24,25,26,27,46,59,71,93,173]),
         ("bool",[14,15,25,36,54,58,63,104]),("combin",[19]),
         ("list",[6,7,43]),("numeral",[3,8]),("pair",[5,16,49]),
         ("prim_rec",[42]),("relation",[113,115,121,126]),
         ("sptree",[19,40,109])]),["DISK_THM"]),
       [read"%181%73%361%319$0@@|@"])
  fun op fromAList_toAList x = x
    val op fromAList_toAList =
    DT(((("sptree",116),
        [("bool",[2,15,25,26,53,54,55,58,63,75,83,84,100]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sptree",[90,114,115])]),["DISK_THM"]),
       [read"%184%86%220%361$0@@%217%319%356$0@@@$0@@|@"])
  fun op toList_map x = x
    val op toList_map =
    DT(((("sptree",118),
        [("bool",[14,25,26,36,51,53,56,58,63,132,133,138,169]),
         ("list",[20,23,48,56,58,104]),("marker",[9]),
         ("sptree",[1,2,3,4,5,6,7,8,9,84,85,87,117])]),["DISK_THM"]),
       [read"%184%82%212%358%333%48@$0@@@%280%48@%357$0@@@|@"])
  fun op domain_map x = x
    val op domain_map =
    DT(((("sptree",119),
        [("bool",[14,25,26,36,53,56,132,133,138]),("pred_set",[135]),
         ("sptree",[1,2,3,4,5,6,7,8,9,61,117])]),["DISK_THM"]),
       [read"%184%82%204%314%333%48@$0@@@%313$0@@|@"])
  fun op lookup_map x = x
    val op lookup_map =
    DT(((("sptree",120),
        [("arithmetic",
         [18,24,25,26,27,46,59,71,73,74,76,93,173,177,180,183,200,252]),
         ("bool",
         [14,15,25,26,27,30,36,51,52,53,54,56,58,63,64,96,101,104,105,124,
          129,132,133,138,143,147,181]),("combin",[19]),
         ("numeral",[3,5,7,8]),("option",[10,13,27,28,29,31]),
         ("pair",[5,8,16,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("sptree",[1,2,3,4,5,6,7,8,9,10,20,21,117])]),["DISK_THM"]),
       [read"%184%82%182%154%215%330$0@%333%48@$1@@@%287%48@%329$0@$1@@@|@|@"])
  fun op map_LN x = x
    val op map_LN =
    DT(((("sptree",121),
        [("bool",[14,25,26,27,31,36,47,51,53,54,56,58,63,132,133,138,181]),
         ("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9,117])]),["DISK_THM"]),
       [read"%184%86%202%218%333%48@$0@@%276@@%217$0@%275@@|@"])
  fun op wf_map x = x
    val op wf_map =
    DT(((("sptree",122),
        [("bool",
         [14,25,26,27,31,36,47,51,53,54,56,58,63,96,132,133,138,181]),
         ("ind_type",[33,34]),
         ("sptree",[1,2,3,4,5,6,7,8,9,19,117])]),["DISK_THM"]),
       [read"%184%86%163%48%202%362%333$0@$1@@@%361$1@@|@|@"])
  end
  val _ = DB.bindl "sptree"
  [("spt_TY_DEF",spt_TY_DEF,DB.Def), ("spt_case_def",spt_case_def,DB.Def),
   ("spt_size_def",spt_size_def,DB.Def), ("wf_def",wf_def,DB.Def),
   ("lookup_tupled_primitive_def",lookup_tupled_primitive_def,DB.Def),
   ("lookup_curried_def",lookup_curried_def,DB.Def),
   ("insert_tupled_primitive_def",insert_tupled_primitive_def,DB.Def),
   ("insert_curried_def",insert_curried_def,DB.Def),
   ("mk_BN_tupled_primitive_def",mk_BN_tupled_primitive_def,DB.Def),
   ("mk_BN_curried_def",mk_BN_curried_def,DB.Def),
   ("mk_BS_tupled_primitive_def",mk_BS_tupled_primitive_def,DB.Def),
   ("mk_BS_curried_def",mk_BS_curried_def,DB.Def),
   ("delete_def",delete_def,DB.Def), ("fromList_def",fromList_def,DB.Def),
   ("size_def",size_def,DB.Def), ("union_def",union_def,DB.Def),
   ("inter_def",inter_def,DB.Def), ("inter_eq_def",inter_eq_def,DB.Def),
   ("difference_def",difference_def,DB.Def),
   ("lrnext_primitive_def",lrnext_primitive_def,DB.Def),
   ("domain_def",domain_def,DB.Def), ("foldi_def",foldi_def,DB.Def),
   ("toAList_def",toAList_def,DB.Def), ("toListA_def",toListA_def,DB.Def),
   ("toList_def",toList_def,DB.Def), ("mk_wf_def",mk_wf_def,DB.Def),
   ("fromAList_primitive_def",fromAList_primitive_def,DB.Def),
   ("map_def",map_def,DB.Def), ("datatype_spt",datatype_spt,DB.Thm),
   ("spt_11",spt_11,DB.Thm), ("spt_distinct",spt_distinct,DB.Thm),
   ("spt_case_cong",spt_case_cong,DB.Thm),
   ("spt_nchotomy",spt_nchotomy,DB.Thm), ("spt_Axiom",spt_Axiom,DB.Thm),
   ("spt_induction",spt_induction,DB.Thm),
   ("lookup_ind",lookup_ind,DB.Thm), ("lookup_def",lookup_def,DB.Thm),
   ("insert_ind",insert_ind,DB.Thm), ("insert_def",insert_def,DB.Thm),
   ("mk_BN_ind",mk_BN_ind,DB.Thm), ("mk_BN_def",mk_BN_def,DB.Thm),
   ("mk_BS_ind",mk_BS_ind,DB.Thm), ("mk_BS_def",mk_BS_def,DB.Thm),
   ("insert_notEmpty",insert_notEmpty,DB.Thm),
   ("wf_insert",wf_insert,DB.Thm), ("wf_delete",wf_delete,DB.Thm),
   ("lookup_insert1",lookup_insert1,DB.Thm),
   ("lookup_insert",lookup_insert,DB.Thm),
   ("isEmpty_union",isEmpty_union,DB.Thm), ("wf_union",wf_union,DB.Thm),
   ("lookup_union",lookup_union,DB.Thm), ("wf_inter",wf_inter,DB.Thm),
   ("lookup_inter",lookup_inter,DB.Thm),
   ("lookup_inter_eq",lookup_inter_eq,DB.Thm),
   ("lookup_inter_EQ",lookup_inter_EQ,DB.Thm),
   ("lookup_inter_assoc",lookup_inter_assoc,DB.Thm),
   ("lookup_difference",lookup_difference,DB.Thm),
   ("lrnext_ind",lrnext_ind,DB.Thm), ("lrnext_def",lrnext_def,DB.Thm),
   ("lrnext_thm",lrnext_thm,DB.Thm),
   ("FINITE_domain",FINITE_domain,DB.Thm),
   ("lookup_fromList",lookup_fromList,DB.Thm),
   ("domain_lookup",domain_lookup,DB.Thm),
   ("lookup_inter_alt",lookup_inter_alt,DB.Thm),
   ("lookup_NONE_domain",lookup_NONE_domain,DB.Thm),
   ("domain_union",domain_union,DB.Thm),
   ("domain_inter",domain_inter,DB.Thm),
   ("domain_insert",domain_insert,DB.Thm),
   ("domain_sing",domain_sing,DB.Thm),
   ("domain_fromList",domain_fromList,DB.Thm),
   ("lookup_delete",lookup_delete,DB.Thm),
   ("domain_delete",domain_delete,DB.Thm),
   ("set_foldi_keys",set_foldi_keys,DB.Thm),
   ("domain_foldi",domain_foldi,DB.Thm),
   ("MEM_toAList",MEM_toAList,DB.Thm),
   ("ALOOKUP_toAList",ALOOKUP_toAList,DB.Thm),
   ("insert_union",insert_union,DB.Thm),
   ("domain_empty",domain_empty,DB.Thm),
   ("ALL_DISTINCT_MAP_FST_toAList",ALL_DISTINCT_MAP_FST_toAList,DB.Thm),
   ("foldi_FOLDR_toAList",foldi_FOLDR_toAList,DB.Thm),
   ("toListA_append",toListA_append,DB.Thm),
   ("isEmpty_toListA",isEmpty_toListA,DB.Thm),
   ("isEmpty_toList",isEmpty_toList,DB.Thm),
   ("MEM_toList",MEM_toList,DB.Thm), ("spt_eq_thm",spt_eq_thm,DB.Thm),
   ("wf_mk_wf",wf_mk_wf,DB.Thm), ("wf_mk_id",wf_mk_id,DB.Thm),
   ("lookup_mk_wf",lookup_mk_wf,DB.Thm),
   ("domain_mk_wf",domain_mk_wf,DB.Thm), ("mk_wf_eq",mk_wf_eq,DB.Thm),
   ("inter_eq",inter_eq,DB.Thm), ("union_mk_wf",union_mk_wf,DB.Thm),
   ("insert_mk_wf",insert_mk_wf,DB.Thm),
   ("delete_mk_wf",delete_mk_wf,DB.Thm), ("union_LN",union_LN,DB.Thm),
   ("inter_LN",inter_LN,DB.Thm), ("union_assoc",union_assoc,DB.Thm),
   ("inter_assoc",inter_assoc,DB.Thm),
   ("lookup_compute",lookup_compute,DB.Thm),
   ("insert_compute",insert_compute,DB.Thm),
   ("delete_compute",delete_compute,DB.Thm),
   ("fromAList_ind",fromAList_ind,DB.Thm),
   ("fromAList_def",fromAList_def,DB.Thm),
   ("lookup_fromAList",lookup_fromAList,DB.Thm),
   ("domain_fromAList",domain_fromAList,DB.Thm),
   ("lookup_fromAList_toAList",lookup_fromAList_toAList,DB.Thm),
   ("wf_fromAList",wf_fromAList,DB.Thm),
   ("fromAList_toAList",fromAList_toAList,DB.Thm),
   ("toList_map",toList_map,DB.Thm), ("domain_map",domain_map,DB.Thm),
   ("lookup_map",lookup_map,DB.Thm), ("map_LN",map_LN,DB.Thm),
   ("wf_map",wf_map,DB.Thm)]

  local open Portable GrammarSpecials Parse
    fun UTOFF f = Feedback.trace("Parse.unicode_trace_off_complaints",0)f
  in
  val _ = mk_local_grms [("logrootTheory.logroot_grammars",
                          logrootTheory.logroot_grammars),
                         ("alistTheory.alist_grammars",
                          alistTheory.alist_grammars)]
  val _ = List.app (update_grms reveal) []
  val _ = update_grms temp_add_type "spt"
  val _ = update_grms temp_add_type "spt"










  val _ = update_grms
       (UTOFF temp_overload_on)
       ("LN", (Term.prim_mk_const { Name = "LN", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("LN", (Term.prim_mk_const { Name = "LN", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("LS", (Term.prim_mk_const { Name = "LS", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("LS", (Term.prim_mk_const { Name = "LS", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BN", (Term.prim_mk_const { Name = "BN", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BN", (Term.prim_mk_const { Name = "BN", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BS", (Term.prim_mk_const { Name = "BS", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BS", (Term.prim_mk_const { Name = "BS", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("spt_CASE", (Term.prim_mk_const { Name = "spt_CASE", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("spt_size", (Term.prim_mk_const { Name = "spt_size", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("isEmpty", (#2 (parse_from_grammars min_grammars)[QUOTE "\\(t :('a sptree$spt)). t = (sptree$LN :('a sptree$spt))"]))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("wf", (Term.prim_mk_const { Name = "wf", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("lookup_tupled", (Term.prim_mk_const { Name = "lookup_tupled", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("lookup_tupled", (Term.prim_mk_const { Name = "lookup_tupled", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("lookup", (Term.prim_mk_const { Name = "lookup", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("lookup", (Term.prim_mk_const { Name = "lookup", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("insert_tupled", (Term.prim_mk_const { Name = "insert_tupled", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("insert_tupled", (Term.prim_mk_const { Name = "insert_tupled", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("insert", (Term.prim_mk_const { Name = "insert", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("insert", (Term.prim_mk_const { Name = "insert", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mk_BN_tupled", (Term.prim_mk_const { Name = "mk_BN_tupled", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mk_BN_tupled", (Term.prim_mk_const { Name = "mk_BN_tupled", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mk_BN", (Term.prim_mk_const { Name = "mk_BN", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mk_BN", (Term.prim_mk_const { Name = "mk_BN", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mk_BS_tupled", (Term.prim_mk_const { Name = "mk_BS_tupled", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mk_BS_tupled", (Term.prim_mk_const { Name = "mk_BS_tupled", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mk_BS", (Term.prim_mk_const { Name = "mk_BS", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mk_BS", (Term.prim_mk_const { Name = "mk_BS", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("delete", (Term.prim_mk_const { Name = "delete", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("fromList", (Term.prim_mk_const { Name = "fromList", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("fromList", (Term.prim_mk_const { Name = "fromList", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("size", (Term.prim_mk_const { Name = "size", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("union", (Term.prim_mk_const { Name = "union", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("inter", (Term.prim_mk_const { Name = "inter", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("inter_eq", (Term.prim_mk_const { Name = "inter_eq", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("difference", (Term.prim_mk_const { Name = "difference", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("lrnext", (Term.prim_mk_const { Name = "lrnext", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("lrnext", (Term.prim_mk_const { Name = "lrnext", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("domain", (Term.prim_mk_const { Name = "domain", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("foldi", (Term.prim_mk_const { Name = "foldi", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("toAList", (Term.prim_mk_const { Name = "toAList", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("toAList", (Term.prim_mk_const { Name = "toAList", Thy = "sptree"}))
  val _ = update_grms
       (temp_remove_ovl_mapping "lrnext")
        {Name = "lrnext", Thy = "sptree"}
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("toListA", (Term.prim_mk_const { Name = "toListA", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("toList", (Term.prim_mk_const { Name = "toList", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("toList", (Term.prim_mk_const { Name = "toList", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mk_wf", (Term.prim_mk_const { Name = "mk_wf", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("fromAList", (Term.prim_mk_const { Name = "fromAList", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("fromAList", (Term.prim_mk_const { Name = "fromAList", Thy = "sptree"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("map", (Term.prim_mk_const { Name = "map", Thy = "sptree"}))
  val sptree_grammars = Parse.current_lgrms()
  end


  val _ =
    TypeBase.write [
      let
        open TypeBasePure
        val tyinfo0 = mk_datatype_info
          {ax=ORIG spt_Axiom,
           case_def=spt_case_def,
           case_cong=spt_case_cong,
           induction=ORIG spt_induction,
           nchotomy=spt_nchotomy,
           size=SOME(Parse.Term`(sptree$spt_size) :('a -> (num$num)) -> ('a sptree$spt) -> (num$num)`,
                     ORIG spt_size_def),
           encode = NONE,
           lift=NONE,
           one_one=SOME spt_11,
           distinct=SOME spt_distinct,
           fields=let fun T t s A = mk_thy_type{Thy=t,Tyop=s,Args=A}
    val U = mk_vartype
in
[] end,
           accessors=[],
           updates=[],
           recognizers=[],
           destructors=[]}
        val tyinfo0 = tyinfo0
        val () = computeLib.write_datatype_info tyinfo0
      in
        tyinfo0
      end
    ];
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "sptree",
    thydataty = "simp",
    data =
        "sptree.size_def sptree.union_LN sptree.wf_map sptree.map_LN sptree.inter_LN sptree.union_mk_wf sptree.delete_mk_wf sptree.insert_mk_wf sptree.wf_inter sptree.inter_eq sptree.mk_wf_eq sptree.domain_mk_wf sptree.lookup_mk_wf sptree.wf_mk_id sptree.wf_mk_wf sptree.domain_delete sptree.domain_insert sptree.FINITE_domain sptree.domain_def sptree.lookup_insert1"
  }
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "sptree",
    thydataty = "compute",
    data =
        "sptree.wf_def sptree.map_def sptree.toAList_def sptree.fromAList_def sptree.delete_compute sptree.insert_compute sptree.lookup_compute sptree.mk_wf_def sptree.toList_def sptree.toListA_def sptree.difference_def sptree.domain_foldi sptree.foldi_def sptree.lrnext_thm sptree.inter_def sptree.inter_eq_def sptree.union_def sptree.fromList_def sptree.size_def sptree.mk_BN_def sptree.mk_BS_def"
  }

val _ = if !Globals.print_thy_loads then print "done\n" else ()
val _ = Theory.load_complete "sptree"
end
