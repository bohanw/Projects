structure mergesortTheory :> mergesortTheory =
struct
  val _ = if !Globals.print_thy_loads then print "Loading mergesortTheory ... " else ()
  open Type Term Thm
  infixr -->

  fun C s t ty = mk_thy_const{Name=s,Thy=t,Ty=ty}
  fun T s t A = mk_thy_type{Tyop=s, Thy=t,Args=A}
  fun V s q = mk_var(s,q)
  val U     = mk_vartype
  (*  Parents *)
  local open sortingTheory
  in end;
  val _ = Theory.link_parents
          ("mergesort",
          Arbnum.fromString "1488586751",
          Arbnum.fromString "174316")
          [("sorting",
           Arbnum.fromString "1488586715",
           Arbnum.fromString "45408")];
  val _ = Theory.incorporate_types "mergesort" [];

  val idvector = 
    let fun ID(thy,oth) = {Thy = thy, Other = oth}
    in Vector.fromList
  [ID("min", "fun"), ID("min", "bool"), ID("list", "list"),
   ID("pair", "prod"), ID("num", "num"), ID("bool", "!"), ID("pair", ","),
   ID("arithmetic", "-"), ID("bool", "/\\"), ID("num", "0"),
   ID("min", "="), ID("min", "==>"), ID("min", "@"), ID("list", "APPEND"),
   ID("arithmetic", "BIT1"), ID("arithmetic", "BIT2"), ID("bool", "COND"),
   ID("list", "CONS"), ID("arithmetic", "DIV2"), ID("list", "DROP"),
   ID("bool", "F"), ID("list", "FILTER"), ID("combin", "I"),
   ID("bool", "IN"), ID("list", "LENGTH"), ID("bool", "LET"),
   ID("list", "LIST_TO_SET"), ID("list", "NIL"),
   ID("arithmetic", "NUMERAL"), ID("sorting", "PERM"), ID("list", "REV"),
   ID("list", "REVERSE"), ID("sorting", "SORTED"), ID("sorting", "STABLE"),
   ID("bool", "T"), ID("list", "TAKE"), ID("relation", "WF"),
   ID("relation", "WFREC"), ID("arithmetic", "ZERO"),
   ID("list", "list_CASE"), ID("bool", "literal_case"),
   ID("mergesort", "merge"), ID("mergesort", "merge_tail"),
   ID("mergesort", "merge_tail_tupled"), ID("mergesort", "merge_tupled"),
   ID("mergesort", "mergesort"), ID("mergesort", "mergesortN"),
   ID("mergesort", "mergesortN_tail"),
   ID("mergesort", "mergesortN_tail_tupled"),
   ID("mergesort", "mergesortN_tupled"), ID("mergesort", "mergesort_tail"),
   ID("pair", "pair_CASE"), ID("mergesort", "sort2"),
   ID("mergesort", "sort2_tail"), ID("mergesort", "sort3"),
   ID("mergesort", "sort3_tail"), ID("mergesort", "stable"),
   ID("relation", "total"), ID("relation", "transitive"), ID("bool", "~")]
  end;
  local open SharingTables
  in
  val tyvector = build_type_vector idvector
  [TYOP [1], TYV "'a", TYOP [2, 1], TYOP [0, 2, 0], TYOP [0, 2, 3],
   TYOP [0, 1, 0], TYOP [0, 1, 5], TYOP [0, 6, 4], TYOP [0, 1, 2],
   TYOP [0, 1, 8], TYOP [0, 1, 9], TYOP [0, 6, 10], TYOP [0, 0, 11],
   TYOP [0, 6, 9], TYOP [0, 0, 13], TYOP [0, 2, 2], TYOP [0, 6, 15],
   TYOP [4], TYOP [3, 17, 2], TYOP [3, 6, 18], TYOP [0, 19, 2],
   TYOP [3, 0, 19], TYOP [0, 21, 2], TYOP [0, 17, 15], TYOP [0, 6, 23],
   TYOP [0, 0, 24], TYOP [3, 2, 2], TYOP [3, 6, 26], TYOP [0, 27, 2],
   TYOP [3, 2, 26], TYOP [3, 6, 29], TYOP [3, 0, 30], TYOP [0, 31, 2],
   TYOP [0, 2, 15], TYOP [0, 2, 33], TYOP [0, 6, 34], TYOP [0, 0, 35],
   TYOP [0, 6, 33], TYOP [0, 2, 4], TYOP [0, 6, 38], TYOP [0, 0, 39],
   TYOP [0, 17, 3], TYOP [0, 6, 41], TYOP [0, 0, 42], TYOP [0, 31, 0],
   TYOP [0, 31, 44], TYOP [0, 21, 0], TYOP [0, 21, 46], TYOP [0, 27, 0],
   TYOP [0, 27, 48], TYOP [0, 19, 0], TYOP [0, 19, 50], TYV "'b",
   TYOP [0, 5, 0], TYOP [0, 52, 0], TYOP [0, 54, 0], TYOP [0, 0, 0],
   TYOP [0, 56, 0], TYOP [0, 53, 0], TYOP [0, 6, 0], TYOP [0, 59, 0],
   TYOP [0, 40, 0], TYOP [0, 61, 0], TYOP [0, 43, 0], TYOP [0, 63, 0],
   TYOP [0, 7, 0], TYOP [0, 65, 0], TYOP [0, 42, 0], TYOP [0, 67, 0],
   TYOP [0, 3, 0], TYOP [0, 17, 0], TYOP [0, 70, 0], TYOP [0, 30, 31],
   TYOP [0, 0, 72], TYOP [0, 19, 21], TYOP [0, 0, 74], TYOP [0, 26, 27],
   TYOP [0, 6, 76], TYOP [0, 29, 30], TYOP [0, 6, 78], TYOP [0, 18, 19],
   TYOP [0, 6, 80], TYOP [0, 2, 26], TYOP [0, 2, 82], TYOP [0, 26, 29],
   TYOP [0, 2, 84], TYOP [0, 2, 18], TYOP [0, 17, 86], TYOP [0, 17, 17],
   TYOP [0, 17, 88], TYOP [0, 0, 56], TYOP [0, 32, 0], TYOP [0, 32, 91],
   TYOP [0, 22, 0], TYOP [0, 22, 93], TYOP [0, 28, 0], TYOP [0, 28, 95],
   TYOP [0, 20, 0], TYOP [0, 20, 97], TYOP [0, 17, 70], TYOP [0, 45, 0],
   TYOP [0, 100, 45], TYOP [0, 47, 0], TYOP [0, 102, 47], TYOP [0, 49, 0],
   TYOP [0, 104, 49], TYOP [0, 51, 0], TYOP [0, 106, 51], TYOP [0, 0, 33],
   TYOP [0, 1, 15], TYOP [0, 5, 15], TYOP [0, 1, 53], TYOP [0, 2, 17],
   TYOP [0, 0, 2], TYOP [0, 113, 113], TYOP [0, 17, 2], TYOP [0, 115, 115],
   TYOP [0, 2, 5], TYOP [0, 6, 3], TYOP [0, 16, 59], TYOP [0, 32, 32],
   TYOP [0, 120, 32], TYOP [0, 45, 121], TYOP [0, 22, 22],
   TYOP [0, 123, 22], TYOP [0, 47, 124], TYOP [0, 28, 28],
   TYOP [0, 126, 28], TYOP [0, 49, 127], TYOP [0, 20, 20],
   TYOP [0, 129, 20], TYOP [0, 51, 130], TYOP [0, 109, 2],
   TYOP [0, 2, 132], TYOP [0, 2, 133], TYOP [0, 30, 2], TYOP [0, 0, 135],
   TYOP [0, 136, 2], TYOP [0, 31, 137], TYOP [0, 0, 20], TYOP [0, 139, 2],
   TYOP [0, 21, 140], TYOP [0, 26, 2], TYOP [0, 6, 142], TYOP [0, 143, 2],
   TYOP [0, 27, 144], TYOP [0, 29, 2], TYOP [0, 6, 146], TYOP [0, 147, 2],
   TYOP [0, 30, 148], TYOP [0, 18, 2], TYOP [0, 6, 150], TYOP [0, 151, 2],
   TYOP [0, 19, 152], TYOP [0, 33, 2], TYOP [0, 26, 154], TYOP [0, 2, 142],
   TYOP [0, 156, 2], TYOP [0, 29, 157], TYOP [0, 23, 2], TYOP [0, 18, 159]]
  end
  val _ = Theory.incorporate_consts "mergesort" tyvector
     [("stable", 7), ("sort3_tail", 12), ("sort3", 11), ("sort2_tail", 14),
      ("sort2", 13), ("mergesort_tail", 16), ("mergesortN_tupled", 20),
      ("mergesortN_tail_tupled", 22), ("mergesortN_tail", 25),
      ("mergesortN", 24), ("mergesort", 16), ("merge_tupled", 28),
      ("merge_tail_tupled", 32), ("merge_tail", 36), ("merge", 37)];

  local open SharingTables
  in
  val tmvector = build_term_vector idvector tyvector
  [TMV("L", 2), TMV("P", 5), TMV("P", 40), TMV("P", 43), TMV("P", 7),
   TMV("P", 42), TMV("R", 6), TMV("R'", 45), TMV("R'", 47), TMV("R'", 49),
   TMV("R'", 51), TMV("a", 31), TMV("a", 21), TMV("a", 27), TMV("a", 19),
   TMV("acc", 52), TMV("acc", 2), TMV("l", 2), TMV("l'", 2), TMV("l''", 2),
   TMV("l'''", 2), TMV("l1", 2), TMV("l2", 2), TMV("l3", 2), TMV("l4", 2),
   TMV("len1", 17), TMV("merge_tail_tupled", 32), TMV("merge_tupled", 28),
   TMV("mergesortN_tail_tupled", 22), TMV("mergesortN_tupled", 20),
   TMV("n", 17), TMV("neg", 0), TMV("negate", 0), TMV("p", 5), TMV("v", 0),
   TMV("v", 6), TMV("v1", 6), TMV("v1", 2), TMV("v1", 17), TMV("v1", 30),
   TMV("v1", 19), TMV("v1", 26), TMV("v1", 18), TMV("v10", 1),
   TMV("v11", 2), TMV("v12", 1), TMV("v13", 2), TMV("v14", 1),
   TMV("v15", 2), TMV("v17", 2), TMV("v19", 2), TMV("v2", 2),
   TMV("v2", 17), TMV("v25", 2), TMV("v27", 2), TMV("v29", 2),
   TMV("v3", 2), TMV("v3", 29), TMV("v3", 18), TMV("v31", 2), TMV("v4", 1),
   TMV("v4", 2), TMV("v4", 17), TMV("v5", 2), TMV("v5", 26), TMV("v6", 2),
   TMV("v6", 17), TMV("v8", 1), TMV("v9", 2), TMV("x", 1), TMV("x", 0),
   TMV("x", 6), TMV("x'", 1), TMV("x''", 1), TMV("x1", 6), TMV("x1", 2),
   TMV("x1", 17), TMV("x2", 2), TMV("x2", 17), TMV("x3", 2), TMV("x4", 2),
   TMV("y", 1), TMV("y'", 1), TMV("z", 1), TMC(5, 53), TMC(5, 55),
   TMC(5, 57), TMC(5, 58), TMC(5, 60), TMC(5, 62), TMC(5, 64), TMC(5, 66),
   TMC(5, 68), TMC(5, 69), TMC(5, 71), TMC(6, 73), TMC(6, 75), TMC(6, 77),
   TMC(6, 79), TMC(6, 81), TMC(6, 83), TMC(6, 85), TMC(6, 87), TMC(7, 89),
   TMC(8, 90), TMC(9, 17), TMC(10, 90), TMC(10, 92), TMC(10, 94),
   TMC(10, 96), TMC(10, 98), TMC(10, 4), TMC(10, 99), TMC(11, 90),
   TMC(12, 101), TMC(12, 103), TMC(12, 105), TMC(12, 107), TMC(13, 33),
   TMC(14, 88), TMC(15, 88), TMC(16, 108), TMC(17, 109), TMC(18, 88),
   TMC(19, 23), TMC(20, 0), TMC(21, 110), TMC(22, 15), TMC(23, 111),
   TMC(24, 112), TMC(25, 114), TMC(25, 116), TMC(26, 117), TMC(27, 2),
   TMC(28, 88), TMC(29, 4), TMC(30, 33), TMC(31, 15), TMC(32, 118),
   TMC(33, 119), TMC(34, 0), TMC(35, 23), TMC(36, 100), TMC(36, 102),
   TMC(36, 104), TMC(36, 106), TMC(37, 122), TMC(37, 125), TMC(37, 128),
   TMC(37, 131), TMC(38, 17), TMC(39, 134), TMC(40, 116), TMC(41, 37),
   TMC(42, 36), TMC(43, 32), TMC(44, 28), TMC(45, 16), TMC(46, 24),
   TMC(47, 25), TMC(48, 22), TMC(49, 20), TMC(50, 16), TMC(51, 138),
   TMC(51, 141), TMC(51, 145), TMC(51, 149), TMC(51, 153), TMC(51, 155),
   TMC(51, 158), TMC(51, 160), TMC(52, 13), TMC(53, 14), TMC(54, 11),
   TMC(55, 12), TMC(56, 7), TMC(57, 59), TMC(58, 59), TMC(59, 56)]
  end
  local
  val DT = Thm.disk_thm val read = Term.read_raw tmvector
  in
  fun op stable_def x = x
    val op stable_def =
    DT(((("mergesort",0),[]),[]),
       [read"%88%6%93%21%93%22%106%175$2@$1@$0@@%87%33%113%84%69%84%81%113%104$2$1@@$2$0@@@$5$1@$0@@|@|@@%111%126$0@$2@@%126$0@$1@@@|@@|@|@|@"])
  fun op sort2_def x = x
    val op sort2_def =
    DT(((("mergesort",1),[]),[]),
       [read"%88%6%84%69%84%81%111%171$2@$1@$0@@%121$2$1@$0@@%122$1@%122$0@%133@@@%122$0@%122$1@%133@@@@|@|@|@"])
  fun op sort3_def x = x
    val op sort3_def =
    DT(((("mergesort",2),[]),[]),
       [read"%88%6%84%69%84%81%84%83%111%173$3@$2@$1@$0@@%121$3$2@$1@@%121$3$1@$0@@%122$2@%122$1@%122$0@%133@@@@%121$3$2@$0@@%122$2@%122$0@%122$1@%133@@@@%122$0@%122$2@%122$1@%133@@@@@@%121$3$1@$0@@%121$3$2@$0@@%122$1@%122$2@%122$0@%133@@@@%122$1@%122$0@%122$2@%133@@@@@%122$0@%122$1@%122$2@%133@@@@@@|@|@|@|@"])
  fun op merge_tupled_primitive_def x = x
    val op merge_tupled_primitive_def =
    DT(((("mergesort",3),[]),[]),
       [read"%109%156@%148%116%9%104%144$0@@%104%93%22%93%21%84%81%84%69%88%6%113%178$0$1@$2@@@$5%97$0@%100%122$1@$3@@$4@@@%97$0@%100%122$1@$3@@%122$2@$4@@@@@|@|@|@|@|@@%93%22%93%21%84%81%84%69%88%6%113$0$1@$2@@$5%97$0@%100$3@%122$2@$4@@@@%97$0@%100%122$1@$3@@%122$2@$4@@@@@|@|@|@|@|@@@|@@%27%13%165$0@%6%41%168$0@%51%56%151$0@%151$1@%127%133@@%43%44%127%122$1@$0@@||@@%81%22%151$3@%127%122$1@$0@@@%69%21%127%121$7$1@$3@@%122$1@$9%97$7@%100$0@%122$3@$2@@@@@@%122$3@$9%97$7@%100%122$1@$0@@$2@@@@@@||@||@||@||@||@@"])
  fun op merge_curried_def x = x
    val op merge_curried_def =
    DT(((("mergesort",4),[]),[]),
       [read"%88%71%93%75%93%77%111%153$2@$1@$0@@%156%97$2@%100$1@$0@@@@|@|@|@"])
  fun op mergesortN_tupled_primitive_def x = x
    val op mergesortN_tupled_primitive_def =
    DT(((("mergesort",7),[]),[]),
       [read"%110%161@%149%117%10%104%145$0@@%104%93%17%88%6%94%62%94%25%113%104%178%112$1@%105@@@%104%178%112$1@%134%119%150@@@@@%104%178%112$1@%134%120%150@@@@@%104%178%112$1@%134%119%119%150@@@@@@%112$0@%123$1@@@@@@@$4%99$2@%102%123$1@@$3@@@%99$2@%102$1@$3@@@@|@|@|@|@@%93%17%88%6%94%62%94%25%113%104%178%112$1@%105@@@%104%178%112$1@%134%119%150@@@@@%104%178%112$1@%134%120%150@@@@@%104%178%112$1@%134%119%119%150@@@@@@%112$0@%123$1@@@@@@@$4%99$2@%102%103$1@$0@@%124$0@$3@@@@%99$2@%102$1@$3@@@@|@|@|@|@@@|@@%29%14%167$0@%6%42%170$0@%52%17%152%30%121%112$0@%105@@%127%133@@%121%112$0@%134%119%150@@@@%151$1@%127%133@@%69%18%127%122$1@%133@@||@@%121%112$0@%134%120%150@@@@%151$1@%127%133@@%72%49%151$0@%127%122$1@%133@@@%81%19%127%171$8@$3@$1@@||@||@@%121%112$0@%134%119%119%150@@@@@%151$1@%127%133@@%73%53%151$0@%127%122$1@%133@@@%82%55%151$0@%127%171$8@$3@$1@@@%83%20%127%173$10@$5@$3@$1@@||@||@||@@%127%131%25%153$5@$7%99$5@%102%123$1@@$2@@@@$7%99$5@%102%103$1@$0@@%124$0@$2@@@@@|@%123$0@@@@@@@|@$1@||@||@||@@"])
  fun op mergesortN_curried_def x = x
    val op mergesortN_curried_def =
    DT(((("mergesort",8),[]),[]),
       [read"%88%71%94%76%93%77%111%158$2@$1@$0@@%161%99$2@%102$1@$0@@@@|@|@|@"])
  fun op mergesort_def x = x
    val op mergesort_def =
    DT(((("mergesort",11),[]),[]),
       [read"%88%6%93%17%111%157$1@$0@@%158$1@%129$0@@$0@@|@|@"])
  fun op sort2_tail_def x = x
    val op sort2_tail_def =
    DT(((("mergesort",12),[]),[]),
       [read"%86%31%88%6%84%69%84%81%111%172$3@$2@$1@$0@@%121%178%106$2$1@$0@@$3@@@%122$1@%122$0@%133@@@%122$0@%122$1@%133@@@@|@|@|@|@"])
  fun op sort3_tail_def x = x
    val op sort3_tail_def =
    DT(((("mergesort",13),[]),[]),
       [read"%86%31%88%6%84%69%84%81%84%83%111%174$4@$3@$2@$1@$0@@%121%178%106$3$2@$1@@$4@@@%121%178%106$3$1@$0@@$4@@@%122$2@%122$1@%122$0@%133@@@@%121%178%106$3$2@$0@@$4@@@%122$2@%122$0@%122$1@%133@@@@%122$0@%122$2@%122$1@%133@@@@@@%121%178%106$3$1@$0@@$4@@@%121%178%106$3$2@$0@@$4@@@%122$1@%122$2@%122$0@%133@@@@%122$1@%122$0@%122$2@%133@@@@@%122$0@%122$1@%122$2@%133@@@@@@|@|@|@|@|@"])
  fun op merge_tail_tupled_primitive_def x = x
    val op merge_tail_tupled_primitive_def =
    DT(((("mergesort",14),[]),[]),
       [read"%107%155@%146%114%7%104%142$0@@%104%93%16%93%22%93%21%86%32%84%81%84%69%88%6%113%178%178%106$0$1@$2@@$3@@@@$7%95$3@%98$0@%101%122$1@$4@@%100$5@%122$2@$6@@@@@@%95$3@%98$0@%101%122$1@$4@@%100%122$2@$5@@$6@@@@@@|@|@|@|@|@|@|@@%93%16%93%22%93%21%86%32%84%81%84%69%88%6%113%178%106$0$1@$2@@$3@@@$7%95$3@%98$0@%101$4@%100%122$2@$5@@%122$1@$6@@@@@@%95$3@%98$0@%101%122$1@$4@@%100%122$2@$5@@$6@@@@@@|@|@|@|@|@|@|@@@|@@%26%11%163$0@%32%39%166$0@%6%57%169$0@%61%64%168$0@%65%16%151$1@%151$3@%127$0@@%47%48%127%136%122$1@$0@@$2@@||@@%81%22%151$5@%127%136%122$1@$0@@$2@@@%69%21%127%121%178%106$9$1@$3@@$11@@@$13%95$11@%98$9@%101$0@%100%122$3@$2@@%122$1@$4@@@@@@@$13%95$11@%98$9@%101%122$1@$0@@%100$2@%122$3@$4@@@@@@@@||@||@||@||@||@||@||@@"])
  fun op merge_tail_curried_def x = x
    val op merge_tail_curried_def =
    DT(((("mergesort",15),[]),[]),
       [read"%86%70%88%74%93%77%93%79%93%80%111%154$4@$3@$2@$1@$0@@%155%95$4@%98$3@%101$2@%100$1@$0@@@@@@|@|@|@|@|@"])
  fun op mergesortN_tail_tupled_primitive_def x = x
    val op mergesortN_tail_tupled_primitive_def =
    DT(((("mergesort",18),[]),[]),
       [read"%108%160@%147%115%8%104%143$0@@%104%93%17%88%6%86%32%94%66%94%25%86%31%113%104%178%112$2@%105@@@%104%178%112$2@%134%119%150@@@@@%104%178%112$2@%134%120%150@@@@@%104%178%112$2@%134%119%119%150@@@@@@%104%112$1@%123$2@@@%106$0@%178$3@@@@@@@@$6%96$0@%99$4@%102%123$2@@$5@@@@%96$3@%99$4@%102$2@$5@@@@@|@|@|@|@|@|@@%93%17%88%6%86%32%94%66%94%25%86%31%113%104%178%112$2@%105@@@%104%178%112$2@%134%119%150@@@@@%104%178%112$2@%134%120%150@@@@@%104%178%112$2@%134%119%119%150@@@@@@%104%112$1@%123$2@@@%106$0@%178$3@@@@@@@@$6%96$0@%99$4@%102%103$2@$1@@%124$1@$5@@@@@%96$3@%99$4@%102$2@$5@@@@@|@|@|@|@|@|@@@|@@%28%12%164$0@%32%40%167$0@%6%58%170$0@%62%17%152%30%121%112$0@%105@@%127%133@@%121%112$0@%134%119%150@@@@%151$1@%127%133@@%69%18%127%122$1@%133@@||@@%121%112$0@%134%120%150@@@@%151$1@%127%133@@%72%50%151$0@%127%122$1@%133@@@%81%19%127%172$10@$8@$3@$1@@||@||@@%121%112$0@%134%119%119%150@@@@@%151$1@%127%133@@%73%54%151$0@%127%122$1@%133@@@%82%59%151$0@%127%172$10@$8@$3@$1@@@%83%20%127%174$12@$10@$5@$3@$1@@||@||@||@@%127%131%25%130%31%154$0@$6@$10%96$0@%99$6@%102%123$2@@$3@@@@@$10%96$0@%99$6@%102%103$2@$1@@%124$1@$3@@@@@@%133@|@%178$7@@|@%123$0@@@@@@@|@$1@||@||@||@||@@"])
  fun op mergesortN_tail_curried_def x = x
    val op mergesortN_tail_curried_def =
    DT(((("mergesort",19),[]),[]),
       [read"%86%70%88%74%94%78%93%79%111%159$3@$2@$1@$0@@%160%96$3@%99$2@%102$1@$0@@@@@|@|@|@|@"])
  fun op mergesort_tail_def x = x
    val op mergesort_tail_def =
    DT(((("mergesort",22),[]),[]),
       [read"%88%6%93%17%111%162$1@$0@@%159%125@$1@%129$0@@$0@@|@|@"])
  fun op merge_ind x = x
    val op merge_ind =
    DT(((("mergesort",5),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",
         [25,26,36,47,48,51,52,53,54,58,63,72,76,78,80,93,96,104,105,107,
          124]),("list",[7,46]),("numeral",[3,7,8]),("pair",[5,7,8,9,16]),
         ("prim_rec",[42]),("relation",[101,113,115]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%91%4%113%104%88%6$1$0@%133@%133@|@@%104%88%6%84%67%93%68$3$2@%122$1@$0@@%133@|@|@|@@%104%88%6%84%60%93%63$3$2@%133@%122$1@$0@@|@|@|@@%88%6%84%69%93%21%84%81%93%22%113%104%113%178$4$3@$1@@@$5$4@%122$3@$2@@$0@@@%113$4$3@$1@@$5$4@$2@%122$1@$0@@@@@$5$4@%122$3@$2@@%122$1@$0@@@|@|@|@|@|@@@@@%88%35%93%37%93%51$3$2@$1@$0@|@|@|@@|@"])
  fun op merge_def x = x
    val op merge_def =
    DT(((("mergesort",6),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",[15,25,36,51,52,53,54,58,63,93,96,104,105,107,124,129]),
         ("combin",[19]),("list",[6,7]),("mergesort",[3,4]),
         ("numeral",[3,7,8]),("pair",[7,8,9,16,49]),("prim_rec",[42]),
         ("relation",[113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%104%88%6%111%153$0@%133@%133@@%133@|@@%104%93%68%84%67%88%6%111%153$0@%122$1@$2@@%133@@%122$1@$2@@|@|@|@@%104%93%63%84%60%88%6%111%153$0@%133@%122$1@$2@@@%122$1@$2@@|@|@|@@%84%81%84%69%93%22%93%21%88%6%111%153$0@%122$3@$1@@%122$4@$2@@@%121$0$3@$4@@%122$3@%153$0@$1@%122$4@$2@@@@%122$4@%153$0@%122$3@$1@@$2@@@@|@|@|@|@|@@@@"])
  fun op mergesortN_ind x = x
    val op mergesortN_ind =
    DT(((("mergesort",9),
        [("arithmetic",
         [22,24,25,41,46,59,69,71,93,173,176,177,180,200,210,236,251]),
         ("bool",
         [15,25,26,36,47,48,52,53,54,55,56,58,63,64,72,75,76,77,78,80,93,
          95,96,101,104,105,107,123,124,129,145,164]),("combin",[19]),
         ("list",[6,46]),("mergesort",[7,8]),("numeral",[0,3,5,6,7,8]),
         ("pair",[5,7,8,9,16,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%92%5%113%104%88%6%93%17$2$1@%105@$0@|@|@@%104%88%6%84%69%93%17$3$2@%134%119%150@@@%122$1@$0@@|@|@|@@%104%88%6$1$0@%134%119%150@@@%133@|@@%104%88%6%84%69%84%81%93%17$4$3@%134%120%150@@@%122$2@%122$1@$0@@@|@|@|@|@@%104%88%6%84%69$2$1@%134%120%150@@@%122$0@%133@@|@|@@%104%88%6$1$0@%134%120%150@@@%133@|@@%104%88%6%84%69%84%81%84%83%93%17$5$4@%134%119%119%150@@@@%122$3@%122$2@%122$1@$0@@@@|@|@|@|@|@@%104%88%6%84%69%84%81$3$2@%134%119%119%150@@@@%122$1@%122$0@%133@@@|@|@|@@%104%88%6%84%69$2$1@%134%119%119%150@@@@%122$0@%133@@|@|@@%104%88%6$1$0@%134%119%119%150@@@@%133@|@@%88%6%94%62%93%17%113%104%94%25%113%104%178%112$2@%105@@@%104%178%112$2@%134%119%150@@@@@%104%178%112$2@%134%120%150@@@@@%104%178%112$2@%134%119%119%150@@@@@@%112$0@%123$2@@@@@@@$4$3@%123$2@@$1@@|@@%94%25%113%104%178%112$2@%105@@@%104%178%112$2@%134%119%150@@@@@%104%178%112$2@%134%120%150@@@@@%104%178%112$2@%134%119%119%150@@@@@@%112$0@%123$2@@@@@@@$4$3@%103$2@$0@@%124$0@$1@@@|@@@$3$2@$1@$0@@|@|@|@@@@@@@@@@@@%88%35%94%38%93%51$3$2@$1@$0@|@|@|@@|@"])
  fun op mergesortN_def x = x
    val op mergesortN_def =
    DT(((("mergesort",10),
        [("arithmetic",
         [22,24,25,41,46,59,69,71,93,173,176,177,180,200,210,236,251]),
         ("bool",
         [15,25,26,36,47,48,52,53,54,55,56,58,63,64,72,75,76,77,78,80,93,
          95,96,101,104,105,107,123,124,129,145,164]),("combin",[19]),
         ("list",[6,46]),("mergesort",[7,8]),("numeral",[0,3,5,6,7,8]),
         ("pair",[5,7,8,9,16,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%104%93%17%88%6%111%158$0@%105@$1@@%133@|@|@@%104%84%69%93%17%88%6%111%158$0@%134%119%150@@@%122$2@$1@@@%122$2@%133@@|@|@|@@%104%88%6%111%158$0@%134%119%150@@@%133@@%133@|@@%104%84%81%84%69%93%17%88%6%111%158$0@%134%120%150@@@%122$2@%122$3@$1@@@@%171$0@$2@$3@@|@|@|@|@@%104%84%69%88%6%111%158$0@%134%120%150@@@%122$1@%133@@@%122$1@%133@@|@|@@%104%88%6%111%158$0@%134%120%150@@@%133@@%133@|@@%104%84%83%84%81%84%69%93%17%88%6%111%158$0@%134%119%119%150@@@@%122$2@%122$3@%122$4@$1@@@@@%173$0@$2@$3@$4@@|@|@|@|@|@@%104%84%81%84%69%88%6%111%158$0@%134%119%119%150@@@@%122$1@%122$2@%133@@@@%171$0@$1@$2@@|@|@|@@%104%84%69%88%6%111%158$0@%134%119%119%150@@@@%122$1@%133@@@%122$1@%133@@|@|@@%104%88%6%111%158$0@%134%119%119%150@@@@%133@@%133@|@@%94%62%93%17%88%6%111%158$0@$2@$1@@%121%112$2@%105@@%133@%121%112$2@%134%119%150@@@@%151$1@%133@%69%18%122$1@%133@||@@%121%112$2@%134%120%150@@@@%151$1@%133@%72%49%151$0@%122$1@%133@@%81%19%171$4@$3@$1@||@||@@%121%112$2@%134%119%119%150@@@@@%151$1@%133@%73%53%151$0@%122$1@%133@@%82%55%151$0@%171$4@$3@$1@@%83%20%173$6@$5@$3@$1@||@||@||@@%131%25%153$1@%158$1@%123$3@@$2@@%158$1@%103$3@$0@@%124$0@$2@@@|@%123$2@@@@@@@|@|@|@@@@@@@@@@@"])
  fun op merge_tail_ind x = x
    val op merge_tail_ind =
    DT(((("mergesort",16),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",
         [25,26,36,47,48,51,52,53,54,58,63,72,76,77,78,80,93,96,104,105,
          107,124]),("list",[7,46]),("numeral",[3,7,8]),
         ("pair",[5,7,8,9,16]),("prim_rec",[42]),
         ("relation",[101,113,115]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%89%2%113%104%86%32%88%6%93%16$3$2@$1@%133@%133@$0@|@|@|@@%104%86%32%88%6%84%45%93%46%93%16$5$4@$3@%122$2@$1@@%133@$0@|@|@|@|@|@@%104%86%32%88%6%84%67%93%68%93%16$5$4@$3@%133@%122$2@$1@@$0@|@|@|@|@|@@%86%32%88%6%84%69%93%21%84%81%93%22%93%16%113%104%113%178%178%106$5$4@$2@@$6@@@@$7$6@$5@%122$4@$3@@$1@%122$2@$0@@@@%113%178%106$5$4@$2@@$6@@@$7$6@$5@$3@%122$2@$1@@%122$4@$0@@@@@$7$6@$5@%122$4@$3@@%122$2@$1@@$0@@|@|@|@|@|@|@|@@@@@%86%34%88%36%93%51%93%56%93%61$5$4@$3@$2@$1@$0@|@|@|@|@|@@|@"])
  fun op merge_tail_def x = x
    val op merge_tail_def =
    DT(((("mergesort",17),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",[15,25,36,51,52,53,54,58,63,93,96,104,105,107,124,129]),
         ("combin",[19]),("list",[6,7]),("mergesort",[14,15]),
         ("numeral",[3,7,8]),("pair",[7,8,9,16,49]),("prim_rec",[42]),
         ("relation",[113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%104%86%32%93%16%88%6%111%154$2@$0@%133@%133@$1@@$1@|@|@|@@%104%93%46%84%45%86%32%93%16%88%6%111%154$2@$0@%122$3@$4@@%133@$1@@%136%122$3@$4@@$1@@|@|@|@|@|@@%104%93%68%84%67%86%32%93%16%88%6%111%154$2@$0@%133@%122$3@$4@@$1@@%136%122$3@$4@@$1@@|@|@|@|@|@@%84%81%84%69%86%32%93%22%93%21%93%16%88%6%111%154$4@$0@%122$5@$2@@%122$6@$3@@$1@@%121%178%106$0$5@$6@@$4@@@%154$4@$0@$2@%122$6@$3@@%122$5@$1@@@%154$4@$0@%122$5@$2@@$3@%122$6@$1@@@@|@|@|@|@|@|@|@@@@"])
  fun op mergesortN_tail_ind x = x
    val op mergesortN_tail_ind =
    DT(((("mergesort",20),
        [("arithmetic",
         [22,24,25,41,46,59,69,71,93,173,176,177,180,200,210,236,251]),
         ("bool",
         [15,25,26,36,47,48,52,53,54,55,56,58,63,64,72,75,76,77,78,80,93,
          95,96,101,104,105,107,123,124,129,145,164]),("combin",[19]),
         ("list",[6,46]),("mergesort",[18,19]),("numeral",[0,3,5,6,7,8]),
         ("pair",[5,7,8,9,16,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%90%3%113%104%86%32%88%6%93%17$3$2@$1@%105@$0@|@|@|@@%104%86%32%88%6%84%69%93%17$4$3@$2@%134%119%150@@@%122$1@$0@@|@|@|@|@@%104%86%32%88%6$2$1@$0@%134%119%150@@@%133@|@|@@%104%86%32%88%6%84%69%84%81%93%17$5$4@$3@%134%120%150@@@%122$2@%122$1@$0@@@|@|@|@|@|@@%104%86%32%88%6%84%69$3$2@$1@%134%120%150@@@%122$0@%133@@|@|@|@@%104%86%32%88%6$2$1@$0@%134%120%150@@@%133@|@|@@%104%86%32%88%6%84%69%84%81%84%83%93%17$6$5@$4@%134%119%119%150@@@@%122$3@%122$2@%122$1@$0@@@@|@|@|@|@|@|@@%104%86%32%88%6%84%69%84%81$4$3@$2@%134%119%119%150@@@@%122$1@%122$0@%133@@@|@|@|@|@@%104%86%32%88%6%84%69$3$2@$1@%134%119%119%150@@@@%122$0@%133@@|@|@|@@%104%86%32%88%6$2$1@$0@%134%119%119%150@@@@%133@|@|@@%86%32%88%6%94%66%93%17%113%104%94%25%86%31%113%104%178%112$3@%105@@@%104%178%112$3@%134%119%150@@@@@%104%178%112$3@%134%120%150@@@@@%104%178%112$3@%134%119%119%150@@@@@@%104%112$1@%123$3@@@%106$0@%178$5@@@@@@@@$6$0@$4@%123$3@@$2@@|@|@@%94%25%86%31%113%104%178%112$3@%105@@@%104%178%112$3@%134%119%150@@@@@%104%178%112$3@%134%120%150@@@@@%104%178%112$3@%134%119%119%150@@@@@@%104%112$1@%123$3@@@%106$0@%178$5@@@@@@@@$6$0@$4@%103$3@$1@@%124$1@$2@@@|@|@@@$4$3@$2@$1@$0@@|@|@|@|@@@@@@@@@@@@%86%34%88%36%94%52%93%56$4$3@$2@$1@$0@|@|@|@|@@|@"])
  fun op mergesortN_tail_def x = x
    val op mergesortN_tail_def =
    DT(((("mergesort",21),
        [("arithmetic",
         [22,24,25,41,46,59,69,71,93,173,176,177,180,200,210,236,251]),
         ("bool",
         [15,25,26,36,47,48,52,53,54,55,56,58,63,64,72,75,76,77,78,80,93,
          95,96,101,104,105,107,123,124,129,145,164]),("combin",[19]),
         ("list",[6,46]),("mergesort",[18,19]),("numeral",[0,3,5,6,7,8]),
         ("pair",[5,7,8,9,16,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%104%86%32%93%17%88%6%111%159$2@$0@%105@$1@@%133@|@|@|@@%104%84%69%86%32%93%17%88%6%111%159$2@$0@%134%119%150@@@%122$3@$1@@@%122$3@%133@@|@|@|@|@@%104%86%32%88%6%111%159$1@$0@%134%119%150@@@%133@@%133@|@|@@%104%84%81%84%69%86%32%93%17%88%6%111%159$2@$0@%134%120%150@@@%122$3@%122$4@$1@@@@%172$2@$0@$3@$4@@|@|@|@|@|@@%104%84%69%86%32%88%6%111%159$1@$0@%134%120%150@@@%122$2@%133@@@%122$2@%133@@|@|@|@@%104%86%32%88%6%111%159$1@$0@%134%120%150@@@%133@@%133@|@|@@%104%84%83%84%81%84%69%86%32%93%17%88%6%111%159$2@$0@%134%119%119%150@@@@%122$3@%122$4@%122$5@$1@@@@@%174$2@$0@$3@$4@$5@@|@|@|@|@|@|@@%104%84%81%84%69%86%32%88%6%111%159$1@$0@%134%119%119%150@@@@%122$2@%122$3@%133@@@@%172$1@$0@$2@$3@@|@|@|@|@@%104%84%69%86%32%88%6%111%159$1@$0@%134%119%119%150@@@@%122$2@%133@@@%122$2@%133@@|@|@|@@%104%86%32%88%6%111%159$1@$0@%134%119%119%150@@@@%133@@%133@|@|@@%94%66%86%32%93%17%88%6%111%159$2@$0@$3@$1@@%121%112$3@%105@@%133@%121%112$3@%134%119%150@@@@%151$1@%133@%69%18%122$1@%133@||@@%121%112$3@%134%120%150@@@@%151$1@%133@%72%50%151$0@%122$1@%133@@%81%19%172$6@$4@$3@$1@||@||@@%121%112$3@%134%119%119%150@@@@@%151$1@%133@%73%54%151$0@%122$1@%133@@%82%59%151$0@%172$6@$4@$3@$1@@%83%20%174$8@$6@$5@$3@$1@||@||@||@@%131%25%130%31%154$0@$2@%159$0@$2@%123$5@@$3@@%159$0@$2@%103$5@$1@@%124$1@$3@@@%133@|@%178$3@@|@%123$3@@@@@@@|@|@|@|@@@@@@@@@@@"])
  fun op sort2_perm x = x
    val op sort2_perm =
    DT(((("mergesort",23),
        [("bool",[25,26,27,30,51,56,58,63,64]),("list",[20,48]),
         ("mergesort",[1]),
         ("sorting",[8,9,10,63,90,93,97,101])]),["DISK_THM"]),
       [read"%88%6%84%69%84%81%135%122$1@%122$0@%133@@@%171$2@$1@$0@@|@|@|@"])
  fun op sort3_perm x = x
    val op sort3_perm =
    DT(((("mergesort",24),
        [("bool",[25,26,27,30,51,56,58,63,64]),("list",[20,48]),
         ("mergesort",[2]),
         ("sorting",[8,9,10,63,90,93,97,101])]),["DISK_THM"]),
       [read"%88%6%84%69%84%81%84%83%135%122$2@%122$1@%122$0@%133@@@@%173$3@$2@$1@$0@@|@|@|@|@"])
  fun op merge_perm x = x
    val op merge_perm =
    DT(((("mergesort",25),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",
         [15,25,26,27,30,36,51,52,53,54,58,63,64,93,96,104,105,107,124,
          129]),("combin",[19]),("list",[6,7,20,55,56]),
         ("mergesort",[3,4,5]),("numeral",[3,7,8]),("pair",[7,8,9,16,49]),
         ("prim_rec",[42]),("relation",[113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sorting",
         [1,8,9,63,90,91,93,94,96,97,98,100,101])]),["DISK_THM"]),
       [read"%88%6%93%21%93%22%135%118$1@$0@@%153$2@$1@$0@@|@|@|@"])
  fun op mergesortN_perm x = x
    val op mergesortN_perm =
    DT(((("mergesort",26),
        [("arithmetic",
         [22,24,25,41,46,59,63,69,71,93,130,173,176,177,180,198,200,210,
          213,236,251]),
         ("bool",
         [14,15,25,26,27,30,36,47,48,51,52,53,54,55,56,58,63,64,72,75,76,
          77,78,80,93,95,96,101,104,105,107,123,124,129,145,147,164]),
         ("combin",[8,11,15,16,19,33,35]),("list",[6,46,48,192,194]),
         ("marker",[6,9]),("mergesort",[7,8,9,23,24,25]),
         ("numeral",[0,3,5,6,7,8,15,16,17]),("pair",[5,7,8,9,16,49]),
         ("prim_rec",[43,44]),("relation",[101,113,121,126]),
         ("rich_list",[338]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[4,6,9,10])]),["DISK_THM"]),
       [read"%88%6%94%30%93%17%135%141$1@$0@@%158$2@$1@$0@@|@|@|@"])
  fun op mergesort_perm x = x
    val op mergesort_perm =
    DT(((("mergesort",27),
        [("bool",[25,53,54,63]),("list",[195]),("mergesort",[11,26]),
         ("sat",[1,3,5,6,7,11,14,17,18,19,20,23])]),["DISK_THM"]),
       [read"%88%6%93%17%135$0@%157$1@$0@@|@|@"])
  fun op sort2_sorted x = x
    val op sort2_sorted =
    DT(((("mergesort",28),
        [("bool",[25,26,27,30,51,53,54,58,63,64,105,124]),
         ("mergesort",[1]),("relation",[6]),("sat",[1,3,5,7,17,18]),
         ("sorting",[29])]),["DISK_THM"]),
       [read"%88%6%84%69%84%81%113%176$2@@%138$2@%171$2@$1@$0@@@|@|@|@"])
  fun op sort3_sorted x = x
    val op sort3_sorted =
    DT(((("mergesort",29),
        [("bool",[25,26,27,30,51,53,54,58,63,64,105,124]),
         ("mergesort",[2]),("relation",[6]),("sat",[1,3,5,7,17,18]),
         ("sorting",[29])]),["DISK_THM"]),
       [read"%88%6%84%69%84%81%84%83%113%176$3@@%138$3@%173$3@$2@$1@$0@@@|@|@|@|@"])
  fun op merge_sorted x = x
    val op merge_sorted =
    DT(((("mergesort",30),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",
         [15,25,26,27,30,36,51,52,53,54,58,63,64,93,96,104,105,107,124,
          129]),("combin",[19]),("list",[6,7,20,81,120]),
         ("mergesort",[3,4,5,25]),("numeral",[3,7,8]),
         ("pair",[7,8,9,16,49]),("prim_rec",[42]),
         ("relation",[0,6,113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18]),
         ("sorting",[31,77,83])]),["DISK_THM"]),
       [read"%88%6%93%21%93%22%113%104%177$2@@%104%176$2@@%104%138$2@$1@@%138$2@$0@@@@@%138$2@%153$2@$1@$0@@@|@|@|@"])
  fun op mergesortN_sorted x = x
    val op mergesortN_sorted =
    DT(((("mergesort",31),
        [("arithmetic",
         [22,24,25,41,46,59,69,71,93,173,176,177,180,200,210,236,251]),
         ("bool",
         [15,25,26,27,30,36,47,48,52,53,54,55,56,58,63,64,72,75,76,77,78,
          80,93,95,96,101,104,105,107,123,124,129,145,164]),
         ("combin",[8,11,15,16,19,33,35]),("list",[6,46]),("marker",[6,9]),
         ("mergesort",[7,8,9,28,29,30]),("numeral",[0,3,5,6,7,8]),
         ("pair",[5,7,8,9,16,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18]),
         ("sorting",[29,77,78])]),["DISK_THM"]),
       [read"%88%6%94%30%93%17%113%104%176$2@@%177$2@@@%138$2@%158$2@$1@$0@@@|@|@|@"])
  fun op mergesort_sorted x = x
    val op mergesort_sorted =
    DT(((("mergesort",32),
        [("bool",[25,53,54,63]),("mergesort",[11,31]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%88%6%93%17%113%104%177$1@@%176$1@@@%138$1@%157$1@$0@@@|@|@"])
  fun op stable_cong x = x
    val op stable_cong =
    DT(((("mergesort",33),
        [("bool",[25,36,51,53,58,63,105,124]),("list",[104,119]),
         ("mergesort",[0])]),["DISK_THM"]),
       [read"%88%6%93%21%93%22%93%23%93%24%113%104%175$4@$3@$2@@%175$4@$1@$0@@@%175$4@%118$3@$1@@%118$2@$0@@@|@|@|@|@|@"])
  fun op stable_trans x = x
    val op stable_trans =
    DT(((("mergesort",34),
        [("bool",[25,36,51,53,58,63,105,124]),
         ("mergesort",[0])]),["DISK_THM"]),
       [read"%88%6%93%21%93%22%93%23%113%104%175$3@$2@$1@@%175$3@$1@$0@@@%175$3@$2@$0@@|@|@|@|@"])
  fun op sort2_stable x = x
    val op sort2_stable =
    DT(((("mergesort",35),
        [("bool",[25,26,27,30,36,51,53,54,56,58,63,64,105,124,129]),
         ("list",[9,20,27]),("mergesort",[0,1]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%88%6%84%69%84%81%175$2@%122$1@%122$0@%133@@@%171$2@$1@$0@@|@|@|@"])
  fun op sort3_stable x = x
    val op sort3_stable =
    DT(((("mergesort",36),
        [("bool",
         [2,15,25,26,27,30,36,51,53,54,56,58,63,64,75,84,99,105,124,129]),
         ("list",[9,20,27]),("mergesort",[0,2]),("relation",[0,6]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%88%6%84%69%84%81%84%83%113%104%176$3@@%177$3@@@%175$3@%122$2@%122$1@%122$0@%133@@@@%173$3@$2@$1@$0@@@|@|@|@|@"])
  fun op filter_merge x = x
    val op filter_merge =
    DT(((("mergesort",37),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",
         [2,15,25,26,27,30,36,51,52,53,54,56,58,63,64,75,84,93,96,99,104,
          105,107,124,129,147]),("combin",[8,19]),
         ("list",[6,7,20,27,48,55,56,75,87,104,114,119]),
         ("mergesort",[3,4,5]),("numeral",[3,7,8]),("pair",[7,8,9,16,49]),
         ("prim_rec",[42]),("relation",[0,113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18]),
         ("sorting",[31,77])]),["DISK_THM"]),
       [read"%87%1%88%6%93%21%93%22%113%104%177$2@@%104%84%69%84%81%113%104$5$1@@$5$0@@@$4$1@$0@@|@|@@%138$2@$1@@@@%111%126$3@%153$2@$1@$0@@@%126$3@%118$1@$0@@@@|@|@|@|@"])
  fun op merge_stable x = x
    val op merge_stable =
    DT(((("mergesort",38),
        [("bool",[25,36,51,53,58,63,105,124]),
         ("mergesort",[0,37])]),["DISK_THM"]),
       [read"%88%6%93%21%93%22%113%104%177$2@@%138$2@$1@@@%175$2@%118$1@$0@@%153$2@$1@$0@@@|@|@|@"])
  fun op mergesortN_stable x = x
    val op mergesortN_stable =
    DT(((("mergesort",39),
        [("arithmetic",
         [22,24,25,41,46,59,63,69,71,93,130,173,176,177,180,198,200,210,
          213,236,251]),
         ("bool",
         [14,15,25,26,27,30,36,47,48,51,52,53,54,55,56,58,63,64,72,75,76,
          77,78,80,93,95,96,101,104,105,107,123,124,129,145,147,164]),
         ("combin",[8,11,15,16,19,33,35]),("list",[6,27,46,192,194]),
         ("marker",[6,9]),("mergesort",[0,7,8,9,31,33,34,35,36,38]),
         ("numeral",[0,3,5,6,7,8,15,16,17]),("pair",[5,7,8,9,16,49]),
         ("prim_rec",[43,44]),("relation",[101,113,121,126]),
         ("rich_list",[338]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%88%6%94%30%93%17%113%104%176$2@@%177$2@@@%175$2@%141$1@$0@@%158$2@$1@$0@@@|@|@|@"])
  fun op mergesort_stable x = x
    val op mergesort_stable =
    DT(((("mergesort",40),
        [("bool",[25,53,54,63]),("list",[195]),("mergesort",[11,39]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%88%6%93%17%113%104%177$1@@%176$1@@@%175$1@$0@%157$1@$0@@@|@|@"])
  fun op mergesort_STABLE_SORT x = x
    val op mergesort_STABLE_SORT =
    DT(((("mergesort",41),
        [("bool",[2,15,25,26,53,54,58,63,74,75,84,99,105,124]),
         ("mergesort",[0,27,32,40]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18]),
         ("sorting",[30,104])]),["DISK_THM"]),
       [read"%88%6%113%104%177$0@@%176$0@@@%139%157@$0@@|@"])
  fun op mergesort_mem x = x
    val op mergesort_mem =
    DT(((("mergesort",42),
        [("bool",[25,26,53,54,58,63,83,100]),("mergesort",[27]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18]),
         ("sorting",[83])]),["DISK_THM"]),
       [read"%88%6%93%0%84%69%106%128$0@%132%157$2@$1@@@@%128$0@%132$1@@@|@|@|@"])
  fun op sort2_tail_correct x = x
    val op sort2_tail_correct =
    DT(((("mergesort",43),
        [("bool",[25,26,27,30,48,51,54,56,58,63,64,105,129]),
         ("list",[20,22,48,106,173]),("mergesort",[1,12]),
         ("prim_rec",[1])]),["DISK_THM"]),
       [read"%86%31%88%6%84%69%84%81%111%172$3@$2@$1@$0@@%121$3@%137%171$2@$1@$0@@@%171$2@$1@$0@@@|@|@|@|@"])
  fun op sort3_tail_correct x = x
    val op sort3_tail_correct =
    DT(((("mergesort",44),
        [("bool",[25,26,27,30,48,51,54,56,58,63,64,105,129]),
         ("list",[20,22,48,106,173]),("mergesort",[2,13]),
         ("prim_rec",[1])]),["DISK_THM"]),
       [read"%86%31%88%6%84%69%84%81%84%83%111%174$4@$3@$2@$1@$0@@%121$4@%137%173$3@$2@$1@$0@@@%173$3@$2@$1@$0@@@|@|@|@|@|@"])
  fun op merge_tail_correct1 x = x
    val op merge_tail_correct1 =
    DT(((("mergesort",45),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",
         [15,25,26,27,30,36,51,52,53,54,58,62,63,64,93,96,104,105,107,124,
          129]),("combin",[19]),("list",[6,7,20,55,56,104,173,174,314]),
         ("mergesort",[3,4,14,15,16]),("numeral",[3,7,8]),
         ("pair",[7,8,9,16,49]),("prim_rec",[42]),
         ("relation",[113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%86%31%88%6%93%21%93%22%93%16%113%106$4@%125@@%111%154$4@$3@$2@$1@$0@@%118%137%153$3@$2@$1@@@$0@@@|@|@|@|@|@"])
  fun op merge_empty x = x
    val op merge_empty =
    DT(((("mergesort",46),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",
         [15,25,36,51,52,53,54,56,58,63,93,96,104,105,107,124,129]),
         ("combin",[19]),("list",[6,7,46,48]),("mergesort",[3,4]),
         ("numeral",[3,7,8]),("pair",[7,8,9,16,49]),("prim_rec",[42]),
         ("relation",[113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%88%6%93%17%85%15%104%111%153$2@$1@%133@@$1@@%111%153$2@%133@$1@@$1@@|@|@|@"])
  fun op merge_tail_correct2 x = x
    val op merge_tail_correct2 =
    DT(((("mergesort",47),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",
         [2,14,15,25,26,27,30,36,51,52,53,54,55,56,58,63,64,73,75,84,93,96,
          99,101,104,105,107,124,129,145,147]),("combin",[19]),
         ("list",[6,7,20,43,48,55,56,81,104,120,173,174,177,314]),
         ("mergesort",[3,4,5,14,15,16,46]),("numeral",[3,7,8]),
         ("pair",[7,8,9,16,49]),("prim_rec",[42]),
         ("relation",[0,113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[31,77,82])]),["DISK_THM"]),
       [read"%86%31%88%6%93%21%93%22%93%16%113%104%106$4@%140@@%104%177$3@@%104%138$3@%137$2@@@%138$3@%137$1@@@@@@%111%154$4@$3@$2@$1@$0@@%118%153$3@%137$2@@%137$1@@@$0@@@|@|@|@|@|@"])
  fun op mergesortN_correct x = x
    val op mergesortN_correct =
    DT(((("mergesort",48),
        [("arithmetic",
         [22,24,25,41,46,59,69,71,93,173,176,177,180,200,210,236,251]),
         ("bool",
         [15,25,26,27,30,36,47,48,51,52,53,54,55,56,58,63,64,72,74,75,76,
          77,78,80,93,95,96,101,104,105,107,123,124,129,145,147,164]),
         ("combin",[8,11,15,16,17,19,33,34,35]),
         ("list",[6,20,46,48,55,173,175,176]),("marker",[6,9]),
         ("mergesort",[7,8,18,19,20,31,43,44,45,47]),
         ("numeral",[0,3,5,6,7,8]),("pair",[5,7,8,9,16,49]),
         ("prim_rec",[43,44]),("relation",[101,113,121,126]),
         ("rich_list",[52]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%86%32%88%6%94%30%93%17%113%104%176$2@@%177$2@@@%111%159$3@$2@$1@$0@@%121$3@%137%158$2@$1@$0@@@%158$2@$1@$0@@@@|@|@|@|@"])
  fun op mergesort_tail_correct x = x
    val op mergesort_tail_correct =
    DT(((("mergesort",49),
        [("bool",[25,51,53,58,63,105,124,147]),
         ("mergesort",[11,22,48])]),["DISK_THM"]),
       [read"%88%6%93%17%113%104%176$1@@%177$1@@@%111%162$1@$0@@%157$1@$0@@@|@|@"])
  end
  val _ = DB.bindl "mergesort"
  [("stable_def",stable_def,DB.Def), ("sort2_def",sort2_def,DB.Def),
   ("sort3_def",sort3_def,DB.Def),
   ("merge_tupled_primitive_def",merge_tupled_primitive_def,DB.Def),
   ("merge_curried_def",merge_curried_def,DB.Def),
   ("mergesortN_tupled_primitive_def",
    mergesortN_tupled_primitive_def,
    DB.Def), ("mergesortN_curried_def",mergesortN_curried_def,DB.Def),
   ("mergesort_def",mergesort_def,DB.Def),
   ("sort2_tail_def",sort2_tail_def,DB.Def),
   ("sort3_tail_def",sort3_tail_def,DB.Def),
   ("merge_tail_tupled_primitive_def",
    merge_tail_tupled_primitive_def,
    DB.Def), ("merge_tail_curried_def",merge_tail_curried_def,DB.Def),
   ("mergesortN_tail_tupled_primitive_def",
    mergesortN_tail_tupled_primitive_def,
    DB.Def),
   ("mergesortN_tail_curried_def",mergesortN_tail_curried_def,DB.Def),
   ("mergesort_tail_def",mergesort_tail_def,DB.Def),
   ("merge_ind",merge_ind,DB.Thm), ("merge_def",merge_def,DB.Thm),
   ("mergesortN_ind",mergesortN_ind,DB.Thm),
   ("mergesortN_def",mergesortN_def,DB.Thm),
   ("merge_tail_ind",merge_tail_ind,DB.Thm),
   ("merge_tail_def",merge_tail_def,DB.Thm),
   ("mergesortN_tail_ind",mergesortN_tail_ind,DB.Thm),
   ("mergesortN_tail_def",mergesortN_tail_def,DB.Thm),
   ("sort2_perm",sort2_perm,DB.Thm), ("sort3_perm",sort3_perm,DB.Thm),
   ("merge_perm",merge_perm,DB.Thm),
   ("mergesortN_perm",mergesortN_perm,DB.Thm),
   ("mergesort_perm",mergesort_perm,DB.Thm),
   ("sort2_sorted",sort2_sorted,DB.Thm),
   ("sort3_sorted",sort3_sorted,DB.Thm),
   ("merge_sorted",merge_sorted,DB.Thm),
   ("mergesortN_sorted",mergesortN_sorted,DB.Thm),
   ("mergesort_sorted",mergesort_sorted,DB.Thm),
   ("stable_cong",stable_cong,DB.Thm),
   ("stable_trans",stable_trans,DB.Thm),
   ("sort2_stable",sort2_stable,DB.Thm),
   ("sort3_stable",sort3_stable,DB.Thm),
   ("filter_merge",filter_merge,DB.Thm),
   ("merge_stable",merge_stable,DB.Thm),
   ("mergesortN_stable",mergesortN_stable,DB.Thm),
   ("mergesort_stable",mergesort_stable,DB.Thm),
   ("mergesort_STABLE_SORT",mergesort_STABLE_SORT,DB.Thm),
   ("mergesort_mem",mergesort_mem,DB.Thm),
   ("sort2_tail_correct",sort2_tail_correct,DB.Thm),
   ("sort3_tail_correct",sort3_tail_correct,DB.Thm),
   ("merge_tail_correct1",merge_tail_correct1,DB.Thm),
   ("merge_empty",merge_empty,DB.Thm),
   ("merge_tail_correct2",merge_tail_correct2,DB.Thm),
   ("mergesortN_correct",mergesortN_correct,DB.Thm),
   ("mergesort_tail_correct",mergesort_tail_correct,DB.Thm)]

  local open Portable GrammarSpecials Parse
    fun UTOFF f = Feedback.trace("Parse.unicode_trace_off_complaints",0)f
  in
  val _ = mk_local_grms [("sortingTheory.sorting_grammars",
                          sortingTheory.sorting_grammars)]
  val _ = List.app (update_grms reveal) []
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("stable", (Term.prim_mk_const { Name = "stable", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("stable", (Term.prim_mk_const { Name = "stable", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("sort2", (Term.prim_mk_const { Name = "sort2", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("sort2", (Term.prim_mk_const { Name = "sort2", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("sort3", (Term.prim_mk_const { Name = "sort3", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("sort3", (Term.prim_mk_const { Name = "sort3", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("merge_tupled", (Term.prim_mk_const { Name = "merge_tupled", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("merge_tupled", (Term.prim_mk_const { Name = "merge_tupled", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("merge", (Term.prim_mk_const { Name = "merge", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("merge", (Term.prim_mk_const { Name = "merge", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mergesortN_tupled", (Term.prim_mk_const { Name = "mergesortN_tupled", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mergesortN_tupled", (Term.prim_mk_const { Name = "mergesortN_tupled", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mergesortN", (Term.prim_mk_const { Name = "mergesortN", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mergesortN", (Term.prim_mk_const { Name = "mergesortN", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mergesort", (Term.prim_mk_const { Name = "mergesort", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mergesort", (Term.prim_mk_const { Name = "mergesort", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("sort2_tail", (Term.prim_mk_const { Name = "sort2_tail", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("sort2_tail", (Term.prim_mk_const { Name = "sort2_tail", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("sort3_tail", (Term.prim_mk_const { Name = "sort3_tail", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("sort3_tail", (Term.prim_mk_const { Name = "sort3_tail", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("merge_tail_tupled", (Term.prim_mk_const { Name = "merge_tail_tupled", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("merge_tail_tupled", (Term.prim_mk_const { Name = "merge_tail_tupled", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("merge_tail", (Term.prim_mk_const { Name = "merge_tail", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("merge_tail", (Term.prim_mk_const { Name = "merge_tail", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mergesortN_tail_tupled", (Term.prim_mk_const { Name = "mergesortN_tail_tupled", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mergesortN_tail_tupled", (Term.prim_mk_const { Name = "mergesortN_tail_tupled", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mergesortN_tail", (Term.prim_mk_const { Name = "mergesortN_tail", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mergesortN_tail", (Term.prim_mk_const { Name = "mergesortN_tail", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mergesort_tail", (Term.prim_mk_const { Name = "mergesort_tail", Thy = "mergesort"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("mergesort_tail", (Term.prim_mk_const { Name = "mergesort_tail", Thy = "mergesort"}))
  val mergesort_grammars = Parse.current_lgrms()
  end
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "mergesort",
    thydataty = "compute",
    data =
        "mergesort.stable_def mergesort.merge_tail_def mergesort.mergesort_tail_def mergesort.mergesortN_tail_def mergesort.sort2_tail_def mergesort.sort3_tail_def mergesort.merge_def mergesort.mergesort_def mergesort.mergesortN_def mergesort.sort2_def mergesort.sort3_def"
  }

val _ = if !Globals.print_thy_loads then print "done\n" else ()
val _ = Theory.load_complete "mergesort"
end
