structure sortingTheory :> sortingTheory =
struct
  val _ = if !Globals.print_thy_loads then print "Loading sortingTheory ... " else ()
  open Type Term Thm
  infixr -->

  fun C s t ty = mk_thy_const{Name=s,Thy=t,Ty=ty}
  fun T s t A = mk_thy_type{Tyop=s, Thy=t,Args=A}
  fun V s q = mk_var(s,q)
  val U     = mk_vartype
  (*  Parents *)
  local open quantHeuristicsTheory rich_listTheory
  in end;
  val _ = Theory.link_parents
          ("sorting",
          Arbnum.fromString "1488586715",
          Arbnum.fromString "45408")
          [("quantHeuristics",
           Arbnum.fromString "1488586638",
           Arbnum.fromString "944227"),
           ("rich_list",
           Arbnum.fromString "1488586542",
           Arbnum.fromString "856749")];
  val _ = Theory.incorporate_types "sorting" [];

  val idvector = 
    let fun ID(thy,oth) = {Thy = thy, Other = oth}
    in Vector.fromList
  [ID("min", "fun"), ID("min", "bool"), ID("list", "list"),
   ID("pair", "prod"), ID("num", "num"), ID("bool", "!"), ID("pair", "##"),
   ID("arithmetic", "*"), ID("arithmetic", "+"), ID("pair", ","),
   ID("bool", "/\\"), ID("prim_rec", "<"), ID("arithmetic", "<="),
   ID("min", "="), ID("min", "==>"), ID("bool", "?"), ID("min", "@"),
   ID("list", "ALL_DISTINCT"), ID("list", "APPEND"),
   ID("operator", "ASSOC"), ID("operator", "COMM"), ID("bool", "COND"),
   ID("list", "CONS"), ID("rich_list", "COUNT_LIST"),
   ID("arithmetic", "DIV"), ID("list", "EL"), ID("relation", "EQC"),
   ID("list", "FILTER"), ID("list", "FOLDR"), ID("list", "GENLIST"),
   ID("list", "HD"), ID("combin", "I"), ID("bool", "IN"),
   ID("list", "LAST"), ID("list", "LENGTH"), ID("bool", "LET"),
   ID("list", "LIST_TO_SET"), ID("list", "MAP"), ID("arithmetic", "MOD"),
   ID("list", "NIL"), ID("sorting", "PART"), ID("sorting", "PART3"),
   ID("sorting", "PARTITION"), ID("sorting", "PERM"),
   ID("sorting", "PERM_SINGLE_SWAP"), ID("sorting", "QSORT"),
   ID("sorting", "QSORT3"), ID("sorting", "QSORT3_tupled"),
   ID("sorting", "QSORT_tupled"), ID("rich_list", "REPLICATE"),
   ID("list", "REVERSE"), ID("relation", "RTC"), ID("list", "SET_TO_LIST"),
   ID("sorting", "SORTED"), ID("sorting", "SORTED_tupled"),
   ID("sorting", "SORTS"), ID("sorting", "STABLE"), ID("num", "SUC"),
   ID("list", "SUM"), ID("pred_set", "SUM_IMAGE"), ID("bool", "T"),
   ID("relation", "TC"), ID("pair", "UNCURRY"), ID("relation", "WF"),
   ID("relation", "WFREC"), ID("bool", "\\/"),
   ID("relation", "antisymmetric"), ID("pred_set", "count"),
   ID("relation", "equivalence"), ID("relation", "inv_image"),
   ID("relation", "irreflexive"), ID("list", "list_CASE"),
   ID("combin", "o"), ID("pair", "pair_CASE"), ID("relation", "total"),
   ID("relation", "transitive"), ID("bool", "~")]
  end;
  local open SharingTables
  in
  val tyvector = build_type_vector idvector
  [TYOP [1], TYV "'a", TYOP [0, 1, 0], TYOP [0, 1, 2], TYOP [0, 3, 0],
   TYOP [2, 1], TYOP [0, 5, 5], TYOP [0, 3, 6], TYOP [0, 7, 4],
   TYOP [3, 3, 5], TYOP [0, 9, 0], TYOP [0, 5, 0], TYOP [0, 3, 11],
   TYOP [0, 9, 5], TYOP [0, 5, 11], TYOP [3, 5, 5], TYOP [0, 5, 15],
   TYOP [0, 2, 16], TYOP [3, 5, 15], TYOP [0, 5, 18], TYOP [0, 1, 19],
   TYOP [0, 3, 20], TYOP [0, 5, 16], TYOP [0, 5, 22], TYOP [0, 2, 23],
   TYOP [4], TYOP [2, 25], TYV "'b", TYOP [0, 27, 0], TYOP [0, 27, 28],
   TYOP [0, 9, 10], TYOP [0, 1, 27], TYOP [0, 1, 1], TYOP [0, 1, 32],
   TYOP [0, 27, 1], TYOP [0, 27, 25], TYOP [0, 5, 27], TYOP [2, 27],
   TYOP [0, 5, 37], TYOP [0, 25, 25], TYOP [0, 25, 39], TYOP [0, 2, 0],
   TYOP [0, 31, 0], TYOP [0, 42, 0], TYOP [0, 41, 0], TYOP [0, 33, 0],
   TYOP [0, 45, 0], TYOP [0, 4, 0], TYOP [0, 34, 0], TYOP [0, 48, 0],
   TYOP [0, 29, 0], TYOP [0, 50, 0], TYOP [0, 35, 0], TYOP [0, 52, 0],
   TYOP [0, 12, 0], TYOP [0, 54, 0], TYOP [0, 7, 0], TYOP [0, 56, 0],
   TYOP [0, 36, 0], TYOP [0, 58, 0], TYOP [0, 11, 0], TYOP [0, 60, 0],
   TYOP [0, 14, 0], TYOP [0, 62, 0], TYOP [0, 38, 0], TYOP [0, 64, 0],
   TYOP [0, 37, 0], TYOP [0, 66, 0], TYOP [0, 26, 0], TYOP [0, 68, 0],
   TYOP [0, 25, 0], TYOP [0, 70, 0], TYOP [0, 15, 15], TYOP [0, 6, 72],
   TYOP [0, 6, 73], TYOP [0, 18, 18], TYOP [0, 72, 75], TYOP [0, 6, 76],
   TYOP [0, 5, 9], TYOP [0, 3, 78], TYOP [0, 15, 18], TYOP [0, 5, 80],
   TYOP [0, 0, 0], TYOP [0, 0, 82], TYOP [0, 25, 70], TYOP [0, 2, 41],
   TYOP [0, 11, 60], TYOP [0, 14, 62], TYOP [0, 10, 0], TYOP [0, 10, 88],
   TYOP [0, 13, 0], TYOP [0, 13, 90], TYOP [0, 37, 66], TYOP [0, 26, 68],
   TYOP [0, 15, 0], TYOP [0, 15, 94], TYOP [0, 18, 0], TYOP [0, 18, 96],
   TYOP [0, 30, 0], TYOP [0, 98, 30], TYOP [0, 5, 6], TYOP [0, 37, 37],
   TYOP [0, 37, 101], TYOP [0, 15, 72], TYOP [0, 0, 103], TYOP [0, 18, 75],
   TYOP [0, 0, 105], TYOP [0, 1, 6], TYOP [0, 26, 26], TYOP [0, 25, 108],
   TYOP [0, 25, 26], TYOP [0, 5, 1], TYOP [0, 25, 111], TYOP [0, 14, 14],
   TYOP [0, 2, 6], TYOP [0, 1, 111], TYOP [0, 33, 115], TYOP [0, 39, 110],
   TYOP [0, 1, 41], TYOP [0, 25, 71], TYOP [0, 5, 25], TYOP [0, 15, 5],
   TYOP [0, 121, 121], TYOP [0, 18, 5], TYOP [0, 123, 123], TYOP [0, 5, 2],
   TYOP [0, 26, 70], TYOP [0, 31, 38], TYOP [0, 37, 5], TYOP [0, 34, 128],
   TYOP [0, 37, 26], TYOP [0, 35, 130], TYOP [0, 1, 5], TYOP [0, 25, 132],
   TYOP [0, 2, 5], TYOP [0, 70, 26], TYOP [0, 29, 66], TYOP [0, 84, 68],
   TYOP [0, 26, 25], TYOP [0, 70, 25], TYOP [0, 39, 139],
   TYOP [0, 100, 121], TYOP [0, 5, 121], TYOP [0, 142, 123],
   TYOP [0, 10, 10], TYOP [0, 144, 10], TYOP [0, 30, 145],
   TYOP [0, 13, 13], TYOP [0, 147, 13], TYOP [0, 30, 148],
   TYOP [0, 34, 29], TYOP [0, 3, 150], TYOP [0, 35, 29], TYOP [0, 84, 152],
   TYOP [0, 1, 11], TYOP [0, 154, 0], TYOP [0, 0, 155], TYOP [0, 5, 156],
   TYOP [0, 107, 5], TYOP [0, 5, 158], TYOP [0, 5, 159], TYOP [0, 2, 2],
   TYOP [0, 82, 161], TYOP [0, 9, 54], TYOP [0, 7, 5], TYOP [0, 9, 164]]
  end
  val _ = Theory.incorporate_consts "sorting" tyvector
     [("STABLE", 8), ("SORTS", 8), ("SORTED_tupled", 10), ("SORTED", 12),
      ("QSORT_tupled", 13), ("QSORT3_tupled", 13), ("QSORT3", 7),
      ("QSORT", 7), ("PERM_SINGLE_SWAP", 14), ("PERM", 14),
      ("PARTITION", 17), ("PART3", 21), ("PART", 24)];

  local open SharingTables
  in
  val tmvector = build_term_vector idvector tyvector
  [TMV("A", 5), TMV("B", 5), TMV("C", 5), TMV("L", 5), TMV("L", 26),
   TMV("L1", 5), TMV("L2", 5), TMV("L3", 5), TMV("L4", 5), TMV("M", 5),
   TMV("N", 5), TMV("P", 2), TMV("P", 12), TMV("P", 11), TMV("P", 14),
   TMV("Q", 29), TMV("QSORT3_tupled", 13), TMV("QSORT_tupled", 13),
   TMV("R", 3), TMV("R", 30), TMV("R'", 3), TMV("R'", 30),
   TMV("SORTED_tupled", 10), TMV("a", 1), TMV("a", 5), TMV("a", 25),
   TMV("a", 9), TMV("a'", 5), TMV("a1", 5), TMV("a2", 5), TMV("b", 5),
   TMV("b", 25), TMV("b'", 5), TMV("c", 5), TMV("c'", 5), TMV("e", 1),
   TMV("eq", 5), TMV("f", 31), TMV("f", 33), TMV("f", 34), TMV("f", 35),
   TMV("f", 7), TMV("f", 36), TMV("f", 38), TMV("f", 40), TMV("f", 39),
   TMV("g", 39), TMV("h", 1), TMV("hd", 1), TMV("hi", 5), TMV("k", 25),
   TMV("l", 5), TMV("l", 37), TMV("l1", 5), TMV("l1", 26), TMV("l1'", 5),
   TMV("l2", 5), TMV("l2", 26), TMV("l2'", 5), TMV("l3", 5), TMV("l4", 5),
   TMV("lo", 5), TMV("ls", 5), TMV("m", 25), TMV("n", 25), TMV("ord", 3),
   TMV("p", 2), TMV("p", 5), TMV("q", 5), TMV("r", 3), TMV("r", 5),
   TMV("rst", 5), TMV("sort", 7), TMV("t", 5), TMV("tl", 5), TMV("v", 3),
   TMV("v1", 5), TMV("v3", 5), TMV("x", 1), TMV("x", 3), TMV("x", 5),
   TMV("x", 25), TMV("x1", 5), TMV("x1'", 37), TMV("x2", 5),
   TMV("x2'", 37), TMV("x3", 5), TMV("x3'", 37), TMV("xs", 5), TMV("y", 1),
   TMV("y", 5), TMV("y", 25), TMV("z", 1), TMV("z", 5), TMC(5, 41),
   TMC(5, 43), TMC(5, 44), TMC(5, 46), TMC(5, 47), TMC(5, 49), TMC(5, 51),
   TMC(5, 53), TMC(5, 55), TMC(5, 57), TMC(5, 59), TMC(5, 61), TMC(5, 63),
   TMC(5, 65), TMC(5, 60), TMC(5, 67), TMC(5, 69), TMC(5, 71), TMC(6, 74),
   TMC(6, 77), TMC(7, 40), TMC(8, 40), TMC(9, 79), TMC(9, 22), TMC(9, 81),
   TMC(10, 83), TMC(11, 84), TMC(12, 84), TMC(13, 3), TMC(13, 29),
   TMC(13, 83), TMC(13, 85), TMC(13, 86), TMC(13, 87), TMC(13, 89),
   TMC(13, 91), TMC(13, 14), TMC(13, 92), TMC(13, 93), TMC(13, 84),
   TMC(13, 95), TMC(13, 97), TMC(14, 83), TMC(15, 60), TMC(15, 67),
   TMC(16, 99), TMC(17, 11), TMC(18, 100), TMC(18, 102), TMC(19, 45),
   TMC(20, 45), TMC(21, 104), TMC(21, 106), TMC(22, 107), TMC(22, 109),
   TMC(23, 110), TMC(24, 40), TMC(25, 112), TMC(26, 113), TMC(27, 114),
   TMC(28, 116), TMC(29, 117), TMC(30, 111), TMC(31, 82), TMC(31, 6),
   TMC(32, 118), TMC(32, 119), TMC(33, 111), TMC(34, 120), TMC(35, 122),
   TMC(35, 124), TMC(36, 125), TMC(36, 126), TMC(37, 127), TMC(37, 129),
   TMC(37, 131), TMC(38, 40), TMC(39, 5), TMC(40, 24), TMC(41, 21),
   TMC(42, 17), TMC(43, 14), TMC(43, 92), TMC(43, 93), TMC(44, 14),
   TMC(45, 7), TMC(46, 7), TMC(47, 13), TMC(48, 13), TMC(49, 133),
   TMC(50, 6), TMC(51, 113), TMC(52, 134), TMC(52, 135), TMC(53, 12),
   TMC(53, 136), TMC(53, 137), TMC(54, 10), TMC(55, 8), TMC(56, 8),
   TMC(57, 39), TMC(58, 138), TMC(59, 140), TMC(60, 0), TMC(61, 113),
   TMC(62, 141), TMC(62, 143), TMC(63, 98), TMC(64, 146), TMC(64, 149),
   TMC(65, 83), TMC(66, 4), TMC(67, 84), TMC(68, 62), TMC(69, 151),
   TMC(69, 153), TMC(70, 4), TMC(71, 157), TMC(71, 160), TMC(72, 162),
   TMC(73, 163), TMC(73, 165), TMC(74, 4), TMC(75, 4), TMC(75, 50),
   TMC(75, 62), TMC(76, 82)]
  end
  local
  val DT = Thm.disk_thm val read = Term.read_raw tmvector
  in
  fun op PERM_DEF x = x
    val op PERM_DEF =
    DT(((("sorting",0),[]),[]),
       [read"%108%5%108%6%124%175$1@$0@@%94%78%130%153%122$0@@$2@@%153%122$0@@$1@@|@@|@|@"])
  fun op SORTED_tupled_primitive_DEF x = x
    val op SORTED_tupled_primitive_DEF =
    DT(((("sorting",26),[]),[]),
       [read"%128%191@%202%139%21%119%201$0@@%94%78%108%71%94%89%98%18$4%116$0@%147$1@$2@@@%116$0@%147$3@%147$1@$2@@@@|@|@|@|@@|@@%22%26%214$0@%18%76%211$0@%157%197@@%78%77%211$0@%157%197@@%89%71%157%119$5$3@$1@@$7%116$5@%147$1@$0@@@@@||@||@||@||@@"])
  fun op SORTED_curried_DEF x = x
    val op SORTED_curried_DEF =
    DT(((("sorting",27),[]),[]),
       [read"%98%79%108%82%124%188$1@$0@@%191%116$1@$0@@@|@|@"])
  fun op SORTS_DEF x = x
    val op SORTS_DEF =
    DT(((("sorting",30),[]),[]),
       [read"%103%41%98%18%124%192$1@$0@@%108%51%119%175$0@$2$1@$0@@@%188$1@$2$1@$0@@@|@@|@|@"])
  fun op PART_DEF x = x
    val op PART_DEF =
    DT(((("sorting",33),[("list",[13])]),["DISK_THM"]),
       [read"%119%96%11%108%53%108%56%134%172$2@%171@$1@$0@@%117$1@$0@@|@|@|@@%96%11%94%47%108%71%108%53%108%56%134%172$4@%147$3@$2@@$1@$0@@%145$4$3@@%172$4@$2@%147$3@$1@@$0@@%172$4@$2@$1@%147$3@$0@@@@|@|@|@|@|@@"])
  fun op PARTITION_DEF x = x
    val op PARTITION_DEF =
    DT(((("sorting",38),[]),[]),
       [read"%96%11%108%51%134%174$1@$0@@%172$1@$0@%171@%171@@|@|@"])
  fun op QSORT_tupled_primitive_DEF x = x
    val op QSORT_tupled_primitive_DEF =
    DT(((("sorting",39),[]),[]),
       [read"%129%182@%203%139%19%119%201$0@@%119%108%73%94%47%98%65%108%53%108%56%136%134%117$1@$0@@%174%89$3$0@$4@|@$4@@@$5%116$2@$0@@%116$2@%147$3@$4@@@@|@|@|@|@|@@%108%73%94%47%98%65%108%53%108%56%136%134%117$1@$0@@%174%89$3$0@$4@|@$4@@@$5%116$2@$1@@%116$2@%147$3@$4@@@@|@|@|@|@|@@@|@@%17%26%215$0@%65%76%212$0@%158%171@@%47%73%158%163%199%53%56%141%141$7%116$5@$1@@@%147$3@%171@@@$7%116$5@$0@@@||@@%174%89$4$0@$2@|@$0@@@||@||@||@@"])
  fun op QSORT_curried_DEF x = x
    val op QSORT_curried_DEF =
    DT(((("sorting",40),[]),[]),
       [read"%98%79%108%82%130%179$1@$0@@%182%116$1@$0@@@|@|@"])
  fun op PERM_SINGLE_SWAP_DEF x = x
    val op PERM_SINGLE_SWAP_DEF =
    DT(((("sorting",48),[]),[]),
       [read"%108%53%108%56%124%178$1@$0@@%137%82%137%84%137%86%119%130$4@%141%141$2@$1@@$0@@@%130$3@%141%141$2@$0@@$1@@@|@|@|@@|@|@"])
  fun op STABLE_DEF x = x
    val op STABLE_DEF =
    DT(((("sorting",104),[]),[]),
       [read"%103%72%98%69%124%193$1@$0@@%119%192$1@$0@@%96%66%136%94%78%94%89%136%119$2$1@@$2$0@@@$3$1@$0@@|@|@@%108%51%130%153$1@$0@@%153$1@$3$2@$0@@@|@@|@@@|@|@"])
  fun op PART3_DEF x = x
    val op PART3_DEF =
    DT(((("sorting",105),[("list",[13])]),["DISK_THM"]),
       [read"%119%98%18%94%47%135%173$1@$0@%171@@%118%171@%117%171@%171@@@|@|@@%98%18%94%47%94%48%108%74%135%173$3@$2@%147$1@$0@@@%146%119$3$2@$1@@$3$1@$2@@@%113%158@%112%147$1@@%158@@%173$3@$2@$0@@@%146$3$1@$2@@%113%147$1@@%112%158@%158@@%173$3@$2@$0@@@%113%158@%112%158@%147$1@@@%173$3@$2@$0@@@@@|@|@|@|@@"])
  fun op QSORT3_tupled_primitive_DEF x = x
    val op QSORT3_tupled_primitive_DEF =
    DT(((("sorting",107),[]),[]),
       [read"%129%181@%203%139%21%119%201$0@@%119%108%74%94%48%98%18%108%61%108%36%108%49%136%135%118$2@%117$1@$0@@@%173$3@$4@$5@@@$6%116$3@$0@@%116$3@%147$4@$5@@@@|@|@|@|@|@|@@%108%74%94%48%98%18%108%61%108%36%108%49%136%135%118$2@%117$1@$0@@@%173$3@$4@$5@@@$6%116$3@$2@@%116$3@%147$4@$5@@@@|@|@|@|@|@|@@@|@@%16%26%215$0@%18%76%212$0@%158%171@@%48%74%158%164%200%61%199%36%49%141%141$8%116$6@$2@@@%147$4@$1@@@$8%116$6@$0@@@||@|@@%173$3@$1@$0@@@||@||@||@@"])
  fun op QSORT3_curried_DEF x = x
    val op QSORT3_curried_DEF =
    DT(((("sorting",108),[]),[]),
       [read"%98%79%108%82%130%180$1@$0@@%181%116$1@$0@@@|@|@"])
  fun op PERM_REFL x = x
    val op PERM_REFL =
    DT(((("sorting",1),
        [("bool",
         [13,25,26,27,30,47,48,51,52,53,54,56,58,63,71,75,78,80,84,94,
          146]),("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[0])]),["DISK_THM"]), [read"%108%3%175$0@$0@|@"])
  fun op PERM_INTRO x = x
    val op PERM_INTRO =
    DT(((("sorting",2),
        [("bool",[13,25,26,27,30,47,48,51,52,53,54,56,63,71,93,94,96]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[1])]),["DISK_THM"]),
       [read"%108%80%108%90%136%130$1@$0@@%175$1@$0@@|@|@"])
  fun op PERM_transitive x = x
    val op PERM_transitive =
    DT(((("sorting",3),
        [("bool",
         [13,25,26,27,30,47,48,51,52,53,54,56,58,63,71,75,78,80,84,93,94,
          96,146]),("relation",[0]),("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[0])]),["DISK_THM"]), [read"%219%175@"])
  fun op PERM_TRANS x = x
    val op PERM_TRANS =
    DT(((("sorting",4),
        [("bool",[2,15,25,26,53,54,58,63,75,84,99]),("relation",[0]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18]),
         ("sorting",[3])]),["DISK_THM"]),
       [read"%108%80%108%90%108%93%136%119%175$2@$1@@%175$1@$0@@@%175$2@$0@@|@|@|@"])
  fun op PERM_SYM x = x
    val op PERM_SYM =
    DT(((("sorting",5),
        [("bool",
         [13,25,26,27,30,47,48,51,52,53,54,56,58,63,71,75,78,80,84,93,94,
          96,146]),("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[0])]),["DISK_THM"]),
       [read"%108%53%108%56%124%175$1@$0@@%175$0@$1@@|@|@"])
  fun op PERM_CONG x = x
    val op PERM_CONG =
    DT(((("sorting",6),
        [("bool",
         [13,25,26,27,30,47,48,51,52,53,54,56,58,63,71,75,78,80,84,93,94,
          96,146]),("list",[119]),("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[0])]),["DISK_THM"]),
       [read"%108%5%108%6%108%7%108%8%136%119%175$3@$1@@%175$2@$0@@@%175%141$3@$2@@%141$1@$0@@@|@|@|@|@"])
  fun op PERM_MONO x = x
    val op PERM_MONO =
    DT(((("sorting",7),
        [("bool",[13,25,26,27,30,47,48,51,52,53,54,56,58,63,71,93,94,96]),
         ("list",[20]),("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[1,6])]),["DISK_THM"]),
       [read"%108%53%108%56%94%78%136%175$2@$1@@%175%147$0@$2@@%147$0@$1@@@|@|@|@"])
  fun op PERM_CONS_IFF x = x
    val op PERM_CONS_IFF =
    DT(((("sorting",8),
        [("bool",[25,26,27,30,51,53,56,58,63,64,105,124,129,147]),
         ("list",[9,27]),("sorting",[0,7])]),["DISK_THM"]),
       [read"%94%78%108%56%108%53%124%175%147$2@$0@@%147$2@$1@@@%175$0@$1@@|@|@|@"])
  fun op PERM_NIL x = x
    val op PERM_NIL =
    DT(((("sorting",9),
        [("bool",[25,26,27,36,54,56,58,63,71,105,129,147]),
         ("list",[10,27,46]),("sorting",[0])]),["DISK_THM"]),
       [read"%108%3%119%124%175$0@%171@@%130$0@%171@@@%124%175%171@$0@@%130$0@%171@@@|@"])
  fun op PERM_SING x = x
    val op PERM_SING =
    DT(((("sorting",10),
        [("bool",
         [25,26,27,30,36,51,52,53,54,55,56,58,63,64,99,105,106,108,109,124,
          129]),("list",[20,27,46,48,49,50]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,16,17,18,19,20,23]),
         ("sorting",[0,5,9])]),["DISK_THM"]),
       [read"%119%124%175%3@%147%78@%171@@@%130%3@%147%78@%171@@@@%124%175%147%78@%171@@%3@@%130%3@%147%78@%171@@@@"])
  fun op PERM_CONS_EQ_APPEND x = x
    val op PERM_CONS_EQ_APPEND =
    DT(((("sorting",11),
        [("bool",
         [2,14,15,25,26,27,30,51,52,53,54,55,56,58,63,64,105,106,108,109,
          124,129,140,147]),
         ("list",[20,22,27,43,48,49,50,55,56,104,106,119,120]),
         ("prim_rec",[1]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,16,17,18,19,20,23]),
         ("sorting",[0])]),["DISK_THM"]),
       [read"%108%3%94%47%124%175%147$0@%73@@$1@@%137%9%137%10%119%130$3@%141$1@%147$2@$0@@@@%175%73@%141$1@$0@@@|@|@@|@|@"])
  fun op PERM_APPEND x = x
    val op PERM_APPEND =
    DT(((("sorting",12),
        [("bool",[14,25,26,53,54,55,58,63]),("list",[20,43,55,56]),
         ("sat",[1,3,5,6,7,11,12,13,15,17,18]),
         ("sorting",[1,11])]),["DISK_THM"]),
       [read"%108%53%108%56%175%141$1@$0@@%141$0@$1@@|@|@"])
  fun op CONS_PERM x = x
    val op CONS_PERM =
    DT(((("sorting",13),
        [("bool",[2,15,25,26,53,54,55,58,63,74,84,99]),
         ("sat",[1,3,5,6,7,11,12,13,15,17,18]),
         ("sorting",[11])]),["DISK_THM"]),
       [read"%94%78%108%3%108%9%108%10%136%175$2@%141$1@$0@@@%175%147$3@$2@@%141$1@%147$3@$0@@@@|@|@|@|@"])
  fun op APPEND_PERM_SYM x = x
    val op APPEND_PERM_SYM =
    DT(((("sorting",14),
        [("bool",[25,26,47,48,53,54,58,63,71,93,94,96]),
         ("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[4,12])]),["DISK_THM"]),
       [read"%108%0%108%1%108%2%136%175%141$2@$1@@$0@@%175%141$1@$2@@$0@@|@|@|@"])
  fun op PERM_SPLIT x = x
    val op PERM_SPLIT =
    DT(((("sorting",15),
        [("bool",[14,25,26,27,30,36,47,48,53,54,56,63,64,94]),
         ("combin",[5,19]),("list",[20,27,43]),
         ("sat",[1,3,5,6,7,11,13,14,15]),
         ("sorting",[1,7,13])]),["DISK_THM"]),
       [read"%96%11%108%51%175$0@%141%153$1@$0@@%153%213%220@$1@@$0@@@|@|@"])
  fun op FILTER_EQ_REP x = x
    val op FILTER_EQ_REP =
    DT(((("sorting",16),
        [("bool",[14,25,26,27,30,51,56,58,63,64,105,129]),
         ("list",[22,27,43,48]),("rich_list",[2])]),["DISK_THM"]),
       [read"%130%153%122%78@@%51@@%183%162%153%122%78@@%51@@@%78@@"])
  fun op FILTER_EQ_LENGTHS_EQ x = x
    val op FILTER_EQ_LENGTHS_EQ =
    DT(((("sorting",17),[("bool",[25,56]),("sorting",[16])]),["DISK_THM"]),
       [read"%136%133%162%153%122%78@@%53@@@%162%153%122%78@@%56@@@@%130%153%122%78@@%53@@%153%122%78@@%56@@@"])
  fun op PERM_alt x = x
    val op PERM_alt =
    DT(((("sorting",18),
        [("bool",[25,26,56]),("sorting",[0,17])]),["DISK_THM"]),
       [read"%108%5%108%6%124%175$1@$0@@%94%78%133%162%153%122$0@@$2@@@%162%153%122$0@@$1@@@|@@|@|@"])
  fun op PERM_IND x = x
    val op PERM_IND =
    DT(((("sorting",19),
        [("bool",[14,25,26,36,51,53,54,58,60,63,87,93,95,101,105,124,145]),
         ("list",[20,43,56]),("marker",[10]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18]),
         ("sorting",[4,8,9,11])]),["DISK_THM"]),
       [read"%106%14%136%119$0%171@%171@@%119%94%78%108%53%108%56%136$3$1@$0@@$3%147$2@$1@@%147$2@$0@@@|@|@|@@%119%94%78%94%89%108%53%108%56%136$4$1@$0@@$4%147$3@%147$2@$1@@@%147$2@%147$3@$0@@@@|@|@|@|@@%108%53%108%56%108%59%136%119$3$2@$1@@$3$1@$0@@@$3$2@$0@@|@|@|@@@@@%108%53%108%56%136%175$1@$0@@$2$1@$0@@|@|@@|@"])
  fun op PERM_SWAP_AT_FRONT x = x
    val op PERM_SWAP_AT_FRONT =
    DT(((("sorting",20),
        [("bool",[14,25,26,36,51,53,54,58,60,63,87,93,95,101,105,124,145]),
         ("list",[20,43,56]),("marker",[10]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18]),
         ("sorting",[1,4,8,9,11])]),["DISK_THM"]),
       [read"%124%175%147%78@%147%89@%53@@@%147%89@%147%78@%56@@@@%175%53@%56@@"])
  fun op PERM_SWAP_L_AT_FRONT x = x
    val op PERM_SWAP_L_AT_FRONT =
    DT(((("sorting",21),
        [("arithmetic",[26,27,91]),("bool",[25,36,56,58]),
         ("list",[57,119]),("sorting",[18])]),["DISK_THM"]),
       [read"%108%80%108%90%124%175%141%141$1@$0@@%53@@%141%141$0@$1@@%56@@@%175%53@%56@@|@|@"])
  fun op PERM_STRONG_IND x = x
    val op PERM_STRONG_IND =
    DT(((("sorting",22),
        [("bool",[25,43,58,63,132]),
         ("sorting",[4,7,9,19,20])]),["DISK_THM"]),
       [read"%106%14%136%119$0%171@%171@@%119%94%78%108%53%108%56%136%119%175$1@$0@@$3$1@$0@@@$3%147$2@$1@@%147$2@$0@@@|@|@|@@%119%94%78%94%89%108%53%108%56%136%119%175$1@$0@@$4$1@$0@@@$4%147$3@%147$2@$1@@@%147$2@%147$3@$0@@@@|@|@|@|@@%108%53%108%56%108%59%136%119%175$2@$1@@%119$3$2@$1@@%119%175$1@$0@@$3$1@$0@@@@@$3$2@$0@@|@|@|@@@@@%108%53%108%56%136%175$1@$0@@$2$1@$0@@|@|@@|@"])
  fun op PERM_LENGTH x = x
    val op PERM_LENGTH =
    DT(((("sorting",23),
        [("bool",[25,53,56,58,105,124]),("list",[22]),("prim_rec",[1]),
         ("sorting",[19])]),["DISK_THM"]),
       [read"%108%53%108%56%136%175$1@$0@@%133%162$1@@%162$0@@@|@|@"])
  fun op PERM_MEM_EQ x = x
    val op PERM_MEM_EQ =
    DT(((("sorting",24),
        [("bool",[25,36,53,56,58,93,95,105,124,170]),("list",[120]),
         ("marker",[8]),("sorting",[19])]),["DISK_THM"]),
       [read"%108%53%108%56%136%175$1@$0@@%94%78%124%159$0@%165$2@@@%159$0@%165$1@@@|@@|@|@"])
  fun op PERM_LIST_TO_SET x = x
    val op PERM_LIST_TO_SET =
    DT(((("sorting",25),
        [("bool",[25,36,53,58,63,105,124]),("pred_set",[3]),
         ("sorting",[24])]),["DISK_THM"]),
       [read"%108%53%108%56%136%175$1@$0@@%125%165$1@@%165$0@@@|@|@"])
  fun op SORTED_IND x = x
    val op SORTED_IND =
    DT(((("sorting",28),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",[25,27,36,52,53,54,58,63,93,96,104,105,107]),
         ("list",[7,46]),("numeral",[3,7,8]),("pair",[5,7,9,16]),
         ("prim_rec",[42]),("relation",[101,113,115]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%102%12%136%119%98%18$1$0@%171@|@@%119%98%18%94%78$2$1@%147$0@%171@@|@|@@%98%18%94%78%94%89%108%71%136$4$3@%147$1@$0@@@$4$3@%147$2@%147$1@$0@@@@|@|@|@|@@@@%98%75%108%76$2$1@$0@|@|@@|@"])
  fun op SORTED_DEF x = x
    val op SORTED_DEF =
    DT(((("sorting",29),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",[15,25,36,52,54,58,63,93,96,104,105,107]),("combin",[19]),
         ("list",[6,7]),("numeral",[3,7,8]),("pair",[7,9,16,49]),
         ("prim_rec",[42]),("relation",[113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sorting",[26,27])]),["DISK_THM"]),
       [read"%119%98%18%124%188$0@%171@@%197@|@@%119%94%78%98%18%124%188$0@%147$1@%171@@@%197@|@|@@%94%89%94%78%108%71%98%18%124%188$0@%147$2@%147$3@$1@@@@%119$0$2@$3@@%188$0@%147$3@$1@@@@|@|@|@|@@@"])
  fun op SORTED_EQ x = x
    val op SORTED_EQ =
    DT(((("sorting",31),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",
         [13,14,15,25,26,27,30,36,43,47,48,51,52,53,54,56,58,63,71,75,76,
          78,80,81,84,93,94,96,104,105,107,124,146]),("combin",[19]),
         ("list",[6,7,43,120]),("numeral",[3,7,8]),("pair",[7,9,16,49]),
         ("prim_rec",[42]),("relation",[0,113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[26,27])]),["DISK_THM"]),
       [read"%98%18%108%3%94%78%136%217$2@@%124%188$2@%147$0@$1@@@%119%188$2@$1@@%94%89%136%159$0@%165$2@@@$3$1@$0@@|@@@@|@|@|@"])
  fun op SORTED_APPEND x = x
    val op SORTED_APPEND =
    DT(((("sorting",32),
        [("bool",
         [13,14,25,26,27,30,36,43,47,48,51,52,53,54,56,58,63,71,77,78,93,
          94,96,105,124,125,146]),("combin",[19]),("list",[20,43,81,120]),
         ("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[31])]),["DISK_THM"]),
       [read"%98%18%108%5%108%6%136%119%217$2@@%119%188$2@$1@@%119%188$2@$0@@%94%78%94%89%136%119%159$1@%165$3@@@%159$0@%165$2@@@@$4$1@$0@@|@|@@@@@%188$2@%141$1@$0@@@|@|@|@"])
  fun op PART_LENGTH x = x
    val op PART_LENGTH =
    DT(((("sorting",34),
        [("arithmetic",[22,24,25,26,27,46,71,91,93,172,173,177,180]),
         ("bool",
         [14,25,26,27,30,36,43,52,53,54,56,58,63,64,96,101,104,105,124]),
         ("list",[22,43]),("numeral",[3,5,8]),("pair",[4]),
         ("sat",[1,3,5,6,7,11,12,13,15]),("sorting",[33])]),["DISK_THM"]),
       [read"%96%11%108%3%108%53%108%56%108%67%108%68%136%134%117$1@$0@@%172$5@$4@$3@$2@@@%133%115%115%162$4@@%162$3@@@%162$2@@@%115%162$1@@%162$0@@@@|@|@|@|@|@|@"])
  fun op PART_LENGTH_LEM x = x
    val op PART_LENGTH_LEM =
    DT(((("sorting",35),
        [("arithmetic",[24,25,27,46,53,71,93,173,176,180]),
         ("bool",[25,36,52,53,54,58,63,93,96,104,105,107,124]),
         ("numeral",[3,8]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("sorting",[34])]),["DISK_THM"]),
       [read"%96%11%108%3%108%53%108%56%108%67%108%68%136%134%117$1@$0@@%172$5@$4@$3@$2@@@%119%121%162$1@@%115%115%162$4@@%162$3@@@%162$2@@@@%121%162$0@@%115%115%162$4@@%162$3@@@%162$2@@@@@|@|@|@|@|@|@"])
  fun op PARTs_HAVE_PROP x = x
    val op PARTs_HAVE_PROP =
    DT(((("sorting",36),
        [("bool",
         [13,14,25,26,27,30,47,48,51,52,53,54,56,58,63,64,71,76,81,93,94,
          96,105,124]),("list",[43,120]),("pair",[4]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[33])]),["DISK_THM"]),
       [read"%96%11%108%3%108%0%108%1%108%53%108%56%136%119%134%117$3@$2@@%172$5@$4@$1@$0@@@%119%94%78%136%159$0@%165$2@@@$6$0@@|@@%94%78%136%159$0@%165$1@@@%220$6$0@@@|@@@@%119%94%92%136%159$0@%165$4@@@$6$0@@|@@%94%92%136%159$0@%165$3@@@%220$6$0@@@|@@@|@|@|@|@|@|@"])
  fun op PART_MEM x = x
    val op PART_MEM =
    DT(((("sorting",37),
        [("bool",
         [13,14,25,26,27,30,36,47,48,51,52,53,54,56,58,63,64,83,93,94,96,
          100,105,124]),("combin",[19]),("list",[20,43,56]),("pair",[4]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[1,4,13,24,33])]),["DISK_THM"]),
       [read"%96%11%108%3%108%28%108%29%108%53%108%56%136%134%117$3@$2@@%172$5@$4@$1@$0@@@%94%78%124%159$0@%165%141$5@%141$2@$1@@@@@%159$0@%165%141$4@$3@@@@|@@|@|@|@|@|@|@"])
  fun op QSORT_IND x = x
    val op QSORT_IND =
    DT(((("sorting",41),
        [("arithmetic",[22,24,25,46,59,71,93,173,180]),
         ("bool",[15,25,27,36,53,54,58,63,96,101,104,105,123,124]),
         ("combin",[5,19]),("list",[6,22,46]),("numeral",[3,8]),
         ("pair",[5,7,9,16,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),("sat",[1,3,5,6,7,11,15]),
         ("sorting",[35,38,39,40])]),["DISK_THM"]),
       [read"%102%12%136%119%98%65$1$0@%171@|@@%98%65%94%47%108%73%136%119%108%53%108%56%136%134%117$1@$0@@%174%89$5$0@$4@|@$2@@@$5$4@$0@@|@|@@%108%53%108%56%136%134%117$1@$0@@%174%89$5$0@$4@|@$2@@@$5$4@$1@@|@|@@@$3$2@%147$1@$0@@@|@|@|@@@%98%75%108%76$2$1@$0@|@|@@|@"])
  fun op QSORT_DEF x = x
    val op QSORT_DEF =
    DT(((("sorting",42),
        [("arithmetic",[22,24,25,46,59,71,93,173,180]),
         ("bool",[15,25,27,36,53,54,58,63,96,101,104,105,123,124]),
         ("combin",[5,19]),("list",[6,22,46]),("numeral",[3,8]),
         ("pair",[5,7,9,16,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),("sat",[1,3,5,6,7,11,15]),
         ("sorting",[35,38,39,40])]),["DISK_THM"]),
       [read"%119%98%65%130%179$0@%171@@%171@|@@%108%73%98%65%94%47%130%179$1@%147$0@$2@@@%163%199%53%56%141%141%179$3@$1@@%147$2@%171@@@%179$3@$0@@||@@%174%89$2$0@$1@|@$2@@@|@|@|@@"])
  fun op QSORT_MEM x = x
    val op QSORT_MEM =
    DT(((("sorting",43),
        [("arithmetic",[22,24,25,46,59,71,93,173,180]),
         ("bool",
         [15,25,26,27,36,43,47,48,51,52,53,54,56,58,63,84,86,96,101,104,
          105,123,124,140]),("combin",[5,8,11,15,16,17,19,33,34,35]),
         ("list",[6,22,46,81,120]),("marker",[6,9]),("numeral",[3,8]),
         ("pair",[4,5,7,9,16,43,44,45,46,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[35,37,38,39,40,41])]),["DISK_THM"]),
       [read"%98%18%108%3%94%78%124%159$0@%165%179$2@$1@@@@%159$0@%165$1@@@|@|@|@"])
  fun op QSORT_PERM x = x
    val op QSORT_PERM =
    DT(((("sorting",44),
        [("arithmetic",[22,24,25,46,59,71,93,173,180]),
         ("bool",
         [13,14,15,25,26,27,30,36,47,48,51,52,53,54,55,56,58,63,64,73,75,
          93,94,96,101,104,105,123,124]),
         ("combin",[3,5,8,11,15,16,19,33,35]),
         ("list",[6,20,22,43,46,55,56]),("marker",[6,9]),("numeral",[3,8]),
         ("pair",[4,5,7,9,16,43,45,46,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[1,4,6,13,33,35,38,39,40,41])]),["DISK_THM"]),
       [read"%98%18%108%3%175$0@%179$1@$0@@|@|@"])
  fun op QSORT_SORTED x = x
    val op QSORT_SORTED =
    DT(((("sorting",45),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",
         [15,25,26,27,36,43,47,48,51,52,53,54,56,58,63,71,75,78,80,84,93,
          94,96,101,104,105,107,123,124,146]),
         ("combin",[5,8,11,15,16,19,33,35]),("list",[6,7,20,22,46,56,120]),
         ("marker",[6,9]),("numeral",[3,7,8]),
         ("pair",[5,7,9,16,43,45,46,49]),("prim_rec",[42,43,44]),
         ("relation",[0,6,101,113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[26,27,31,32,35,36,38,39,40,41,43])]),["DISK_THM"]),
       [read"%98%18%108%3%136%119%217$1@@%216$1@@@%188$1@%179$1@$0@@@|@|@"])
  fun op QSORT_SORTS x = x
    val op QSORT_SORTS =
    DT(((("sorting",46),
        [("bool",
         [25,26,36,47,48,53,54,56,58,63,71,73,75,76,78,80,84,93,94,96,
          146]),("combin",[19]),("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[30,44,45])]),["DISK_THM"]),
       [read"%98%18%136%119%217$0@@%216$0@@@%192%179@$0@@|@"])
  fun op PERM_APPEND_IFF x = x
    val op PERM_APPEND_IFF =
    DT(((("sorting",47),
        [("arithmetic",[25,26,91]),("bool",[25,36,51,56]),
         ("list",[57,119]),("sorting",[18])]),["DISK_THM"]),
       [read"%119%108%51%108%53%108%56%124%175%141$2@$1@@%141$2@$0@@@%175$1@$0@@|@|@|@@%108%51%108%53%108%56%124%175%141$1@$2@@%141$0@$2@@@%175$1@$0@@|@|@|@@"])
  fun op PERM_SINGLE_SWAP_SYM x = x
    val op PERM_SINGLE_SWAP_SYM =
    DT(((("sorting",49),
        [("bool",[25,26,47,48,53,54,58,63,71,72,74,78,81,84,94,96,146]),
         ("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[48])]),["DISK_THM"]),
       [read"%108%53%108%56%124%178$1@$0@@%178$0@$1@@|@|@"])
  fun op PERM_SINGLE_SWAP_I x = x
    val op PERM_SINGLE_SWAP_I =
    DT(((("sorting",50),
        [("bool",
         [13,25,26,27,30,47,48,51,52,53,54,56,58,63,72,74,78,81,84,94,96,
          146]),("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[48])]),["DISK_THM"]),
       [read"%178%141%141%82@%84@@%86@@%141%141%82@%86@@%84@@"])
  fun op PERM_SINGLE_SWAP_APPEND x = x
    val op PERM_SINGLE_SWAP_APPEND =
    DT(((("sorting",51),[("list",[20]),("sorting",[50])]),["DISK_THM"]),
       [read"%178%141%84@%86@@%141%86@%84@@"])
  fun op PERM_SINGLE_SWAP_REFL x = x
    val op PERM_SINGLE_SWAP_REFL =
    DT(((("sorting",52),[("list",[20,55]),("sorting",[51])]),["DISK_THM"]),
       [read"%108%51%178$0@$0@|@"])
  fun op PERM_SINGLE_SWAP_CONS x = x
    val op PERM_SINGLE_SWAP_CONS =
    DT(((("sorting",53),
        [("bool",[25,51,56,58,105,124]),("list",[20,48,104]),
         ("sorting",[48])]),["DISK_THM"]),
       [read"%136%178%9@%10@@%178%147%78@%9@@%147%78@%10@@@"])
  fun op PERM_SINGLE_SWAP_TC_CONS x = x
    val op PERM_SINGLE_SWAP_TC_CONS =
    DT(((("sorting",54),
        [("relation",[16,38,42]),("sorting",[53])]),["DISK_THM"]),
       [read"%108%9%108%10%136%198%178@$1@$0@@%198%178@%147%78@$1@@%147%78@$0@@@|@|@"])
  fun op PERM_TC x = x
    val op PERM_TC =
    DT(((("sorting",55),
        [("arithmetic",[26,27,91]),
         ("bool",[14,25,26,56,58,60,63,101,105,124,145]),
         ("list",[20,43,57,119]),("relation",[16,38,63,81]),
         ("sorting",[3,9,11,18,48,51,52,54])]),["DISK_THM"]),
       [read"%127%175@%198%178@@"])
  fun op PERM_RTC x = x
    val op PERM_RTC =
    DT(((("sorting",56),
        [("bool",
         [13,25,26,27,30,47,48,51,52,53,54,56,58,60,63,71,73,93,94,96]),
         ("relation",[10,55]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[52,55])]),["DISK_THM"]), [read"%127%175@%185%178@@"])
  fun op PERM_EQC x = x
    val op PERM_EQC =
    DT(((("sorting",57),
        [("bool",
         [13,25,26,27,30,36,47,48,51,52,53,54,56,58,60,63,71,93,94,96]),
         ("relation",[10,11,12]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[1,49,55])]),["DISK_THM"]),
       [read"%127%175@%152%178@@"])
  fun op PERM_lifts_transitive_relations x = x
    val op PERM_lifts_transitive_relations =
    DT(((("sorting",58),
        [("bool",[25,26,58,63,86,93,95,101,105,124,145]),("relation",[51]),
         ("sorting",[48,55])]),["DISK_THM"]),
       [read"%104%42%100%15%136%119%108%82%108%84%108%86$3$4%141%141$2@$1@@$0@@@$4%141%141$2@$0@@$1@@@|@|@|@@%218$0@@@%108%80%108%90%136%175$1@$0@@$2$3$1@@$3$0@@@|@|@@|@|@"])
  fun op PERM_lifts_equalities x = x
    val op PERM_lifts_equalities =
    DT(((("sorting",59),
        [("bool",[25,26,58,63,86,93,95,101,105,124,145]),("relation",[50]),
         ("sorting",[48,55])]),["DISK_THM"]),
       [read"%104%42%136%108%82%108%84%108%86%123$3%141%141$2@$1@@$0@@@$3%141%141$2@$0@@$1@@@|@|@|@@%108%80%108%90%136%175$1@$0@@%123$2$1@@$2$0@@@|@|@@|@"])
  fun op PERM_lifts_invariants x = x
    val op PERM_lifts_invariants =
    DT(((("sorting",60),
        [("bool",[25,26,58,63,81,86,93,95,101,105,124,145]),
         ("relation",[49]),("sorting",[48,55])]),["DISK_THM"]),
       [read"%105%13%136%108%82%108%84%108%86%136$3%141%141$2@$1@@$0@@@$3%141%141$2@$0@@$1@@@|@|@|@@%108%80%108%90%136%119$2$1@@%175$1@$0@@@$2$0@@|@|@@|@"])
  fun op PERM_lifts_monotonicities x = x
    val op PERM_lifts_monotonicities =
    DT(((("sorting",61),
        [("bool",[25,51,58,63]),("list",[56]),
         ("sorting",[3,12,47,58])]),["DISK_THM"]),
       [read"%107%43%136%108%82%108%84%108%86%138%83%138%85%138%87%119%131$6%141%141$5@$4@@$3@@@%142%142$2@$1@@$0@@@%131$6%141%141$5@$3@@$4@@@%142%142$2@$0@@$1@@@|@|@|@|@|@|@@%108%80%108%90%136%175$1@$0@@%176$2$1@@$2$0@@@|@|@@|@"])
  fun op PERM_EQUIVALENCE x = x
    val op PERM_EQUIVALENCE =
    DT(((("sorting",62),
        [("bool",[25,63]),("relation",[70]),
         ("sorting",[57])]),["DISK_THM"]), [read"%207%175@"])
  fun op PERM_EQUIVALENCE_ALT_DEF x = x
    val op PERM_EQUIVALENCE_ALT_DEF =
    DT(((("sorting",63),
        [("bool",[25,58,63]),("relation",[93]),
         ("sorting",[62])]),["DISK_THM"]),
       [read"%108%80%108%90%124%175$1@$0@@%126%175$1@@%175$0@@@|@|@"])
  fun op ALL_DISTINCT_PERM x = x
    val op ALL_DISTINCT_PERM =
    DT(((("sorting",64),
        [("bool",[25,26,47,48,53,54,58,63,71,76,78,81,96,105,124]),
         ("list",[81,221]),("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[59])]),["DISK_THM"]),
       [read"%108%53%108%56%136%175$1@$0@@%124%140$1@@%140$0@@@|@|@"])
  fun op PERM_ALL_DISTINCT x = x
    val op PERM_ALL_DISTINCT =
    DT(((("sorting",65),
        [("bool",[14,25,26,27,30,52,53,54,55,56,58,63,64,105,124,129]),
         ("list",[27,43,49,120,216]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[0])]),["DISK_THM"]),
       [read"%108%53%108%56%136%119%140$1@@%119%140$0@@%94%78%124%159$0@%165$2@@@%159$0@%165$1@@@|@@@@%175$1@$0@@|@|@"])
  fun op ALL_DISTINCT_PERM_LIST_TO_SET_TO_LIST x = x
    val op ALL_DISTINCT_PERM_LIST_TO_SET_TO_LIST =
    DT(((("sorting",66),
        [("bool",[25,53,56,58,63,105,106,124]),("list",[233,250,252]),
         ("sorting",[64,65])]),["DISK_THM"]),
       [read"%108%62%124%140$0@@%175$0@%186%165$0@@@@|@"])
  fun op PERM_MAP x = x
    val op PERM_MAP =
    DT(((("sorting",67),
        [("bool",[13,25,26,27,30,47,48,51,52,53,54,56,63,71,72,94,96]),
         ("list",[58]),("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[61])]),["DISK_THM"]),
       [read"%95%37%108%53%108%56%136%175$1@$0@@%176%167$2@$1@@%167$2@$0@@@|@|@|@"])
  fun op PERM_SUM x = x
    val op PERM_SUM =
    DT(((("sorting",68),
        [("arithmetic",[24,25,27,71,91,172,173,177,180]),
         ("bool",[25,36,43,52,53,54,56,58,63,96,101,104,105,124]),
         ("list",[19]),("numeral",[3,8]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("sorting",[19])]),["DISK_THM"]),
       [read"%110%54%110%57%136%177$1@$0@@%133%195$1@@%195$0@@@|@|@"])
  fun op PERM_FILTER x = x
    val op PERM_FILTER =
    DT(((("sorting",69),
        [("bool",[13,25,26,27,30,47,48,51,52,53,54,56,63,71,72,94,96]),
         ("list",[119]),("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[61])]),["DISK_THM"]),
       [read"%96%11%108%53%108%56%136%175$1@$0@@%175%153$2@$1@@%153$2@$0@@@|@|@|@"])
  fun op PERM_REVERSE x = x
    val op PERM_REVERSE =
    DT(((("sorting",70),
        [("bool",[25,36,56]),("list",[178,181]),
         ("sorting",[18])]),["DISK_THM"]), [read"%175%62@%184%62@@"])
  fun op PERM_REVERSE_EQ x = x
    val op PERM_REVERSE_EQ =
    DT(((("sorting",71),
        [("bool",[25,26,53,54,63]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18]),
         ("sorting",[4,5,70])]),["DISK_THM"]),
       [read"%119%124%175%184%53@@%56@@%175%53@%56@@@%124%175%53@%184%56@@@%175%53@%56@@@"])
  fun op FOLDR_PERM x = x
    val op FOLDR_PERM =
    DT(((("sorting",72),
        [("bool",
         [13,25,26,27,30,36,47,48,51,52,53,54,56,58,63,71,75,78,80,81,84,
          87,93,94,96,105,124,146]),("combin",[19]),("list",[28]),
         ("operator",[0,1]),("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[19])]),["DISK_THM"]),
       [read"%97%38%108%53%108%56%94%35%136%119%143$3@@%144$3@@@%136%175$2@$1@@%122%154$3@$0@$2@@%154$3@$0@$1@@@@|@|@|@|@"])
  fun op PERM_SET_TO_LIST_count_COUNT_LIST x = x
    val op PERM_SET_TO_LIST_count_COUNT_LIST =
    DT(((("sorting",73),
        [("bool",[25,26,36,53,56,58,63,105,124,143]),("combin",[19]),
         ("list",[250,252,296,298]),("pred_set",[296,300]),
         ("rich_list",[279]),("sorting",[65])]),["DISK_THM"]),
       [read"%177%187%206%64@@@%149%64@@"])
  fun op SUM_IMAGE_count_SUM_GENLIST x = x
    val op SUM_IMAGE_count_SUM_GENLIST =
    DT(((("sorting",74),
        [("bool",[25,56,63]),("combin",[20]),("list",[282,303]),
         ("pred_set",[300]),("rich_list",[279]),
         ("sorting",[2,4,67,68,73])]),["DISK_THM"]),
       [read"%133%196%45@%206%64@@@%195%155%45@%64@@@"])
  fun op SUM_IMAGE_count_MULT x = x
    val op SUM_IMAGE_count_MULT =
    DT(((("sorting",75),
        [("arithmetic",[67,68]),
         ("bool",[2,14,25,26,36,53,54,55,56,58,63,99,105,124]),
         ("combin",[3,5]),("list",[275,287,300,301]),("num",[9]),
         ("pred_set",[298,314]),("prim_rec",[15,16]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[74])]),["DISK_THM"]),
       [read"%136%111%63%136%120$0@%64@@%133%46$0@@%196%81%45%115$0@%114%50@$1@@@|@%206%50@@@@|@@%133%196%45@%206%114%50@%64@@@@%196%46@%206%64@@@@"])
  fun op sum_of_sums x = x
    val op sum_of_sums =
    DT(((("sorting",76),
        [("arithmetic",[25,67,72,73,216,221]),
         ("bool",[25,30,36,53,54,55,56,57,58,63,83,105,124]),
         ("pred_set",[296,298,300,302,314,323,324]),
         ("sat",[1,3,5,6,7,11,13,14,15,17,18,19,20,23]),
         ("sorting",[75])]),["DISK_THM"]),
       [read"%133%196%63%196%44$0@@%206%25@@|@%206%31@@@%196%63%44%150$0@%25@@%170$0@%25@@|@%206%114%25@%31@@@@"])
  fun op SORTED_NIL x = x
    val op SORTED_NIL =
    DT(((("sorting",77),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",[15,25,36,52,54,58,63,93,96,104,105,107]),("combin",[19]),
         ("list",[6,7]),("numeral",[3,7,8]),("pair",[7,9,16,49]),
         ("prim_rec",[42]),("relation",[113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sorting",[26,27])]),["DISK_THM"]), [read"%98%18%188$0@%171@|@"])
  fun op SORTED_SING x = x
    val op SORTED_SING =
    DT(((("sorting",78),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",[15,25,36,52,54,58,63,93,96,104,105,107]),("combin",[19]),
         ("list",[6,7]),("numeral",[3,7,8]),("pair",[7,9,16,49]),
         ("prim_rec",[42]),("relation",[113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("sorting",[26,27])]),["DISK_THM"]),
       [read"%98%18%94%78%188$1@%147$0@%171@@|@|@"])
  fun op SORTED_TL x = x
    val op SORTED_TL =
    DT(((("sorting",79),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",[15,25,36,52,53,54,58,63,93,96,104,105,107,124]),
         ("combin",[19]),("list",[6,7,46]),("numeral",[3,7,8]),
         ("pair",[7,9,16,49]),("prim_rec",[42]),
         ("relation",[113,115,121,126]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("sorting",[26,27])]),["DISK_THM"]),
       [read"%136%188%18@%147%78@%88@@@%188%18@%88@@"])
  fun op SORTED_EL_SUC x = x
    val op SORTED_EL_SUC =
    DT(((("sorting",80),
        [("arithmetic",[22,24,25,28,37,41,46,59,71,88,93,173,180]),
         ("bool",
         [14,15,25,26,27,36,52,53,54,58,63,93,96,104,105,106,107,124]),
         ("combin",[19]),("list",[6,7,17,22,43,46,128]),
         ("numeral",[3,7,8]),("pair",[7,9,16,49]),("prim_rec",[6,7,42]),
         ("relation",[113,115,121,126]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("sorting",[26,27,77])]),["DISK_THM"]),
       [read"%98%18%108%62%124%188$1@$0@@%111%64%136%120%194$0@@%162$1@@@$2%151$0@$1@@%151%194$0@@$1@@@|@@|@|@"])
  fun op SORTED_EL_LESS x = x
    val op SORTED_EL_LESS =
    DT(((("sorting",81),
        [("arithmetic",[28,37]),
         ("bool",
         [2,14,15,25,26,27,36,51,53,54,55,58,63,74,84,99,105,106,124]),
         ("list",[17,22,43,128,170]),("prim_rec",[6,7]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18]),
         ("sorting",[31,77])]),["DISK_THM"]),
       [read"%98%18%136%217$0@@%108%62%124%188$1@$0@@%111%63%111%64%136%119%120$1@$0@@%120$0@%162$2@@@@$3%151$1@$2@@%151$0@$2@@@|@|@@|@@|@"])
  fun op SORTED_APPEND_IFF x = x
    val op SORTED_APPEND_IFF =
    DT(((("sorting",82),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",
         [14,15,25,26,27,36,42,43,51,52,54,56,58,63,93,96,104,105,107]),
         ("combin",[19]),("list",[6,7,17,20,43,46,49,55,184]),
         ("numeral",[3,7,8]),("pair",[7,9,16,49]),("prim_rec",[42]),
         ("relation",[113,115,121,126]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("sorting",[26,27])]),["DISK_THM"]),
       [read"%98%18%108%5%108%6%124%188$2@%141$1@$0@@@%119%188$2@$1@@%119%188$2@$0@@%204%130$1@%171@@%204%130$0@%171@@$2%161$1@@%156$0@@@@@@@|@|@|@"])
  fun op MEM_PERM x = x
    val op MEM_PERM =
    DT(((("sorting",83),
        [("bool",[2,15,25,26,53,54,55,58,63,75,84,99]),("list",[82]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[0])]),["DISK_THM"]),
       [read"%108%53%108%56%136%175$1@$0@@%94%23%124%159$0@%165$2@@@%159$0@%165$1@@@|@@|@|@"])
  fun op SORTED_PERM_EQ x = x
    val op SORTED_PERM_EQ =
    DT(((("sorting",84),
        [("bool",[14,25,26,27,36,51,52,53,56,58,63,105,124]),
         ("list",[43,46,48,49,120]),("relation",[4]),
         ("sorting",[8,9,31,79,83])]),["DISK_THM"]),
       [read"%98%18%136%119%217$0@@%205$0@@@%108%53%108%56%136%119%188$2@$1@@%119%188$2@$0@@%175$1@$0@@@@%130$1@$0@@|@|@@|@"])
  fun op QSORT_eq_if_PERM x = x
    val op QSORT_eq_if_PERM =
    DT(((("sorting",85),
        [("bool",
         [13,25,26,27,30,47,48,51,52,53,54,56,58,63,71,81,84,93,94,96]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[4,5,44,45,84])]),["DISK_THM"]),
       [read"%98%18%136%119%216$0@@%119%217$0@@%205$0@@@@%108%53%108%56%124%130%179$2@$1@@%179$2@$0@@@%175$1@$0@@|@|@@|@"])
  fun op PERM_FUN_APPEND_C x = x
    val op PERM_FUN_APPEND_C =
    DT(((("sorting",86),
        [("bool",[25,36,51,53,58,63,105,124]),
         ("sorting",[6,63])]),["DISK_THM"]),
       [read"%108%53%108%55%108%56%108%58%136%126%175$3@@%175$2@@@%136%126%175$1@@%175$0@@@%126%175%141$3@$1@@@%175%141$2@$0@@@@@|@|@|@|@"])
  fun op PERM_FUN_CONS x = x
    val op PERM_FUN_CONS =
    DT(((("sorting",87),
        [("bool",[25,36,53,58,63,105,124]),
         ("sorting",[8,63])]),["DISK_THM"]),
       [read"%94%78%108%53%108%55%136%126%175$1@@%175$0@@@%126%175%147$2@$1@@@%175%147$2@$0@@@@|@|@|@"])
  fun op PERM_FUN_APPEND_CONS x = x
    val op PERM_FUN_APPEND_CONS =
    DT(((("sorting",88),
        [("bool",[25,53,54,58,63,73,75]),("list",[20]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[8,12,63])]),["DISK_THM"]),
       [read"%94%78%108%53%108%56%126%175%141$1@%147$2@$0@@@@%175%141%147$2@$1@@$0@@@|@|@|@"])
  fun op PERM_FUN_SWAP_AT_FRONT x = x
    val op PERM_FUN_SWAP_AT_FRONT =
    DT(((("sorting",89),
        [("bool",[25,36,58,63]),("sorting",[1,20,63])]),["DISK_THM"]),
       [read"%94%78%94%89%108%51%126%175%147$2@%147$1@$0@@@@%175%147$1@%147$2@$0@@@@|@|@|@"])
  fun op PERM_FUN_CONS_11_SWAP_AT_FRONT x = x
    val op PERM_FUN_CONS_11_SWAP_AT_FRONT =
    DT(((("sorting",90),
        [("bool",[25,58,63]),("sorting",[8,63,89])]),["DISK_THM"]),
       [read"%94%89%108%53%94%78%108%56%136%126%175$2@@%175%147$1@$0@@@@%126%175%147$3@$2@@@%175%147$1@%147$3@$0@@@@@|@|@|@|@"])
  fun op PERM_FUN_CONS_11_APPEND x = x
    val op PERM_FUN_CONS_11_APPEND =
    DT(((("sorting",91),
        [("arithmetic",[25,27,71,91,173,177,180]),
         ("bool",[25,26,27,30,36,52,54,56,58,63,64,104,105,124,129]),
         ("list",[22,27,57,119]),("numeral",[3,5,8]),
         ("sorting",[18,63])]),["DISK_THM"]),
       [read"%94%89%108%53%108%56%108%59%136%126%175$2@@%175%141$1@$0@@@@%126%175%147$3@$2@@@%175%141$1@%147$3@$0@@@@@|@|@|@|@"])
  fun op PERM_FUN_CONS_APPEND_1 x = x
    val op PERM_FUN_CONS_APPEND_1 =
    DT(((("sorting",92),
        [("arithmetic",[25,26,27,71,91,173,177,180]),
         ("bool",[25,26,27,30,36,52,54,56,58,63,64,104,105,124,129]),
         ("list",[22,27,57,119]),("numeral",[3,5,8]),
         ("sorting",[18,63])]),["DISK_THM"]),
       [read"%108%51%108%53%94%78%108%56%136%126%175$2@@%175%147$1@$0@@@@%126%175%141$2@$3@@@%175%147$1@%141$0@$3@@@@@|@|@|@|@"])
  fun op PERM_FUN_CONS_APPEND_2 x = x
    val op PERM_FUN_CONS_APPEND_2 =
    DT(((("sorting",93),
        [("arithmetic",[25,27,71,91,173,177,180]),
         ("bool",[25,26,27,30,36,52,54,56,58,63,64,104,105,124,129]),
         ("list",[22,27,57,119]),("numeral",[3,5,8]),
         ("sorting",[18,63])]),["DISK_THM"]),
       [read"%108%51%108%53%94%78%108%56%136%126%175$2@@%175%147$1@$0@@@@%126%175%141$3@$2@@@%175%147$1@%141$3@$0@@@@@|@|@|@|@"])
  fun op PERM_FUN_APPEND_APPEND_1 x = x
    val op PERM_FUN_APPEND_APPEND_1 =
    DT(((("sorting",94),
        [("arithmetic",[27,91]),("bool",[25,36,53,56,58,105,124]),
         ("list",[56,57,119]),("sorting",[18,63])]),["DISK_THM"]),
       [read"%108%53%108%56%108%59%108%60%136%126%175$3@@%175%141$2@$1@@@@%126%175%141$3@$0@@@%175%141$2@%141$1@$0@@@@@|@|@|@|@"])
  fun op PERM_FUN_APPEND_APPEND_2 x = x
    val op PERM_FUN_APPEND_APPEND_2 =
    DT(((("sorting",95),
        [("arithmetic",[26,27,91]),("bool",[25,36,53,56,58,105,124]),
         ("list",[56,57,119]),("sorting",[18,63])]),["DISK_THM"]),
       [read"%108%53%108%56%108%59%108%60%136%126%175$3@@%175%141$2@$1@@@@%126%175%141$0@$3@@@%175%141$2@%141$0@$1@@@@@|@|@|@|@"])
  fun op PERM_FUN_APPEND x = x
    val op PERM_FUN_APPEND =
    DT(((("sorting",96),
        [("bool",[25,36,58,63]),("sorting",[12,63])]),["DISK_THM"]),
       [read"%108%53%108%56%126%175%141$1@$0@@@%175%141$0@$1@@@|@|@"])
  fun op PERM_FUN_CONS_IFF x = x
    val op PERM_FUN_CONS_IFF =
    DT(((("sorting",97),
        [("bool",[25,36,53,58]),("sorting",[8,63])]),["DISK_THM"]),
       [read"%94%78%108%53%108%56%136%126%175$1@@%175$0@@@%126%175%147$2@$1@@@%175%147$2@$0@@@@|@|@|@"])
  fun op PERM_FUN_APPEND_IFF x = x
    val op PERM_FUN_APPEND_IFF =
    DT(((("sorting",98),
        [("bool",[25,36,53,58]),("sorting",[47,63])]),["DISK_THM"]),
       [read"%108%51%108%53%108%56%136%126%175$1@@%175$0@@@%126%175%141$2@$1@@@%175%141$2@$0@@@@|@|@|@"])
  fun op PERM_FUN_CONG x = x
    val op PERM_FUN_CONG =
    DT(((("sorting",99),
        [("bool",[25,26,53,54,63]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[63])]),["DISK_THM"]),
       [read"%108%53%108%55%108%56%108%58%136%126%175$3@@%175$2@@@%136%126%175$1@@%175$0@@@%124%175$3@$1@@%175$2@$0@@@@|@|@|@|@"])
  fun op PERM_CONG_2 x = x
    val op PERM_CONG_2 =
    DT(((("sorting",100),
        [("bool",[25,26,53,54,55,63]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[63])]),["DISK_THM"]),
       [read"%108%53%108%55%108%56%108%58%136%175$3@$2@@%136%175$1@$0@@%124%175$3@$1@@%175$2@$0@@@@|@|@|@|@"])
  fun op PERM_CONG_APPEND_IFF x = x
    val op PERM_CONG_APPEND_IFF =
    DT(((("sorting",101),
        [("bool",[25,26,53,54,58,63,73]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[47,63])]),["DISK_THM"]),
       [read"%108%51%108%53%108%55%108%56%108%58%136%175$3@%141$4@$2@@@%136%175$1@%141$4@$0@@@%124%175$3@$1@@%175$2@$0@@@@|@|@|@|@|@"])
  fun op PERM_FUN_SPLIT x = x
    val op PERM_FUN_SPLIT =
    DT(((("sorting",102),
        [("bool",[25,53,54,58,63,73]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[47,63])]),["DISK_THM"]),
       [read"%108%51%108%53%108%55%108%56%136%175$3@%141$2@$0@@@%136%175$1@$2@@%175$3@%141$1@$0@@@@|@|@|@|@"])
  fun op PERM_REWR x = x
    val op PERM_REWR =
    DT(((("sorting",103),
        [("bool",[13,25,26,27,30,36,47,48,51,52,53,54,56,63,71,93,94,96]),
         ("combin",[19]),("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[47,63])]),["DISK_THM"]),
       [read"%108%51%108%70%108%53%108%56%136%175$3@$2@@%124%175%141$3@$1@@$0@@%175%141$2@$1@@$0@@@|@|@|@|@"])
  fun op PART3_FILTER x = x
    val op PART3_FILTER =
    DT(((("sorting",106),
        [("bool",[14,25,26,27,30,48,51,52,54,56,58,63,64,96,105,129]),
         ("combin",[19]),("list",[9,27,43]),("pair",[4,8,9,37]),
         ("sorting",[105])]),["DISK_THM"]),
       [read"%108%74%94%48%135%173%18@$0@$1@@%118%153%78%119%18$0@$1@@%220%18$1@$0@@@|@$1@@%117%153%78%119%18$0@$1@@%18$1@$0@@|@$1@@%153%78%220%18$0@$1@@|@$1@@@@|@|@"])
  fun op QSORT3_IND x = x
    val op QSORT3_IND =
    DT(((("sorting",109),
        [("arithmetic",[24,25,27,38,46,59,71,93,173,176,180]),
         ("bool",
         [14,15,25,26,27,30,36,53,54,58,63,64,96,101,104,105,123,124]),
         ("combin",[5,19]),("list",[6,22,27,43,46]),("numeral",[3,5,8]),
         ("pair",[4,5,7,9,16,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),("sat",[1,3,5,6,7,11,15]),
         ("sorting",[106,107,108])]),["DISK_THM"]),
       [read"%102%12%136%119%98%18$1$0@%171@|@@%98%18%94%48%108%74%136%119%108%61%108%36%108%49%136%135%118$2@%117$1@$0@@@%173$5@$4@$3@@@$6$5@$0@@|@|@|@@%108%61%108%36%108%49%136%135%118$2@%117$1@$0@@@%173$5@$4@$3@@@$6$5@$2@@|@|@|@@@$3$2@%147$1@$0@@@|@|@|@@@%98%75%108%76$2$1@$0@|@|@@|@"])
  fun op QSORT3_DEF x = x
    val op QSORT3_DEF =
    DT(((("sorting",110),
        [("arithmetic",[24,25,27,38,46,59,71,93,173,176,180]),
         ("bool",
         [14,15,25,26,27,30,36,53,54,58,63,64,96,101,104,105,123,124]),
         ("combin",[5,19]),("list",[6,22,27,43,46]),("numeral",[3,5,8]),
         ("pair",[4,5,7,9,16,49]),("prim_rec",[43,44]),
         ("relation",[101,113,121,126]),("sat",[1,3,5,6,7,11,15]),
         ("sorting",[106,107,108])]),["DISK_THM"]),
       [read"%119%98%18%130%180$0@%171@@%171@|@@%108%74%94%48%98%18%130%180$0@%147$1@$2@@@%164%200%61%199%36%49%141%141%180$3@$2@@%147$4@$1@@@%180$3@$0@@||@|@@%173$0@$1@$2@@@|@|@|@@"])
  fun op PERM3 x = x
    val op PERM3 =
    DT(((("sorting",111),
        [("bool",[25,36,53,56,58,105,124]),("list",[119]),
         ("sorting",[0])]),["DISK_THM"]),
       [read"%108%80%108%24%108%27%108%30%108%32%108%33%108%34%136%119%119%175$5@$4@@%119%175$3@$2@@%175$1@$0@@@@%175$6@%141%141$5@$3@@$1@@@@%175$6@%141%141$4@$2@@$0@@@|@|@|@|@|@|@|@"])
  fun op PERM3_FILTER x = x
    val op PERM3_FILTER =
    DT(((("sorting",112),
        [("bool",
         [13,14,25,26,27,30,47,48,51,52,53,54,56,58,63,64,71,93,94,96,105,
          129,147]),("combin",[5,8]),("list",[9,27,43]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[1,4,6,12,15])]),["DISK_THM"]),
       [read"%108%51%94%47%175$1@%141%141%153%78%119%18$0@$1@@%220%18$1@$0@@@|@$1@@%153%78%119%18$0@$1@@%18$1@$0@@|@$1@@@%153%78%220%18$0@$1@@|@$1@@@|@|@"])
  fun op PERM_QSORT3 x = x
    val op PERM_QSORT3 =
    DT(((("sorting",113),
        [("arithmetic",[24,25,27,38,46,59,71,93,110,173,176,180]),
         ("bool",
         [14,15,25,26,27,30,36,53,54,56,58,63,64,93,95,96,101,104,105,123,
          124,143,145]),("combin",[1,3,5,8,11,15,16,17,19,20,33,34,35]),
         ("list",[6,20,22,27,43,46,56]),("marker",[6,9]),
         ("numeral",[3,5,8]),("pair",[4,5,7,9,16,43,44,45,46,49]),
         ("prim_rec",[43,44]),("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,15,17,18]),
         ("sorting",[1,9,11,106,107,108,111,112])]),["DISK_THM"]),
       [read"%108%51%98%18%175$1@%180$0@$1@@|@|@"])
  fun op SORTED_EQ_PART x = x
    val op SORTED_EQ_PART =
    DT(((("sorting",114),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",
         [14,15,25,26,27,30,36,43,47,48,51,52,53,54,56,58,63,64,71,75,78,
          80,84,93,94,96,104,105,107,124,146]),("combin",[19]),
         ("list",[6,7,27,43,82]),("numeral",[3,7,8]),("pair",[7,9,16,49]),
         ("prim_rec",[42]),("relation",[0,113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[26,27,31])]),["DISK_THM"]),
       [read"%108%51%98%18%136%217$0@@%188$0@%153%78%119$1$0@%48@@$1%48@$0@@|@$1@@@|@|@"])
  fun op QSORT3_SORTS x = x
    val op QSORT3_SORTS =
    DT(((("sorting",115),
        [("arithmetic",[22,24,25,27,38,41,46,59,71,88,93,110,173,176,180]),
         ("bool",
         [14,15,25,26,27,30,36,43,47,48,51,52,53,54,56,58,63,64,71,75,78,
          80,84,93,94,96,101,104,105,107,123,124,143,146]),
         ("combin",[5,8,11,15,16,19,33,35]),
         ("list",[6,7,22,27,43,46,81,82,120]),("marker",[6,9]),
         ("numeral",[3,5,7,8]),("pair",[4,5,7,9,16,43,45,46,49]),
         ("prim_rec",[42,43,44]),("relation",[0,6,101,113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",
         [26,27,30,31,32,83,106,107,108,113,114])]),["DISK_THM"]),
       [read"%98%18%136%119%217$0@@%216$0@@@%192%180@$0@@|@"])
  fun op QSORT3_SPLIT x = x
    val op QSORT3_SPLIT =
    DT(((("sorting",116),
        [("arithmetic",[24,25,27,38,46,59,71,93,110,173,176,180]),
         ("bool",
         [13,14,15,25,26,27,30,36,43,47,48,51,52,53,54,56,58,63,64,71,75,
          78,80,84,93,94,96,101,104,105,123,124,129,146,147]),
         ("combin",[5,8,11,15,16,17,19,33,34,35]),
         ("list",[6,9,20,22,27,43,46,56]),("marker",[6,9]),
         ("numeral",[3,5,8]),("pair",[4,5,7,9,16,43,44,45,46,49]),
         ("prim_rec",[43,44]),("relation",[0,6,101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15]),
         ("sorting",[23,106,107,108,113])]),["DISK_THM"]),
       [read"%98%18%136%119%217$0@@%216$0@@@%108%51%94%35%130%180$2@$1@@%141%141%180$2@%153%78%119$3$0@$1@@%220$3$1@$0@@@|@$1@@@%153%78%119$3$0@$1@@$3$1@$0@@|@$1@@@%180$2@%153%78%220$3$0@$1@@|@$1@@@@|@|@@|@"])
  fun op QSORT3_STABLE x = x
    val op QSORT3_STABLE =
    DT(((("sorting",117),
        [("arithmetic",[24,25,27,38,46,59,71,93,110,173,176,180]),
         ("bool",
         [2,13,14,15,25,26,27,30,36,43,47,48,51,52,53,54,55,56,58,61,63,64,
          71,75,78,80,83,84,93,94,96,99,101,104,105,108,109,111,123,124,
          129,143,146,147]),("combin",[1,3,5,8,11,15,16,19,20,33,35]),
         ("list",[6,9,20,22,27,43,46,55,119]),("marker",[6,9]),
         ("numeral",[3,5,8]),("pair",[4,5,7,9,16,43,45,46,49]),
         ("prim_rec",[43,44]),("relation",[0,6,101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[104,106,107,108,115,116])]),["DISK_THM"]),
       [read"%98%18%136%119%217$0@@%216$0@@@%193%180@$0@@|@"])
  fun op QSORT3_MEM x = x
    val op QSORT3_MEM =
    DT(((("sorting",118),
        [("arithmetic",[24,25,27,38,46,59,71,93,173,176,180]),
         ("bool",
         [14,15,25,26,27,30,32,36,51,52,53,54,56,58,63,64,93,95,96,99,101,
          104,105,123,124,145]),("combin",[1,3,5,19,20]),
         ("list",[6,22,25,27,43,46,82,120,230]),("numeral",[3,5,8]),
         ("pair",[4,5,7,9,16,49]),("pred_set",[10,33,80]),
         ("prim_rec",[43,44]),("relation",[101,113,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,15,17,18]),
         ("sorting",[106,107,108,109])]),["DISK_THM"]),
       [read"%98%18%108%3%94%78%124%159$0@%165%180$2@$1@@@@%159$0@%165$1@@@|@|@|@"])
  fun op QSORT3_SORTED x = x
    val op QSORT3_SORTED =
    DT(((("sorting",119),
        [("bool",[25,63]),("sorting",[30,115])]),["DISK_THM"]),
       [read"%98%18%108%3%136%119%217$1@@%216$1@@@%188$1@%180$1@$0@@@|@|@"])
  fun op sorted_count_list x = x
    val op sorted_count_list =
    DT(((("sorting",120),
        [("arithmetic",[24,25,27,41,46,71,93,172,173,176,180]),
         ("bool",[14,25,36,43,51,52,53,54,58,63,96,101,104,105,124]),
         ("list",[120,260]),("num",[9]),("numeral",[3,5,8]),
         ("relation",[0]),("rich_list",[17,282,283]),
         ("sorting",[32,77,78])]),["DISK_THM"]),
       [read"%111%64%190%121@%149$0@@|@"])
  fun op sorted_map x = x
    val op sorted_map =
    DT(((("sorting",121),
        [("bool",[14,25,26,51,53,54,55,58,63,84,105,124]),
         ("list",[23,43,89]),("relation",[114,119]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18]),
         ("sorting",[31,77])]),["DISK_THM"]),
       [read"%98%18%99%39%109%52%136%217$2@@%124%188$2@%168$1@$0@@@%189%208$2@$1@@$0@@@|@|@|@"])
  fun op sorted_perm_count_list x = x
    val op sorted_perm_count_list =
    DT(((("sorting",122),
        [("arithmetic",[24,25,46,71,93,173,176,177,180]),
         ("bool",[25,36,52,53,54,58,63,83,96,100,101,104,105,124]),
         ("numeral",[3,8]),("relation",[0,4]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18]),
         ("sorting",[84,120,121])]),["DISK_THM"]),
       [read"%94%89%101%40%109%52%111%64%136%119%189%209%121@$2@@$1@@%177%169$2@$1@@%149$0@@@@%132%169$2@$1@@%149$0@@@|@|@|@|@"])
  fun op SORTED_weaken x = x
    val op SORTED_weaken =
    DT(((("sorting",123),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",
         [14,15,25,27,36,51,52,53,54,55,56,58,63,93,95,96,99,101,104,105,
          107,124,145]),("combin",[19]),("list",[6,7,43,46,120]),
         ("numeral",[3,7,8]),("pair",[7,9,16,49]),("prim_rec",[42]),
         ("relation",[113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("sorting",[26,27,77])]),["DISK_THM"]),
       [read"%98%18%98%20%108%62%136%119%188$2@$0@@%94%78%94%89%136%119%159$1@%165$2@@@%119%159$0@%165$2@@@$4$1@$0@@@@$3$1@$0@@|@|@@@%188$1@$0@@|@|@|@"])
  fun op less_sorted_eq x = x
    val op less_sorted_eq =
    DT(((("sorting",124),
        [("arithmetic",[33]),("sorting",[31])]),["DISK_THM"]),
       [read"%110%4%111%81%124%190%120@%148$0@$1@@@%119%190%120@$1@@%111%91%136%160$0@%166$2@@@%120$1@$0@@|@@@|@|@"])
  fun op SORTED_GENLIST_PLUS x = x
    val op SORTED_GENLIST_PLUS =
    DT(((("sorting",125),
        [("arithmetic",[22,24,25,26,27,41,46,59,71,91,93,172,173,177,180]),
         ("bool",[14,25,26,36,43,51,52,53,54,58,60,63,96,101,104,105,124]),
         ("combin",[8]),("list",[292,295,296]),("num",[9]),
         ("numeral",[3,5,8]),("sat",[1,3,5,6,7,11,14,17,18,19,20,23]),
         ("sorting",[77,124])]),["DISK_THM"]),
       [read"%111%64%111%50%190%120@%155%115$0@@$1@@|@|@"])
  fun op SORTED_ALL_DISTINCT x = x
    val op SORTED_ALL_DISTINCT =
    DT(((("sorting",126),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",
         [2,14,15,25,26,36,51,52,53,54,56,58,63,75,84,93,96,104,105,107,
          124]),("combin",[19]),("list",[6,7,43,120,215]),
         ("numeral",[3,7,8]),("pair",[7,9,16,49]),("prim_rec",[42]),
         ("relation",[2,113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18]),
         ("sorting",[26,27,31,77])]),["DISK_THM"]),
       [read"%136%119%210%18@@%217%18@@@%108%62%136%188%18@$0@@%140$0@@|@@"])
  fun op sorted_filter x = x
    val op sorted_filter =
    DT(((("sorting",127),
        [("arithmetic",[22,24,25,41,46,59,71,88,93,173,180]),
         ("bool",
         [2,15,25,26,27,30,36,51,52,53,54,58,63,64,75,84,93,96,99,104,105,
          107,124,129]),("combin",[19]),("list",[6,7,27,82]),
         ("numeral",[3,7,8]),("pair",[7,9,16,49]),("prim_rec",[42]),
         ("relation",[0,113,115,121,126]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18]),
         ("sorting",[26,27,28,31])]),["DISK_THM"]),
       [read"%98%18%108%62%136%217$1@@%136%188$1@$0@@%188$1@%153%11@$0@@@@|@|@"])
  end
  val _ = DB.bindl "sorting"
  [("PERM_DEF",PERM_DEF,DB.Def),
   ("SORTED_tupled_primitive_DEF",SORTED_tupled_primitive_DEF,DB.Def),
   ("SORTED_curried_DEF",SORTED_curried_DEF,DB.Def),
   ("SORTS_DEF",SORTS_DEF,DB.Def), ("PART_DEF",PART_DEF,DB.Def),
   ("PARTITION_DEF",PARTITION_DEF,DB.Def),
   ("QSORT_tupled_primitive_DEF",QSORT_tupled_primitive_DEF,DB.Def),
   ("QSORT_curried_DEF",QSORT_curried_DEF,DB.Def),
   ("PERM_SINGLE_SWAP_DEF",PERM_SINGLE_SWAP_DEF,DB.Def),
   ("STABLE_DEF",STABLE_DEF,DB.Def), ("PART3_DEF",PART3_DEF,DB.Def),
   ("QSORT3_tupled_primitive_DEF",QSORT3_tupled_primitive_DEF,DB.Def),
   ("QSORT3_curried_DEF",QSORT3_curried_DEF,DB.Def),
   ("PERM_REFL",PERM_REFL,DB.Thm), ("PERM_INTRO",PERM_INTRO,DB.Thm),
   ("PERM_transitive",PERM_transitive,DB.Thm),
   ("PERM_TRANS",PERM_TRANS,DB.Thm), ("PERM_SYM",PERM_SYM,DB.Thm),
   ("PERM_CONG",PERM_CONG,DB.Thm), ("PERM_MONO",PERM_MONO,DB.Thm),
   ("PERM_CONS_IFF",PERM_CONS_IFF,DB.Thm), ("PERM_NIL",PERM_NIL,DB.Thm),
   ("PERM_SING",PERM_SING,DB.Thm),
   ("PERM_CONS_EQ_APPEND",PERM_CONS_EQ_APPEND,DB.Thm),
   ("PERM_APPEND",PERM_APPEND,DB.Thm), ("CONS_PERM",CONS_PERM,DB.Thm),
   ("APPEND_PERM_SYM",APPEND_PERM_SYM,DB.Thm),
   ("PERM_SPLIT",PERM_SPLIT,DB.Thm),
   ("FILTER_EQ_REP",FILTER_EQ_REP,DB.Thm),
   ("FILTER_EQ_LENGTHS_EQ",FILTER_EQ_LENGTHS_EQ,DB.Thm),
   ("PERM_alt",PERM_alt,DB.Thm), ("PERM_IND",PERM_IND,DB.Thm),
   ("PERM_SWAP_AT_FRONT",PERM_SWAP_AT_FRONT,DB.Thm),
   ("PERM_SWAP_L_AT_FRONT",PERM_SWAP_L_AT_FRONT,DB.Thm),
   ("PERM_STRONG_IND",PERM_STRONG_IND,DB.Thm),
   ("PERM_LENGTH",PERM_LENGTH,DB.Thm), ("PERM_MEM_EQ",PERM_MEM_EQ,DB.Thm),
   ("PERM_LIST_TO_SET",PERM_LIST_TO_SET,DB.Thm),
   ("SORTED_IND",SORTED_IND,DB.Thm), ("SORTED_DEF",SORTED_DEF,DB.Thm),
   ("SORTED_EQ",SORTED_EQ,DB.Thm), ("SORTED_APPEND",SORTED_APPEND,DB.Thm),
   ("PART_LENGTH",PART_LENGTH,DB.Thm),
   ("PART_LENGTH_LEM",PART_LENGTH_LEM,DB.Thm),
   ("PARTs_HAVE_PROP",PARTs_HAVE_PROP,DB.Thm),
   ("PART_MEM",PART_MEM,DB.Thm), ("QSORT_IND",QSORT_IND,DB.Thm),
   ("QSORT_DEF",QSORT_DEF,DB.Thm), ("QSORT_MEM",QSORT_MEM,DB.Thm),
   ("QSORT_PERM",QSORT_PERM,DB.Thm), ("QSORT_SORTED",QSORT_SORTED,DB.Thm),
   ("QSORT_SORTS",QSORT_SORTS,DB.Thm),
   ("PERM_APPEND_IFF",PERM_APPEND_IFF,DB.Thm),
   ("PERM_SINGLE_SWAP_SYM",PERM_SINGLE_SWAP_SYM,DB.Thm),
   ("PERM_SINGLE_SWAP_I",PERM_SINGLE_SWAP_I,DB.Thm),
   ("PERM_SINGLE_SWAP_APPEND",PERM_SINGLE_SWAP_APPEND,DB.Thm),
   ("PERM_SINGLE_SWAP_REFL",PERM_SINGLE_SWAP_REFL,DB.Thm),
   ("PERM_SINGLE_SWAP_CONS",PERM_SINGLE_SWAP_CONS,DB.Thm),
   ("PERM_SINGLE_SWAP_TC_CONS",PERM_SINGLE_SWAP_TC_CONS,DB.Thm),
   ("PERM_TC",PERM_TC,DB.Thm), ("PERM_RTC",PERM_RTC,DB.Thm),
   ("PERM_EQC",PERM_EQC,DB.Thm),
   ("PERM_lifts_transitive_relations",
    PERM_lifts_transitive_relations,
    DB.Thm), ("PERM_lifts_equalities",PERM_lifts_equalities,DB.Thm),
   ("PERM_lifts_invariants",PERM_lifts_invariants,DB.Thm),
   ("PERM_lifts_monotonicities",PERM_lifts_monotonicities,DB.Thm),
   ("PERM_EQUIVALENCE",PERM_EQUIVALENCE,DB.Thm),
   ("PERM_EQUIVALENCE_ALT_DEF",PERM_EQUIVALENCE_ALT_DEF,DB.Thm),
   ("ALL_DISTINCT_PERM",ALL_DISTINCT_PERM,DB.Thm),
   ("PERM_ALL_DISTINCT",PERM_ALL_DISTINCT,DB.Thm),
   ("ALL_DISTINCT_PERM_LIST_TO_SET_TO_LIST",
    ALL_DISTINCT_PERM_LIST_TO_SET_TO_LIST,
    DB.Thm), ("PERM_MAP",PERM_MAP,DB.Thm), ("PERM_SUM",PERM_SUM,DB.Thm),
   ("PERM_FILTER",PERM_FILTER,DB.Thm),
   ("PERM_REVERSE",PERM_REVERSE,DB.Thm),
   ("PERM_REVERSE_EQ",PERM_REVERSE_EQ,DB.Thm),
   ("FOLDR_PERM",FOLDR_PERM,DB.Thm),
   ("PERM_SET_TO_LIST_count_COUNT_LIST",
    PERM_SET_TO_LIST_count_COUNT_LIST,
    DB.Thm),
   ("SUM_IMAGE_count_SUM_GENLIST",SUM_IMAGE_count_SUM_GENLIST,DB.Thm),
   ("SUM_IMAGE_count_MULT",SUM_IMAGE_count_MULT,DB.Thm),
   ("sum_of_sums",sum_of_sums,DB.Thm), ("SORTED_NIL",SORTED_NIL,DB.Thm),
   ("SORTED_SING",SORTED_SING,DB.Thm), ("SORTED_TL",SORTED_TL,DB.Thm),
   ("SORTED_EL_SUC",SORTED_EL_SUC,DB.Thm),
   ("SORTED_EL_LESS",SORTED_EL_LESS,DB.Thm),
   ("SORTED_APPEND_IFF",SORTED_APPEND_IFF,DB.Thm),
   ("MEM_PERM",MEM_PERM,DB.Thm), ("SORTED_PERM_EQ",SORTED_PERM_EQ,DB.Thm),
   ("QSORT_eq_if_PERM",QSORT_eq_if_PERM,DB.Thm),
   ("PERM_FUN_APPEND_C",PERM_FUN_APPEND_C,DB.Thm),
   ("PERM_FUN_CONS",PERM_FUN_CONS,DB.Thm),
   ("PERM_FUN_APPEND_CONS",PERM_FUN_APPEND_CONS,DB.Thm),
   ("PERM_FUN_SWAP_AT_FRONT",PERM_FUN_SWAP_AT_FRONT,DB.Thm),
   ("PERM_FUN_CONS_11_SWAP_AT_FRONT",
    PERM_FUN_CONS_11_SWAP_AT_FRONT,
    DB.Thm), ("PERM_FUN_CONS_11_APPEND",PERM_FUN_CONS_11_APPEND,DB.Thm),
   ("PERM_FUN_CONS_APPEND_1",PERM_FUN_CONS_APPEND_1,DB.Thm),
   ("PERM_FUN_CONS_APPEND_2",PERM_FUN_CONS_APPEND_2,DB.Thm),
   ("PERM_FUN_APPEND_APPEND_1",PERM_FUN_APPEND_APPEND_1,DB.Thm),
   ("PERM_FUN_APPEND_APPEND_2",PERM_FUN_APPEND_APPEND_2,DB.Thm),
   ("PERM_FUN_APPEND",PERM_FUN_APPEND,DB.Thm),
   ("PERM_FUN_CONS_IFF",PERM_FUN_CONS_IFF,DB.Thm),
   ("PERM_FUN_APPEND_IFF",PERM_FUN_APPEND_IFF,DB.Thm),
   ("PERM_FUN_CONG",PERM_FUN_CONG,DB.Thm),
   ("PERM_CONG_2",PERM_CONG_2,DB.Thm),
   ("PERM_CONG_APPEND_IFF",PERM_CONG_APPEND_IFF,DB.Thm),
   ("PERM_FUN_SPLIT",PERM_FUN_SPLIT,DB.Thm),
   ("PERM_REWR",PERM_REWR,DB.Thm), ("PART3_FILTER",PART3_FILTER,DB.Thm),
   ("QSORT3_IND",QSORT3_IND,DB.Thm), ("QSORT3_DEF",QSORT3_DEF,DB.Thm),
   ("PERM3",PERM3,DB.Thm), ("PERM3_FILTER",PERM3_FILTER,DB.Thm),
   ("PERM_QSORT3",PERM_QSORT3,DB.Thm),
   ("SORTED_EQ_PART",SORTED_EQ_PART,DB.Thm),
   ("QSORT3_SORTS",QSORT3_SORTS,DB.Thm),
   ("QSORT3_SPLIT",QSORT3_SPLIT,DB.Thm),
   ("QSORT3_STABLE",QSORT3_STABLE,DB.Thm),
   ("QSORT3_MEM",QSORT3_MEM,DB.Thm),
   ("QSORT3_SORTED",QSORT3_SORTED,DB.Thm),
   ("sorted_count_list",sorted_count_list,DB.Thm),
   ("sorted_map",sorted_map,DB.Thm),
   ("sorted_perm_count_list",sorted_perm_count_list,DB.Thm),
   ("SORTED_weaken",SORTED_weaken,DB.Thm),
   ("less_sorted_eq",less_sorted_eq,DB.Thm),
   ("SORTED_GENLIST_PLUS",SORTED_GENLIST_PLUS,DB.Thm),
   ("SORTED_ALL_DISTINCT",SORTED_ALL_DISTINCT,DB.Thm),
   ("sorted_filter",sorted_filter,DB.Thm)]

  local open Portable GrammarSpecials Parse
    fun UTOFF f = Feedback.trace("Parse.unicode_trace_off_complaints",0)f
  in
  val _ = mk_local_grms [("quantHeuristicsTheory.quantHeuristics_grammars",
                          quantHeuristicsTheory.quantHeuristics_grammars),
                         ("rich_listTheory.rich_list_grammars",
                          rich_listTheory.rich_list_grammars)]
  val _ = List.app (update_grms reveal) []
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("PERM", (Term.prim_mk_const { Name = "PERM", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("PERM", (Term.prim_mk_const { Name = "PERM", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("SORTED_tupled", (Term.prim_mk_const { Name = "SORTED_tupled", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("SORTED_tupled", (Term.prim_mk_const { Name = "SORTED_tupled", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("SORTED", (Term.prim_mk_const { Name = "SORTED", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("SORTED", (Term.prim_mk_const { Name = "SORTED", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("SORTS", (Term.prim_mk_const { Name = "SORTS", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("SORTS", (Term.prim_mk_const { Name = "SORTS", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("PART", (Term.prim_mk_const { Name = "PART", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("PARTITION", (Term.prim_mk_const { Name = "PARTITION", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("PARTITION", (Term.prim_mk_const { Name = "PARTITION", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("QSORT_tupled", (Term.prim_mk_const { Name = "QSORT_tupled", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("QSORT_tupled", (Term.prim_mk_const { Name = "QSORT_tupled", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("QSORT", (Term.prim_mk_const { Name = "QSORT", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("QSORT", (Term.prim_mk_const { Name = "QSORT", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("PERM_SINGLE_SWAP", (Term.prim_mk_const { Name = "PERM_SINGLE_SWAP", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("PERM_SINGLE_SWAP", (Term.prim_mk_const { Name = "PERM_SINGLE_SWAP", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("STABLE", (Term.prim_mk_const { Name = "STABLE", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("STABLE", (Term.prim_mk_const { Name = "STABLE", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("PART3", (Term.prim_mk_const { Name = "PART3", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("QSORT3_tupled", (Term.prim_mk_const { Name = "QSORT3_tupled", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("QSORT3_tupled", (Term.prim_mk_const { Name = "QSORT3_tupled", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("QSORT3", (Term.prim_mk_const { Name = "QSORT3", Thy = "sorting"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("QSORT3", (Term.prim_mk_const { Name = "QSORT3", Thy = "sorting"}))
  val sorting_grammars = Parse.current_lgrms()
  end
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "sorting",
    thydataty = "simp",
    data =
        "sorting.PERM_REFL sorting.PERM_REVERSE_EQ sorting.SORTED_SING sorting.SORTED_NIL sorting.PERM_SING sorting.PERM_CONS_IFF sorting.PERM_NIL"
  }
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "sorting",
    thydataty = "rule_induction",
    data = "sorting.PERM_STRONG_IND"
  }
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "sorting",
    thydataty = "compute",
    data =
        "sorting.PERM_DEF sorting.PERM_SINGLE_SWAP_DEF sorting.QSORT3_DEF sorting.PART3_DEF sorting.STABLE_DEF sorting.QSORT_DEF sorting.SORTED_DEF sorting.PARTITION_DEF sorting.PART_DEF sorting.SORTS_DEF"
  }

val _ = if !Globals.print_thy_loads then print "done\n" else ()
val _ = Theory.load_complete "sorting"
end
