structure bitTheory :> bitTheory =
struct
  val _ = if !Globals.print_thy_loads then print "Loading bitTheory ... " else ()
  open Type Term Thm
  infixr -->

  fun C s t ty = mk_thy_const{Name=s,Thy=t,Ty=ty}
  fun T s t A = mk_thy_type{Tyop=s, Thy=t,Args=A}
  fun V s q = mk_var(s,q)
  val U     = mk_vartype
  (*  Parents *)
  local open logrootTheory
  in end;
  val _ = Theory.link_parents
          ("bit",Arbnum.fromString "1488586140",Arbnum.fromString "581172")
          [("logroot",
           Arbnum.fromString "1488586117",
           Arbnum.fromString "342994")];
  val _ = Theory.incorporate_types "bit" [];

  val idvector = 
    let fun ID(thy,oth) = {Thy = thy, Other = oth}
    in Vector.fromList
  [ID("min", "fun"), ID("num", "num"), ID("min", "bool"),
   ID("pair", "prod"), ID("bool", "!"), ID("arithmetic", "*"),
   ID("arithmetic", "+"), ID("pair", ","), ID("arithmetic", "-"),
   ID("bool", "/\\"), ID("num", "0"), ID("prim_rec", "<"),
   ID("arithmetic", "<="), ID("min", "="), ID("min", "==>"),
   ID("bool", "?"), ID("bit", "BIT"), ID("arithmetic", "BIT1"),
   ID("arithmetic", "BIT2"), ID("bit", "BITS"), ID("bit", "BITV"),
   ID("bit", "BITWISE"), ID("bit", "BIT_MODIFY"), ID("bit", "BIT_REVERSE"),
   ID("bool", "COND"), ID("arithmetic", "DIV"), ID("bit", "DIVMOD_2EXP"),
   ID("bit", "DIV_2EXP"), ID("arithmetic", "EXP"), ID("while", "LEAST"),
   ID("bool", "LET"), ID("logroot", "LOG"), ID("bit", "LOG2"),
   ID("bit", "LOWEST_SET_BIT"), ID("arithmetic", "MIN"),
   ID("arithmetic", "MOD"), ID("bit", "MOD_2EXP"),
   ID("bit", "MOD_2EXP_EQ"), ID("bit", "MOD_2EXP_MAX"),
   ID("arithmetic", "NUMERAL"), ID("arithmetic", "ODD"), ID("bit", "SBIT"),
   ID("bit", "SIGN_EXTEND"), ID("bit", "SLICE"), ID("num", "SUC"),
   ID("bit", "TIMES_2EXP"), ID("arithmetic", "ZERO"), ID("bool", "\\/"),
   ID("bool", "~")]
  end;
  local open SharingTables
  in
  val tyvector = build_type_vector idvector
  [TYOP [1], TYOP [0, 0, 0], TYOP [0, 0, 1], TYOP [0, 0, 2], TYOP [2],
   TYOP [0, 4, 1], TYOP [0, 0, 4], TYOP [0, 0, 6], TYOP [0, 0, 7],
   TYOP [3, 0, 0], TYOP [0, 0, 9], TYOP [0, 0, 10], TYOP [0, 4, 4],
   TYOP [0, 0, 12], TYOP [0, 13, 1], TYOP [0, 0, 14], TYOP [0, 4, 12],
   TYOP [0, 16, 2], TYOP [0, 0, 17], TYOP [0, 12, 4], TYOP [0, 16, 4],
   TYOP [0, 20, 4], TYOP [0, 6, 4], TYOP [0, 22, 4], TYOP [0, 13, 4],
   TYOP [0, 24, 4], TYOP [0, 6, 22], TYOP [0, 1, 4], TYOP [0, 1, 27],
   TYOP [0, 9, 4], TYOP [0, 9, 29], TYOP [0, 4, 16], TYOP [0, 4, 2],
   TYOP [0, 6, 0], TYOP [0, 1, 1]]
  end
  val _ = Theory.incorporate_consts "bit" tyvector
     [("TIMES_2EXP", 2), ("SLICE", 3), ("SIGN_EXTEND", 3), ("SBIT", 5),
      ("MOD_2EXP_MAX", 7), ("MOD_2EXP_EQ", 8), ("MOD_2EXP", 2),
      ("LOWEST_SET_BIT", 1), ("LOG2", 1), ("DIV_2EXP", 2),
      ("DIVMOD_2EXP", 11), ("BIT_REVERSE", 2), ("BIT_MODIFY", 15),
      ("BITWISE", 18), ("BITV", 2), ("BITS", 3), ("BIT", 7)];

  local open SharingTables
  in
  val tmvector = build_term_vector idvector tyvector
  [TMV("P", 6), TMV("a", 0), TMV("b", 4), TMV("b", 0), TMV("f", 13),
   TMV("h", 0), TMV("h1", 0), TMV("h2", 0), TMV("i", 0), TMV("j", 0),
   TMV("k", 0), TMV("l", 0), TMV("l1", 0), TMV("l2", 0), TMV("m", 0),
   TMV("m'", 0), TMV("n", 0), TMV("op", 16), TMV("p", 0), TMV("r", 0),
   TMV("s", 0), TMV("wl", 0), TMV("x", 4), TMV("x", 0), TMV("y", 4),
   TMV("y", 0), TMC(4, 19), TMC(4, 21), TMC(4, 23), TMC(4, 25), TMC(4, 22),
   TMC(5, 2), TMC(6, 2), TMC(7, 11), TMC(8, 2), TMC(9, 16), TMC(10, 0),
   TMC(11, 7), TMC(12, 7), TMC(13, 16), TMC(13, 26), TMC(13, 28),
   TMC(13, 7), TMC(13, 30), TMC(14, 16), TMC(15, 22), TMC(16, 7),
   TMC(17, 1), TMC(18, 1), TMC(19, 3), TMC(20, 2), TMC(21, 18),
   TMC(22, 15), TMC(23, 2), TMC(24, 31), TMC(24, 32), TMC(25, 2),
   TMC(26, 11), TMC(27, 2), TMC(28, 2), TMC(29, 33), TMC(30, 34),
   TMC(31, 2), TMC(32, 1), TMC(33, 1), TMC(34, 2), TMC(35, 2), TMC(36, 2),
   TMC(37, 8), TMC(38, 7), TMC(39, 1), TMC(40, 6), TMC(41, 5), TMC(42, 3),
   TMC(43, 3), TMC(44, 1), TMC(45, 2), TMC(46, 0), TMC(47, 16),
   TMC(48, 12)]
  end
  local
  val DT = Thm.disk_thm val read = Term.read_raw tmvector
  in
  fun op MOD_2EXP_def x = x
    val op MOD_2EXP_def =
    DT(((("bit",0),[]),[]),
       [read"%30%23%30%16%42%67$1@$0@@%66$0@%59%70%48%77@@@$1@@@|@|@"])
  fun op DIV_2EXP_def x = x
    val op DIV_2EXP_def =
    DT(((("bit",1),[]),[]),
       [read"%30%23%30%16%42%58$1@$0@@%56$0@%59%70%48%77@@@$1@@@|@|@"])
  fun op TIMES_2EXP_def x = x
    val op TIMES_2EXP_def =
    DT(((("bit",2),[]),[]),
       [read"%30%23%30%16%42%76$1@$0@@%31$0@%59%70%48%77@@@$1@@@|@|@"])
  fun op DIVMOD_2EXP_def x = x
    val op DIVMOD_2EXP_def =
    DT(((("bit",3),[]),[]),
       [read"%30%23%30%16%43%57$1@$0@@%33%56$0@%59%70%48%77@@@$1@@@%66$0@%59%70%48%77@@@$1@@@@|@|@"])
  fun op SBIT_def x = x
    val op SBIT_def =
    DT(((("bit",4),[]),[]),
       [read"%26%2%30%16%42%72$1@$0@@%55$1@%59%70%48%77@@@$0@@%36@@|@|@"])
  fun op BITS_def x = x
    val op BITS_def =
    DT(((("bit",5),[]),[]),
       [read"%30%5%30%11%30%16%42%49$2@$1@$0@@%67%34%75$2@@$1@@%58$1@$0@@@|@|@|@"])
  fun op BITV_def x = x
    val op BITV_def =
    DT(((("bit",6),[]),[]),
       [read"%30%16%30%3%42%50$1@$0@@%49$0@$0@$1@@|@|@"])
  fun op BIT_def x = x
    val op BIT_def =
    DT(((("bit",7),[]),[]),
       [read"%30%3%30%16%39%46$1@$0@@%42%49$1@$1@$0@@%70%47%77@@@@|@|@"])
  fun op SLICE_def x = x
    val op SLICE_def =
    DT(((("bit",8),[]),[]),
       [read"%30%5%30%11%30%16%42%74$2@$1@$0@@%34%67%75$2@@$0@@%67$1@$0@@@|@|@|@"])
  fun op LOG2_def x = x
    val op LOG2_def =
    DT(((("bit",9),[]),[]), [read"%41%63@%62%70%48%77@@@@"])
  fun op LOWEST_SET_BIT_def x = x
    val op LOWEST_SET_BIT_def =
    DT(((("bit",10),[]),[]), [read"%30%16%42%64$0@@%60%8%46$0@$1@|@@|@"])
  fun op BIT_REVERSE_def x = x
    val op BIT_REVERSE_def =
    DT(((("bit",11),[("prim_rec",[38])]),["DISK_THM"]),
       [read"%35%30%23%42%53%36@$0@@%36@|@@%30%16%30%23%42%53%75$1@@$0@@%32%31%53$1@$0@@%70%48%77@@@@%72%46$1@$0@@%36@@@|@|@@"])
  fun op BITWISE_def x = x
    val op BITWISE_def =
    DT(((("bit",12),[("prim_rec",[38])]),["DISK_THM"]),
       [read"%35%27%17%30%23%30%25%42%51%36@$2@$1@$0@@%36@|@|@|@@%30%16%27%17%30%23%30%25%42%51%75$3@@$2@$1@$0@@%32%51$3@$2@$1@$0@@%72$2%46$3@$1@@%46$3@$0@@@$3@@@|@|@|@|@@"])
  fun op BIT_MODIFY_def x = x
    val op BIT_MODIFY_def =
    DT(((("bit",13),[("prim_rec",[38])]),["DISK_THM"]),
       [read"%35%29%4%30%23%42%52%36@$1@$0@@%36@|@|@@%30%16%29%4%30%23%42%52%75$2@@$1@$0@@%32%52$2@$1@$0@@%72$1$2@%46$2@$0@@@$2@@@|@|@|@@"])
  fun op SIGN_EXTEND_def x = x
    val op SIGN_EXTEND_def =
    DT(((("bit",14),[]),[]),
       [read"%30%11%30%5%30%16%42%73$2@$1@$0@@%61%14%55%46%34$3@%70%47%77@@@@$1@@%32%34%59%70%48%77@@@$2@@%59%70%48%77@@@$3@@@$0@@$0@|@%66$0@%59%70%48%77@@@$2@@@@|@|@|@"])
  fun op MOD_2EXP_EQ_def x = x
    val op MOD_2EXP_EQ_def =
    DT(((("bit",15),[]),[]),
       [read"%30%16%30%1%30%3%39%68$2@$1@$0@@%42%67$2@$1@@%67$2@$0@@@|@|@|@"])
  fun op MOD_2EXP_MAX_def x = x
    val op MOD_2EXP_MAX_def =
    DT(((("bit",16),[]),[]),
       [read"%30%16%30%1%39%69$1@$0@@%42%67$1@$0@@%34%59%70%48%77@@@$1@@%70%47%77@@@@@|@|@"])
  fun op LESS_MULT_MONO2 x = x
    val op LESS_MULT_MONO2 =
    DT(((("bit",17),
        [("arithmetic",[24,25,27,46,59,71,73,74,75,93,101,173]),
         ("bool",[25,36,54,58,63,104]),
         ("numeral",[3,5,8,17,40,41])]),["DISK_THM"]),
       [read"%30%1%30%3%30%23%30%25%44%35%37$3@$1@@%37$2@$0@@@%37%31$3@$2@@%31$1@$0@@@|@|@|@|@"])
  fun op LOG2_UNIQUE x = x
    val op LOG2_UNIQUE =
    DT(((("bit",18),
        [("bit",[9]),("bool",[58]),("logroot",[9])]),["DISK_THM"]),
       [read"%30%16%30%18%44%35%38%59%70%48%77@@@$0@@$1@@%37$1@%59%70%48%77@@@%75$0@@@@@%42%63$1@@$0@@|@|@"])
  fun op LOG2_TWOEXP x = x
    val op LOG2_TWOEXP =
    DT(((("bit",19),
        [("arithmetic",[24,25,59,71,95,173,180,277,278]),("bit",[18]),
         ("bool",[25,36,54,63,104]),("numeral",[3,7,8])]),["DISK_THM"]),
       [read"%30%16%42%63%59%70%48%77@@@$0@@@$0@|@"])
  fun op DIVMOD_2EXP x = x
    val op DIVMOD_2EXP =
    DT(((("bit",20),[("bit",[0,1,3]),("bool",[58])]),["DISK_THM"]),
       [read"%30%23%30%16%43%57$1@$0@@%33%58$1@$0@@%67$1@$0@@@|@|@"])
  fun op SUC_SUB x = x
    val op SUC_SUB =
    DT(((("bit",21),[("arithmetic",[113])]),["DISK_THM"]),
       [read"%30%1%42%34%75$0@@$0@@%70%47%77@@@|@"])
  fun op DIV_MULT_1 x = x
    val op DIV_MULT_1 =
    DT(((("bit",22),
        [("arithmetic",[69,216]),("bool",[26,58,105,124])]),["DISK_THM"]),
       [read"%30%19%30%16%44%37$1@$0@@%42%56%32$0@$1@@$0@@%70%47%77@@@@|@|@"])
  fun op NOT_ZERO_ADD1 x = x
    val op NOT_ZERO_ADD1 =
    DT(((("bit",23),
        [("arithmetic",[0,29,64,101]),("bool",[58])]),["DISK_THM"]),
       [read"%30%14%44%79%42$0@%36@@@%45%18%42$1@%75$0@@|@@|@"])
  fun op ZERO_LT_TWOEXP x = x
    val op ZERO_LT_TWOEXP =
    DT(((("bit",24),
        [("arithmetic",[139]),("numeral",[0,3])]),["DISK_THM"]),
       [read"%30%16%37%36@%59%70%48%77@@@$0@@|@"])
  fun op ONE_LE_TWOEXP x = x
    val op ONE_LE_TWOEXP =
    DT(((("bit",25),
        [("arithmetic",[41,46,59,71,93,173,176,180]),("bit",[24]),
         ("bool",[25,36,52,54,63,93,96,104,105,107]),("numeral",[3,8]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%16%38%70%47%77@@@%59%70%48%77@@@$0@@|@"])
  fun op TWOEXP_NOT_ZERO x = x
    val op TWOEXP_NOT_ZERO =
    DT(((("bit",26),
        [("arithmetic",[29]),("bit",[24]),("bool",[58])]),["DISK_THM"]),
       [read"%30%16%79%42%59%70%48%77@@@$0@@%36@@|@"])
  fun op MOD_2EXP_LT x = x
    val op MOD_2EXP_LT =
    DT(((("bit",27),
        [("arithmetic",[209]),("bit",[24]),
         ("bool",[53,63])]),["DISK_THM"]),
       [read"%30%16%30%10%37%66$0@%59%70%48%77@@@$1@@@%59%70%48%77@@@$1@@|@|@"])
  fun op TWOEXP_DIVISION x = x
    val op TWOEXP_DIVISION =
    DT(((("bit",28),
        [("arithmetic",[209]),("bit",[24]),
         ("bool",[53,63])]),["DISK_THM"]),
       [read"%30%16%30%10%42$0@%32%31%56$0@%59%70%48%77@@@$1@@@%59%70%48%77@@@$1@@@%66$0@%59%70%48%77@@@$1@@@@|@|@"])
  fun op TWOEXP_MONO x = x
    val op TWOEXP_MONO =
    DT(((("bit",29),
        [("arithmetic",[278]),("bool",[25,53,54,58,63,105,124]),
         ("numeral",[3,7])]),["DISK_THM"]),
       [read"%30%1%30%3%44%37$1@$0@@%37%59%70%48%77@@@$1@@%59%70%48%77@@@$0@@@|@|@"])
  fun op TWOEXP_MONO2 x = x
    val op TWOEXP_MONO2 =
    DT(((("bit",30),
        [("arithmetic",[277]),("bool",[25,53,54,58,63,105,124]),
         ("numeral",[3,7])]),["DISK_THM"]),
       [read"%30%1%30%3%44%38$1@$0@@%38%59%70%48%77@@@$1@@%59%70%48%77@@@$0@@@|@|@"])
  fun op EXP_SUB_LESS_EQ x = x
    val op EXP_SUB_LESS_EQ =
    DT(((("bit",31),
        [("arithmetic",[117]),("bit",[30]),
         ("bool",[25,63])]),["DISK_THM"]),
       [read"%30%1%30%3%38%59%70%48%77@@@%34$1@$0@@@%59%70%48%77@@@$1@@|@|@"])
  fun op MOD_LEQ x = x
    val op MOD_LEQ =
    DT(((("bit",32),
        [("arithmetic",[24,25,27,46,71,93,173,176,180,209,222,225]),
         ("bool",[25,36,52,54,58,63,93,96,104,105,107]),("numeral",[3,8]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%1%30%3%44%37%36@$0@@%38%66$1@$0@@$1@@|@|@"])
  fun op BITS_THM x = x
    val op BITS_THM =
    DT(((("bit",33),[("bit",[0,1,5])]),[]),
       [read"%30%5%30%11%30%16%42%49$2@$1@$0@@%66%56$0@%59%70%48%77@@@$1@@@%59%70%48%77@@@%34%75$2@@$1@@@@|@|@|@"])
  fun op BITSLT_THM x = x
    val op BITSLT_THM =
    DT(((("bit",34),
        [("arithmetic",[209]),("bit",[24,33]),
         ("bool",[25,63])]),["DISK_THM"]),
       [read"%30%5%30%11%30%16%37%49$2@$1@$0@@%59%70%48%77@@@%34%75$2@@$1@@@|@|@|@"])
  fun op BITSLT_THM2 x = x
    val op BITSLT_THM2 =
    DT(((("bit",35),
        [("arithmetic",[155]),("bit",[31,34]),("bool",[25,53,54,63]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%30%5%30%11%30%16%37%49$2@$1@$0@@%59%70%48%77@@@%75$2@@@|@|@|@"])
  fun op BITS_THM2 x = x
    val op BITS_THM2 =
    DT(((("bit",36),
        [("arithmetic",[8,25,26,32,60,63,102,128,155,212,226,255]),
         ("bit",[24,27,30,33]),
         ("bool",[25,30,51,53,56,58,63,105,124])]),["DISK_THM"]),
       [read"%30%5%30%11%30%16%42%49$2@$1@$0@@%56%66$0@%59%70%48%77@@@%75$2@@@@%59%70%48%77@@@$1@@@|@|@|@"])
  fun op BITS_LEQ x = x
    val op BITS_LEQ =
    DT(((("bit",37),
        [("arithmetic",[24,25,46,71,93,173,176,180,213]),
         ("bit",[24,32,36]),("bool",[25,36,54,63,96,101,104,105]),
         ("numeral",[3,8])]),["DISK_THM"]),
       [read"%30%5%30%11%30%16%38%49$2@$1@$0@@$0@|@|@|@"])
  fun op BITS_COMP_THM x = x
    val op BITS_COMP_THM =
    DT(((("bit",38),
        [("arithmetic",
         [8,24,25,26,27,32,38,46,60,63,71,73,93,102,128,145,155,172,173,
          177,180,212,226,230,234,255,269]),("bit",[24,27,30,33]),
         ("bool",[25,30,36,43,51,52,53,54,56,58,63,93,96,101,104,105,124]),
         ("numeral",[3,8]),("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%6%30%12%30%7%30%13%30%16%44%38%32$2@$3@@$4@@%42%49$2@$1@%49$4@$3@$0@@@%49%32$2@$3@@%32$1@$3@@$0@@@|@|@|@|@|@"])
  fun op BITS_DIV_THM x = x
    val op BITS_DIV_THM =
    DT(((("bit",39),
        [("arithmetic",[102,234]),("bit",[24,36]),
         ("bool",[25,51,56,63,105])]),["DISK_THM"]),
       [read"%30%5%30%11%30%23%30%16%42%56%49$3@$2@$1@@%59%70%48%77@@@$0@@@%49$3@%32$2@$0@@$1@@|@|@|@|@"])
  fun op BITS_LT_HIGH x = x
    val op BITS_LT_HIGH =
    DT(((("bit",40),
        [("arithmetic",[217]),("bit",[36]),
         ("bool",[25,53,56,58,63,105,124])]),["DISK_THM"]),
       [read"%30%5%30%11%30%16%44%37$0@%59%70%48%77@@@%75$2@@@@%42%49$2@$1@$0@@%56$0@%59%70%48%77@@@$1@@@@|@|@|@"])
  fun op BITS_ZERO x = x
    val op BITS_ZERO =
    DT(((("bit",41),
        [("arithmetic",[6,8,26,27,41,46,64,71,93,101,114,130,173,177,180]),
         ("bit",[34]),("bool",[25,36,52,54,58,63,96,101,104,105]),
         ("numeral",[3,8]),("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%5%30%11%30%16%44%37$2@$1@@%42%49$2@$1@$0@@%36@@|@|@|@"])
  fun op BITS_ZERO2 x = x
    val op BITS_ZERO2 =
    DT(((("bit",42),
        [("arithmetic",[219,220]),("bit",[24,36]),
         ("bool",[25,56,63])]),["DISK_THM"]),
       [read"%30%5%30%11%42%49$1@$0@%36@@%36@|@|@"])
  fun op BITS_ZERO3 x = x
    val op BITS_ZERO3 =
    DT(((("bit",43),[("arithmetic",[8,232]),("bit",[36])]),["DISK_THM"]),
       [read"%30%5%30%16%42%49$1@%36@$0@@%66$0@%59%70%48%77@@@%75$1@@@@|@|@"])
  fun op BITS_ZERO4 x = x
    val op BITS_ZERO4 =
    DT(((("bit",44),
        [("arithmetic",[6,22,24,25,41,46,62,71,93,173,180,200,227,232]),
         ("bit",[24,33]),
         ("bool",
         [25,26,27,36,51,53,54,56,58,63,96,101,104,105,124,129,147]),
         ("numeral",[3,8,33]),("prim_rec",[6])]),["DISK_THM"]),
       [read"%30%5%30%11%30%1%44%38$1@$2@@%42%49$2@$1@%31$0@%59%70%48%77@@@$1@@@@%49%34$2@$1@@%36@$0@@@|@|@|@"])
  fun op BITS_ZEROL x = x
    val op BITS_ZEROL =
    DT(((("bit",45),
        [("arithmetic",[217]),("bit",[43]),
         ("bool",[25,53,56,58,63,105,124])]),["DISK_THM"]),
       [read"%30%5%30%1%44%37$0@%59%70%48%77@@@%75$1@@@@%42%49$1@%36@$0@@$0@@|@|@"])
  fun op BITS_LOG2_ZERO_ID x = x
    val op BITS_LOG2_ZERO_ID =
    DT(((("bit",46),
        [("bit",[9,45]),("bool",[25,51,54,63,105]),("logroot",[8]),
         ("numeral",[3,7])]),["DISK_THM"]),
       [read"%30%16%44%37%36@$0@@%42%49%63$0@@%36@$0@@$0@@|@"])
  fun op BITS_LT_LOW x = x
    val op BITS_LT_LOW =
    DT(((("bit",47),
        [("arithmetic",[24,25,27,41,46,59,71,93,173,180,226]),
         ("bit",[29,40,41]),("bool",[25,30,36,54,56,63,96,101,104,105]),
         ("numeral",[3,5,8])]),["DISK_THM"]),
       [read"%30%5%30%11%30%16%44%37$0@%59%70%48%77@@@$1@@@%42%49$2@$1@$0@@%36@@|@|@|@"])
  fun op BIT_ZERO x = x
    val op BIT_ZERO =
    DT(((("bit",48),
        [("arithmetic",[172]),("bit",[7,42]),
         ("bool",[25,26,27,36,54,63,104,105]),
         ("numeral",[3,8])]),["DISK_THM"]), [read"%30%3%79%46$0@%36@@|@"])
  fun op BIT_B x = x
    val op BIT_B =
    DT(((("bit",49),
        [("arithmetic",[217,233,275]),("bit",[7,21,24,33]),
         ("bool",[25,36,54,56,63]),("numeral",[3,7])]),["DISK_THM"]),
       [read"%30%3%46$0@%59%70%48%77@@@$0@@|@"])
  fun op BIT_B_NEQ x = x
    val op BIT_B_NEQ =
    DT(((("bit",50),
        [("arithmetic",
         [24,25,46,59,71,73,93,101,102,173,177,180,217,218,226,227,275]),
         ("bit",[7,21,24,29,33]),("bool",[25,36,52,54,63,96,101,104,105]),
         ("numeral",[3,6,7,8]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%1%30%3%44%79%42$1@$0@@@%79%46$1@%59%70%48%77@@@$0@@@@|@|@"])
  fun op BITS_COMP_THM2 x = x
    val op BITS_COMP_THM2 =
    DT(((("bit",51),
        [("arithmetic",
         [17,22,24,25,26,27,29,34,37,41,46,59,71,93,130,172,173,177,180,
          196,200,269,295]),("bit",[21,29,34,38,39,40,41,42]),
         ("bool",
         [25,26,27,30,36,43,52,54,56,58,63,64,93,96,101,104,105,129]),
         ("numeral",[3,5,8]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%6%30%12%30%7%30%13%30%16%42%49$2@$1@%49$4@$3@$0@@@%49%65$4@%32$2@$3@@@%32$1@$3@@$0@@|@|@|@|@|@"])
  fun op NOT_MOD2_LEM x = x
    val op NOT_MOD2_LEM =
    DT(((("bit",52),
        [("arithmetic",[349]),("bool",[25,26,27,30,54,56,63,64]),
         ("numeral",[3,6])]),["DISK_THM"]),
       [read"%30%16%39%79%42%66$0@%70%48%77@@@@%36@@@%42%66$0@%70%48%77@@@@%70%47%77@@@@|@"])
  fun op NOT_MOD2_LEM2 x = x
    val op NOT_MOD2_LEM2 =
    DT(((("bit",53),[("bit",[52]),("bool",[25,54,56,58])]),["DISK_THM"]),
       [read"%30%16%39%79%42%66$0@%70%48%77@@@@%70%47%77@@@@@%42%66$0@%70%48%77@@@@%36@@|@"])
  fun op ODD_MOD2_LEM x = x
    val op ODD_MOD2_LEM =
    DT(((("bit",54),
        [("arithmetic",[159,349]),("bool",[25,26,27,30,54,56,63,64]),
         ("numeral",[3,6])]),["DISK_THM"]),
       [read"%30%16%39%71$0@@%42%66$0@%70%48%77@@@@%70%47%77@@@@|@"])
  fun op DIV_MULT_THM x = x
    val op DIV_MULT_THM =
    DT(((("bit",55),
        [("arithmetic",[25,26,85,128,133,146,209]),("bit",[24]),
         ("bool",[25,53,56,58,63,105,124])]),["DISK_THM"]),
       [read"%30%23%30%16%42%31%56$0@%59%70%48%77@@@$1@@@%59%70%48%77@@@$1@@@%34$0@%66$0@%59%70%48%77@@@$1@@@@|@|@"])
  fun op DIV_MULT_THM2 x = x
    val op DIV_MULT_THM2 =
    DT(((("bit",56),[("arithmetic",[73,275]),("bit",[55])]),["DISK_THM"]),
       [read"%30%16%42%31%70%48%77@@@%56$0@%70%48%77@@@@@%34$0@%66$0@%70%48%77@@@@@|@"])
  fun op LESS_EQ_EXP_MULT x = x
    val op LESS_EQ_EXP_MULT =
    DT(((("bit",57),
        [("arithmetic",[53,73,102,145]),
         ("bool",[25,56,63])]),["DISK_THM"]),
       [read"%30%1%30%3%44%38$1@$0@@%45%18%42%59%70%48%77@@@$1@@%31$0@%59%70%48%77@@@$2@@@|@@|@|@"])
  fun op SLICE_THM x = x
    val op SLICE_THM =
    DT(((("bit",58),
        [("arithmetic",
         [0,8,22,23,24,25,26,27,32,42,46,50,59,60,63,64,71,73,76,85,93,99,
          101,102,117,128,130,133,145,146,155,173,176,180,193,209,212,226,
          230,234,255]),("bit",[0,1,5,8,24,27,28,30,55]),
         ("bool",
         [25,26,27,30,36,47,48,51,52,53,54,56,58,63,64,93,96,104,105,107,
          124]),("numeral",[3,8]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%30%16%30%5%30%11%42%74$1@$0@$2@@%31%49$1@$0@$2@@%59%70%48%77@@@$0@@@|@|@|@"])
  fun op SLICELT_THM x = x
    val op SLICELT_THM =
    DT(((("bit",59),
        [("arithmetic",[24,25,26,27,41,46,59,71,93,173,180,200]),
         ("bit",[0,8,24,27]),("bool",[25,36,51,54,58,63,96,101,104,105]),
         ("numeral",[3,8])]),["DISK_THM"]),
       [read"%30%5%30%11%30%16%37%74$2@$1@$0@@%59%70%48%77@@@%75$2@@@|@|@|@"])
  fun op BITS_SLICE_THM x = x
    val op BITS_SLICE_THM =
    DT(((("bit",60),
        [("arithmetic",[227]),("bit",[24,40,58,59]),
         ("bool",[25,56,63])]),["DISK_THM"]),
       [read"%30%5%30%11%30%16%42%49$2@$1@%74$2@$1@$0@@@%49$2@$1@$0@@|@|@|@"])
  fun op BITS_SLICE_THM2 x = x
    val op BITS_SLICE_THM2 =
    DT(((("bit",61),
        [("arithmetic",
         [24,25,27,46,71,93,155,172,173,176,180,198,217,227,269]),
         ("bit",[24,30,33,34,58]),
         ("bool",[25,36,43,52,54,56,58,63,96,101,104,105]),
         ("numeral",[3,8])]),["DISK_THM"]),
       [read"%30%5%30%7%30%11%30%16%44%38$3@$2@@%42%49$2@$1@%74$3@$1@$0@@@%49$3@$1@$0@@@|@|@|@|@"])
  fun op SLICE_ZERO_THM x = x
    val op SLICE_ZERO_THM =
    DT(((("bit",62),[("arithmetic",[8,70]),("bit",[58])]),["DISK_THM"]),
       [read"%30%16%30%5%42%74$0@%36@$1@@%49$0@%36@$1@@|@|@"])
  fun op MOD_2EXP_MONO x = x
    val op MOD_2EXP_MONO =
    DT(((("bit",63),
        [("arithmetic",
         [22,24,25,26,27,46,50,59,60,71,73,76,85,93,99,102,117,128,130,133,
          146,173,176,180,181,193,209,234]),("bit",[24,55]),
         ("bool",
         [25,26,27,30,36,47,48,51,52,53,54,56,58,63,64,93,96,104,105,107,
          124]),("numeral",[3,8]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%30%16%30%5%30%11%44%38$0@$1@@%38%66$2@%59%70%48%77@@@$0@@@%66$2@%59%70%48%77@@@%75$1@@@@@|@|@|@"])
  fun op SLICE_COMP_THM x = x
    val op SLICE_COMP_THM =
    DT(((("bit",64),
        [("arithmetic",[77,129]),("bit",[0,8,63]),
         ("bool",[25,53,56,58,63,105,124])]),["DISK_THM"]),
       [read"%30%5%30%14%30%11%30%16%44%35%38%75$2@@$3@@%38$1@$2@@@%42%32%74$3@%75$2@@$0@@%74$2@$1@$0@@@%74$3@$1@$0@@@|@|@|@|@"])
  fun op SLICE_COMP_RWT x = x
    val op SLICE_COMP_RWT =
    DT(((("bit",65),
        [("arithmetic",[24,25,41,46,64,71,93,172,173,176,180]),
         ("bit",[64]),
         ("bool",[25,36,43,51,53,54,56,58,63,96,101,104,105,124]),
         ("numeral",[3,8])]),["DISK_THM"]),
       [read"%30%5%30%15%30%14%30%11%30%16%44%35%38$1@$2@@%35%42$3@%32$2@%70%47%77@@@@@%37$2@$4@@@@%42%32%74$4@$3@$0@@%74$2@$1@$0@@@%74$4@$1@$0@@@|@|@|@|@|@"])
  fun op SLICE_ZERO x = x
    val op SLICE_ZERO =
    DT(((("bit",66),
        [("arithmetic",[67,73]),("bit",[41,58]),
         ("bool",[25,53,56,58,63,105,124])]),["DISK_THM"]),
       [read"%30%5%30%11%30%16%44%37$2@$1@@%42%74$2@$1@$0@@%36@@|@|@|@"])
  fun op SLICE_ZERO2 x = x
    val op SLICE_ZERO2 =
    DT(((("bit",67),
        [("arithmetic",[67,73]),("bit",[42,58])]),["DISK_THM"]),
       [read"%30%11%30%5%42%74$0@$1@%36@@%36@|@|@"])
  fun op BITS_SUM x = x
    val op BITS_SUM =
    DT(((("bit",68),
        [("arithmetic",[216,227]),("bit",[24,33]),
         ("bool",[25,53,56,58,63,105,124])]),["DISK_THM"]),
       [read"%30%5%30%11%30%1%30%3%44%37$0@%59%70%48%77@@@$2@@@%42%49$3@$2@%32%31$1@%59%70%48%77@@@$2@@@$0@@@%49$3@$2@%31$1@%59%70%48%77@@@$2@@@@@|@|@|@|@"])
  fun op BITS_SUM2 x = x
    val op BITS_SUM2 =
    DT(((("bit",69),
        [("arithmetic",[222]),("bit",[24,36]),
         ("bool",[25,56,63])]),["DISK_THM"]),
       [read"%30%5%30%11%30%1%30%3%42%49$3@$2@%32%31$1@%59%70%48%77@@@%75$3@@@@$0@@@%49$3@$2@$0@@|@|@|@|@"])
  fun op SLICE_COMP_THM2 x = x
    val op SLICE_COMP_THM2 =
    DT(((("bit",70),
        [("arithmetic",
         [0,24,25,26,27,41,46,59,71,73,76,93,102,172,173,176,177,180,227,
          234,269,295]),("bit",[24,33,51,58,66]),
         ("bool",
         [25,26,27,30,36,43,51,52,53,54,56,58,63,64,93,96,101,104,105,124,
          129]),("numeral",[3,8]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%5%30%11%30%23%30%25%30%16%44%35%38$4@$2@@%38$1@$3@@@%42%74$4@$3@%74$2@$1@$0@@@%74$4@$3@$0@@@|@|@|@|@|@"])
  fun op BITS_SUM3 x = x
    val op BITS_SUM3 =
    DT(((("bit",71),
        [("arithmetic",[224]),("bit",[24,43]),
         ("bool",[25,56,63])]),["DISK_THM"]),
       [read"%30%5%30%1%30%3%42%49$2@%36@%32%49$2@%36@$1@@%49$2@%36@$0@@@@%49$2@%36@%32$1@$0@@@|@|@|@"])
  fun op BITS_MUL x = x
    val op BITS_MUL =
    DT(((("bit",72),
        [("arithmetic",[245]),("bit",[24,43]),
         ("bool",[25,56,63])]),["DISK_THM"]),
       [read"%30%5%30%1%30%3%42%49$2@%36@%31%49$2@%36@$1@@%49$2@%36@$0@@@@%49$2@%36@%31$1@$0@@@|@|@|@"])
  fun op BIT_COMP_THM3 x = x
    val op BIT_COMP_THM3 =
    DT(((("bit",73),
        [("arithmetic",
         [24,25,26,41,46,59,71,73,76,93,96,102,128,145,173,176,180,227,
          228]),("bit",[24,58,64]),
         ("bool",[25,36,53,54,56,58,63,96,101,104,105,124]),
         ("numeral",[3,8])]),["DISK_THM"]),
       [read"%30%5%30%14%30%11%30%16%44%35%38%75$2@@$3@@%38$1@$2@@@%42%32%31%49$3@%75$2@@$0@@%59%70%48%77@@@%34%75$2@@$1@@@@%49$2@$1@$0@@@%49$3@$1@$0@@@|@|@|@|@"])
  fun op NOT_BIT x = x
    val op NOT_BIT =
    DT(((("bit",74),
        [("arithmetic",[275]),("bit",[7,21,33,52]),
         ("bool",[25,54,56,58])]),["DISK_THM"]),
       [read"%30%16%30%1%39%79%46$1@$0@@@%42%49$1@$1@$0@@%36@@|@|@"])
  fun op NOT_BITS x = x
    val op NOT_BITS =
    DT(((("bit",75),[("bit",[7,74]),("bool",[25,54,56,58])]),["DISK_THM"]),
       [read"%30%16%30%1%39%79%42%49$1@$1@$0@@%36@@@%42%49$1@$1@$0@@%70%47%77@@@@|@|@"])
  fun op NOT_BITS2 x = x
    val op NOT_BITS2 =
    DT(((("bit",76),[("bit",[75]),("bool",[25,54,56,58])]),["DISK_THM"]),
       [read"%30%16%30%1%39%79%42%49$1@$1@$0@@%70%47%77@@@@@%42%49$1@$1@$0@@%36@@|@|@"])
  fun op BIT_SLICE x = x
    val op BIT_SLICE =
    DT(((("bit",77),
        [("arithmetic",[29,67,70,71,73,289]),("bit",[7,24,58,76]),
         ("bool",[25,26,27,30,52,53,54,56,58,63,105,124]),
         ("numeral",[3,6])]),["DISK_THM"]),
       [read"%30%16%30%1%30%3%39%39%46$2@$1@@%46$2@$0@@@%42%74$2@$2@$1@@%74$2@$2@$0@@@|@|@|@"])
  fun op BIT_SLICE_LEM x = x
    val op BIT_SLICE_LEM =
    DT(((("bit",78),
        [("arithmetic",[70,73,76,102,148,273]),("bit",[4,7,58,75]),
         ("bool",[25,26,27,30,51,52,54,56,58,63,64,105,129]),
         ("numeral",[3,6])]),["DISK_THM"]),
       [read"%30%25%30%23%30%16%42%72%46$1@$0@@%32$1@$2@@@%31%74$1@$1@$0@@%59%70%48%77@@@$2@@@|@|@|@"])
  fun op BIT_SLICE_THM x = x
    val op BIT_SLICE_THM =
    DT(((("bit",79),
        [("arithmetic",[8,22,69,73]),("bit",[78])]),["DISK_THM"]),
       [read"%30%23%30%16%42%72%46$1@$0@@$1@@%74$1@$1@$0@@|@|@"])
  fun op BIT_SLICE_THM2 x = x
    val op BIT_SLICE_THM2 =
    DT(((("bit",80),
        [("bit",[4,26,79]),
         ("bool",[25,26,27,30,54,56,58,63,64])]),["DISK_THM"]),
       [read"%30%3%30%16%39%46$1@$0@@%42%74$1@$1@$0@@%59%70%48%77@@@$1@@@|@|@"])
  fun op BIT_SLICE_THM3 x = x
    val op BIT_SLICE_THM3 =
    DT(((("bit",81),
        [("bit",[4,26,79]),
         ("bool",[25,26,27,30,54,56,58,63,64])]),["DISK_THM"]),
       [read"%30%3%30%16%39%79%46$1@$0@@@%42%74$1@$1@$0@@%36@@|@|@"])
  fun op BIT_SLICE_THM4 x = x
    val op BIT_SLICE_THM4 =
    DT(((("bit",82),
        [("arithmetic",
         [24,25,26,41,46,59,60,71,73,76,93,101,102,155,172,173,176,177,180,
          217,218,226,227,275]),("bit",[7,21,24,30,33,53,58,59,70,80]),
         ("bool",[25,26,27,30,36,51,52,53,54,56,58,63,83,96,101,104,105]),
         ("numeral",[3,7,8]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%30%3%30%5%30%11%30%16%39%46$3@%74$2@$1@$0@@@%35%38$1@$3@@%35%38$3@$2@@%46$3@$0@@@@|@|@|@|@"])
  fun op SBIT_DIV x = x
    val op SBIT_DIV =
    DT(((("bit",83),
        [("arithmetic",[25,69,73,76,96,102,128,145,220,227]),
         ("bit",[4,24]),
         ("bool",
         [25,26,27,30,36,53,56,58,63,64,105,124,147])]),["DISK_THM"]),
       [read"%26%2%30%14%30%16%44%37$0@$1@@%42%72$2@%34$1@$0@@@%56%72$2@$1@@%59%70%48%77@@@$0@@@@|@|@|@"])
  fun op BITS_SUC x = x
    val op BITS_SUC =
    DT(((("bit",84),
        [("arithmetic",
         [8,22,24,25,27,38,45,46,59,71,73,76,93,95,96,102,112,128,130,145,
          173,176,177,180,227]),("bit",[4,7,24,41,58,73,76,79,83]),
         ("bool",
         [25,26,27,30,36,51,52,53,54,56,58,63,64,96,101,104,105,124,129]),
         ("numeral",[3,5,8]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%5%30%11%30%16%44%38$1@%75$2@@@%42%32%72%46%75$2@@$0@@%34%75$2@@$1@@@%49$2@$1@$0@@@%49%75$2@@$1@$0@@@|@|@|@"])
  fun op BITS_SUC_THM x = x
    val op BITS_SUC_THM =
    DT(((("bit",85),
        [("arithmetic",[25,27,46,59,71,93,173,176,180]),("bit",[41,84]),
         ("bool",[25,26,27,30,36,54,56,58,63,64,96,101,104,105,129]),
         ("numeral",[3,5,8])]),["DISK_THM"]),
       [read"%30%5%30%11%30%16%42%49%75$2@@$1@$0@@%55%37%75$2@@$1@@%36@%32%72%46%75$2@@$0@@%34%75$2@@$1@@@%49$2@$1@$0@@@@|@|@|@"])
  fun op BIT_BITS_THM x = x
    val op BIT_BITS_THM =
    DT(((("bit",86),
        [("arithmetic",
         [8,22,24,25,27,38,46,59,69,71,73,77,93,95,147,172,173,176,177,
          180]),("bit",[7,38,41,58,77,85]),
         ("bool",
         [14,25,26,27,30,36,43,51,52,53,54,56,58,63,64,96,101,104,105,124,
          145,147]),("num",[9]),("numeral",[3,5,8]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%5%30%11%30%1%30%3%39%30%23%44%35%38$3@$0@@%38$0@$4@@@%39%46$0@$2@@%46$0@$1@@@|@@%42%49$3@$2@$1@@%49$3@$2@$0@@@|@|@|@|@"])
  fun op BITS_ZERO5 x = x
    val op BITS_ZERO5 =
    DT(((("bit",87),
        [("arithmetic",[46,71,93,173,176,180]),("bit",[42,48,86]),
         ("bool",[25,26,27,36,51,53,54,58,63,104,105,124]),
         ("numeral",[3,8])]),["DISK_THM"]),
       [read"%30%16%30%14%44%30%8%44%38$0@$2@@%79%46$0@$1@@@|@@%42%49$1@%36@$0@@%36@@|@|@"])
  fun op BIT0_ODD x = x
    val op BIT0_ODD =
    DT(((("bit",88),
        [("arithmetic",[8,232]),("bit",[7,36,54]),
         ("bool",[8,14,25,26,27,36,56,60,64]),
         ("numeral",[3,5,17,21,34,35,40,41])]),["DISK_THM"]),
       [read"%40%46%36@@%71@"])
  fun op BITV_THM x = x
    val op BITV_THM =
    DT(((("bit",89),
        [("bit",[4,6,7,76]),("bool",[25,26,27,30,56,58,63,64,105,129]),
         ("numeral",[33])]),["DISK_THM"]),
       [read"%30%3%30%16%42%50$0@$1@@%72%46$1@$0@@%36@@|@|@"])
  fun op ADD_BIT0 x = x
    val op ADD_BIT0 =
    DT(((("bit",90),
        [("arithmetic",[164]),("bit",[88]),("bool",[58])]),["DISK_THM"]),
       [read"%30%14%30%16%39%46%36@%32$1@$0@@@%79%39%46%36@$1@@%46%36@$0@@@@|@|@"])
  fun op ADD_BITS_SUC x = x
    val op ADD_BITS_SUC =
    DT(((("bit",91),
        [("arithmetic",
         [22,24,25,26,27,62,71,74,112,173,177,180,209,217,224,225,228,232,
          233,237,238,275]),("bit",[21,24,33,43,53]),
         ("bool",[25,30,36,51,52,53,54,56,58,63,104,105,124,169]),
         ("numeral",[3,5,7,8,33])]),["DISK_THM"]),
       [read"%30%16%30%1%30%3%42%49%75$2@@%75$2@@%32$1@$0@@@%66%32%32%49%75$2@@%75$2@@$1@@%49%75$2@@%75$2@@$0@@@%49%75$2@@%75$2@@%32%49$2@%36@$1@@%49$2@%36@$0@@@@@%70%48%77@@@@|@|@|@"])
  fun op ADD_BIT_SUC x = x
    val op ADD_BIT_SUC =
    DT(((("bit",92),
        [("arithmetic",[22,25,215,217,233]),("bit",[7,76,91]),
         ("bool",[8,14,25,26,27,30,51,54,56,58,63,64,105,129,169]),
         ("numeral",[0,3,5,6,7,17,21,34,35,40,41])]),["DISK_THM"]),
       [read"%30%16%30%1%30%3%39%46%75$2@@%32$1@$0@@@%54%46%75$2@@%32%49$2@%36@$1@@%49$2@%36@$0@@@@%39%46%75$2@@$1@@%46%75$2@@$0@@@%79%39%46%75$2@@$1@@%46%75$2@@$0@@@@@|@|@|@"])
  fun op BITWISE_LT_2EXP x = x
    val op BITWISE_LT_2EXP =
    DT(((("bit",93),
        [("arithmetic",[8,22,86,122,134]),("bit",[4,12]),
         ("bool",[14,25,26,27,30,63,64]),("num",[9]),
         ("numeral",[3,7])]),["DISK_THM"]),
       [read"%30%16%27%17%30%1%30%3%37%51$3@$2@$1@$0@@%59%70%48%77@@@$3@@|@|@|@|@"])
  fun op BITWISE_THM x = x
    val op BITWISE_THM =
    DT(((("bit",94),
        [("arithmetic",
         [8,22,24,25,26,27,41,46,59,64,71,73,76,93,101,102,172,173,177,180,
          217,222,226,228,275]),("bit",[4,7,12,21,22,24,33,74,93]),
         ("bool",
         [14,25,26,27,30,36,43,52,53,54,56,58,63,64,93,96,101,104,105,
          107]),("num",[9]),("numeral",[3,7,8]),("prim_rec",[6]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%23%30%16%27%17%30%1%30%3%44%37$4@$3@@%39%46$4@%51$3@$2@$1@$0@@@$2%46$4@$1@@%46$4@$0@@@@|@|@|@|@|@"])
  fun op BITWISE_COR x = x
    val op BITWISE_COR =
    DT(((("bit",95),
        [("arithmetic",[275]),("bit",[7,21,33,94]),
         ("bool",[25,53,58])]),["DISK_THM"]),
       [read"%30%23%30%16%27%17%30%1%30%3%44%37$4@$3@@%44$2%46$4@$1@@%46$4@$0@@@%42%66%56%51$3@$2@$1@$0@@%59%70%48%77@@@$4@@@%70%48%77@@@@%70%47%77@@@@@|@|@|@|@|@"])
  fun op BITWISE_NOT_COR x = x
    val op BITWISE_NOT_COR =
    DT(((("bit",96),
        [("arithmetic",[275]),("bit",[7,21,33,52,94]),
         ("bool",[25,53,54,58])]),["DISK_THM"]),
       [read"%30%23%30%16%27%17%30%1%30%3%44%37$4@$3@@%44%79$2%46$4@$1@@%46$4@$0@@@@%42%66%56%51$3@$2@$1@$0@@%59%70%48%77@@@$4@@@%70%48%77@@@@%36@@@|@|@|@|@|@"])
  fun op BITWISE_BITS x = x
    val op BITWISE_BITS =
    DT(((("bit",97),
        [("arithmetic",[22,24,25,26,27,41,46,59,71,91,93,173,180,295,308]),
         ("bit",[7,12,51]),
         ("bool",[14,25,26,27,36,52,54,56,58,63,64,93,96,104,105,107,129]),
         ("num",[9]),("numeral",[3,5,8]),("prim_rec",[6]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%21%27%17%30%1%30%3%42%51%75$3@@$2@%49$3@%36@$1@@%49$3@%36@$0@@@%51%75$3@@$2@$1@$0@@|@|@|@|@"])
  fun op NOT_BIT_GT_TWOEXP x = x
    val op NOT_BIT_GT_TWOEXP =
    DT(((("bit",98),
        [("arithmetic",[113,217,226,275]),("bit",[7,33]),
         ("bool",[25,53,54,58,63,105,124]),
         ("numeral",[3,6,7])]),["DISK_THM"]),
       [read"%30%8%30%16%44%37$0@%59%70%48%77@@@$1@@@%79%46$1@$0@@@|@|@"])
  fun op BIT_IMP_GE_TWOEXP x = x
    val op BIT_IMP_GE_TWOEXP =
    DT(((("bit",99),
        [("arithmetic",[60]),("bit",[98]),("bool",[25,53,54,63]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%30%8%30%16%44%46$1@$0@@%38%59%70%48%77@@@$1@@$0@@|@|@"])
  fun op BITWISE_ONE_COMP_LEM x = x
    val op BITWISE_ONE_COMP_LEM =
    DT(((("bit",100),
        [("arithmetic",
         [8,22,24,25,26,27,38,41,46,59,62,69,71,73,74,75,76,93,95,114,122,
          128,172,173,176,177,180,193,195,205,269]),
         ("bit",[4,7,12,34,58,62,64,74,76]),
         ("bool",
         [8,14,25,26,27,30,36,43,51,52,53,54,56,58,63,64,93,96,101,104,105,
          108,109,124,129]),("num",[9]),
         ("numeral",[0,3,5,7,8,9,15,16,17,21,32,33,34,35,40,41]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%16%30%1%30%3%42%51%75$2@@%22%24%79$1@||@$1@$0@@%34%34%59%70%48%77@@@%75$2@@@%70%47%77@@@@%49$2@%36@$1@@@|@|@|@"])
  fun op BIT_COMPLEMENT x = x
    val op BIT_COMPLEMENT =
    DT(((("bit",101),
        [("arithmetic",
         [24,25,26,27,28,41,46,59,62,71,93,155,172,173,177,180,195,200,212,
          269]),("bit",[24,27,30,45,49,50,94,98,100]),
         ("bool",
         [14,25,26,27,30,36,43,51,52,53,54,56,58,63,93,96,100,101,104,105,
          107,124]),("combin",[0,5]),("numeral",[3,5,8,33]),
         ("prim_rec",[6]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%30%16%30%8%30%1%39%46$1@%34%59%70%48%77@@@$2@@%66$0@%59%70%48%77@@@$2@@@@@%78%35%42%66$0@%59%70%48%77@@@$2@@@%36@@%42$1@$2@@@%35%79%42%66$0@%59%70%48%77@@@$2@@@%36@@@%35%37$1@$2@@%79%46$1@%34%66$0@%59%70%48%77@@@$2@@@%70%47%77@@@@@@@@@|@|@|@"])
  fun op BIT_OF_BITS_THM x = x
    val op BIT_OF_BITS_THM =
    DT(((("bit",102),
        [("arithmetic",[26]),("bit",[7,38]),
         ("bool",[25,53,56,58,63,105,124])]),["DISK_THM"]),
       [read"%30%16%30%5%30%11%30%1%44%38%32$1@$3@@$2@@%39%46$3@%49$2@$1@$0@@@%46%32$1@$3@@$0@@@|@|@|@|@"])
  fun op BIT_SHIFT_THM x = x
    val op BIT_SHIFT_THM =
    DT(((("bit",103),
        [("arithmetic",[72,102,227,234,275]),("bit",[0,1,5,7,21,24]),
         ("bool",[25,26,53,54,55,58,63,83]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%30%16%30%1%30%20%39%46%32$2@$0@@%31$1@%59%70%48%77@@@$0@@@@%46$2@$1@@|@|@|@"])
  fun op BIT_SHIFT_THM2 x = x
    val op BIT_SHIFT_THM2 =
    DT(((("bit",104),
        [("arithmetic",[24,25,27,46,71,93,172,173,177,180,269]),
         ("bit",[103]),
         ("bool",[25,36,43,52,53,54,56,58,63,93,96,101,104,105,124]),
         ("numeral",[3,8]),("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%16%30%1%30%20%44%38$0@$2@@%39%46$2@%31$1@%59%70%48%77@@@$0@@@@%46%34$2@$0@@$1@@@|@|@|@"])
  fun op BIT_SHIFT_THM3 x = x
    val op BIT_SHIFT_THM3 =
    DT(((("bit",105),
        [("arithmetic",
         [22,24,25,26,27,41,46,59,71,76,93,102,163,171,172,173,177,180,199,
          241,269,275,350]),("bit",[0,1,5,7,21,24,53]),
         ("bool",[25,36,43,51,52,54,56,58,63,93,96,101,104,105,124]),
         ("numeral",[3,5,8,21]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%16%30%1%30%20%44%37$2@$0@@%79%46$2@%31$1@%59%70%48%77@@@$0@@@@@|@|@|@"])
  fun op BIT_OF_BITS_THM2 x = x
    val op BIT_OF_BITS_THM2 =
    DT(((("bit",106),
        [("arithmetic",[26,88,304]),("bit",[7,41,51]),
         ("bool",[25,26,27,52,53,54,58,63,105,124]),("numeral",[3,6]),
         ("prim_rec",[4])]),["DISK_THM"]),
       [read"%30%5%30%11%30%23%30%16%44%37$3@%32$2@$1@@@%79%46$1@%49$3@$2@$0@@@@|@|@|@|@"])
  fun op BIT_DIV2 x = x
    val op BIT_DIV2 =
    DT(((("bit",107),
        [("arithmetic",[8,112,234]),("bit",[7,24,33]),
         ("bool",[25,51,56,63,105]),("numeral",[3,7])]),["DISK_THM"]),
       [read"%30%16%30%8%39%46$1@%56$0@%70%48%77@@@@@%46%75$1@@$0@@|@|@"])
  fun op BIT_SHIFT_THM4 x = x
    val op BIT_SHIFT_THM4 =
    DT(((("bit",108),
        [("arithmetic",[8,24,232,234]),("bit",[24,107]),
         ("bool",[14,25,51,56,58,63,105]),("num",[9]),
         ("numeral",[3,7,33])]),["DISK_THM"]),
       [read"%30%16%30%8%30%1%39%46$1@%56$0@%59%70%48%77@@@$2@@@@%46%32$1@$2@@$0@@|@|@|@"])
  fun op DIV_LT x = x
    val op DIV_LT =
    DT(((("bit",109),
        [("arithmetic",
         [8,18,28,34,41,46,59,71,76,93,173,180,183,220,232,236]),
         ("bit",[24]),("bool",[25,36,53,54,58,63,96,101,104,105,124]),
         ("numeral",[3,5,8,33]),("prim_rec",[7]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%30%16%30%14%30%1%44%35%37$2@$1@@%37$0@%59%70%48%77@@@$1@@@@%37%56$0@%59%70%48%77@@@$2@@@%59%70%48%77@@@$1@@@|@|@|@"])
  fun op MOD_ZERO_GT x = x
    val op MOD_ZERO_GT =
    DT(((("bit",110),
        [("arithmetic",[60,217]),("bool",[25,27,54,56,63])]),["DISK_THM"]),
       [read"%30%16%30%1%44%35%79%42$0@%36@@@%42%66$0@%59%70%48%77@@@$1@@@%36@@@%38%59%70%48%77@@@$1@@$0@@|@|@"])
  fun op DIV_GT0 x = x
    val op DIV_GT0 =
    DT(((("bit",111),
        [("arithmetic",[22,25,69,251]),
         ("bool",[25,53,58,63,105,124])]),["DISK_THM"]),
       [read"%30%1%30%3%44%35%38$0@$1@@%37%36@$0@@@%37%36@%56$1@$0@@@|@|@"])
  fun op DIV_SUB1 x = x
    val op DIV_SUB1 =
    DT(((("bit",112),
        [("arithmetic",
         [22,24,25,27,32,41,46,59,70,71,93,128,172,173,176,177,180,200,226,
          229,239,269,368]),("bit",[24]),
         ("bool",
         [25,26,27,30,36,43,51,52,54,56,58,63,93,96,101,104,105,107,124]),
         ("numeral",[3,5,7,8]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%1%30%3%44%35%38%59%70%48%77@@@$0@@$1@@%42%66$1@%59%70%48%77@@@$0@@@%36@@@%42%34%56$1@%59%70%48%77@@@$0@@@%70%47%77@@@@%56%34$1@%70%47%77@@@@%59%70%48%77@@@$0@@@@|@|@"])
  fun op BIT_EXP_SUB1 x = x
    val op BIT_EXP_SUB1 =
    DT(((("bit",113),
        [("arithmetic",[28,59,62,130,155]),
         ("bit",[7,30,42,47,48,93,94,100]),
         ("bool",[14,25,26,27,30,36,53,54,56,58,63]),("combin",[0,5]),
         ("numeral",[3,6,33]),("prim_rec",[6]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%30%3%30%16%39%46$1@%34%59%70%48%77@@@$0@@%70%47%77@@@@@%37$1@$0@@|@|@"])
  fun op BIT_SHIFT_THM5 x = x
    val op BIT_SHIFT_THM5 =
    DT(((("bit",114),
        [("arithmetic",
         [22,24,25,27,34,41,46,59,62,71,79,91,93,128,172,173,177,180,217,
          220,226,228,233,237,269,274]),
         ("bit",[24,27,28,101,108,109,110,111,112,113]),
         ("bool",
         [25,26,27,30,36,43,51,52,53,54,56,58,63,64,93,96,101,104,105,
          129]),("numeral",[3,5,6,7,8]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%30%16%30%14%30%8%30%1%44%35%37%32$1@$3@@$2@@%37$0@%59%70%48%77@@@$2@@@@%39%46$1@%34%59%70%48%77@@@$2@@%66%32%56$0@%59%70%48%77@@@$3@@@%55%42%66$0@%59%70%48%77@@@$3@@@%36@@%36@%70%47%77@@@@@%59%70%48%77@@@$2@@@@@%46%32$1@$3@@%34%59%70%48%77@@@$2@@%66$0@%59%70%48%77@@@$2@@@@@@|@|@|@|@"])
  fun op SBIT_MULT x = x
    val op SBIT_MULT =
    DT(((("bit",115),
        [("arithmetic",[67,73,102]),("bit",[4]),
         ("bool",[25,26,27,30,56,58,63,64,105,129,147])]),["DISK_THM"]),
       [read"%26%2%30%14%30%16%42%31%72$2@$0@@%59%70%48%77@@@$1@@@%72$2@%32$0@$1@@@|@|@|@"])
  fun op BITWISE_EVAL x = x
    val op BITWISE_EVAL =
    DT(((("bit",116),
        [("arithmetic",
         [8,22,24,25,26,27,29,41,46,64,65,71,73,75,77,79,91,93,101,147,172,
          173,176,177,180,193,214,217,228,232,269,275]),
         ("bit",[4,12,52,54,56,88,94,95,107,115]),
         ("bool",
         [14,25,26,27,30,36,43,51,52,53,54,56,58,63,64,71,92,93,96,101,104,
          105,124,129,147]),("num",[9]),("numeral",[3,5,6,7,8,33]),
         ("prim_rec",[6,7]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%16%27%17%30%1%30%3%42%51%75$3@@$2@$1@$0@@%32%31%70%48%77@@@%51$3@$2@%56$1@%70%48%77@@@@%56$0@%70%48%77@@@@@@%72$2%71$1@@%71$0@@@%36@@@|@|@|@|@"])
  fun op MOD_PLUS_RIGHT x = x
    val op MOD_PLUS_RIGHT =
    DT(((("bit",117),
        [("arithmetic",[25,27,209,222]),("bool",[25,56])]),["DISK_THM"]),
       [read"%30%16%44%37%36@$0@@%30%9%30%10%42%66%32$1@%66$0@$2@@@$2@@%66%32$1@$0@@$2@@|@|@@|@"])
  fun op MOD_PLUS_LEFT x = x
    val op MOD_PLUS_LEFT =
    DT(((("bit",118),[("arithmetic",[26]),("bit",[117])]),["DISK_THM"]),
       [read"%30%16%44%37%36@$0@@%30%9%30%10%42%66%32%66$0@$2@@$1@@$2@@%66%32$0@$1@@$2@@|@|@@|@"])
  fun op MOD_PLUS_1 x = x
    val op MOD_PLUS_1 =
    DT(((("bit",119),
        [("arithmetic",
         [22,24,25,29,41,46,59,71,93,172,173,176,177,180,209,212,217,224,
          233]),
         ("bool",
         [25,26,27,30,36,47,48,52,53,54,56,58,63,71,73,84,93,94,96,101,104,
          105]),("numeral",[3,5,8]),
         ("sat",[1,3,5,6,7,11,12,13,14,15])]),["DISK_THM"]),
       [read"%30%16%44%37%36@$0@@%30%23%39%42%66%32$0@%70%47%77@@@@$1@@%36@@%42%32%66$0@$1@@%70%47%77@@@@$1@@|@@|@"])
  fun op MOD_ADD_1 x = x
    val op MOD_ADD_1 =
    DT(((("bit",120),
        [("arithmetic",[24,25,27,41,46,59,71,93,173,177,180,209,217,222]),
         ("bit",[119]),("bool",[25,36,52,54,56,58,63,96,101,104,105,124]),
         ("numeral",[3,5,8]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%16%44%37%36@$0@@%30%23%44%79%42%66%32$0@%70%47%77@@@@$1@@%36@@@%42%66%32$0@%70%47%77@@@@$1@@%32%66$0@$1@@%70%47%77@@@@@|@@|@"])
  fun op BIT_REVERSE_THM x = x
    val op BIT_REVERSE_THM =
    DT(((("bit",121),
        [("arithmetic",
         [22,24,25,27,41,46,59,62,65,71,77,93,133,172,173,176,177,180,200,
          217,232,269,275,295,310]),("bit",[4,7,11,33,44,51,68,69]),
         ("bool",
         [14,25,26,27,30,36,43,51,52,53,54,56,58,63,64,93,96,101,104,105,
          108,109,124,129,147]),("num",[9]),
         ("numeral",[0,3,5,7,8,9,32,33]),("prim_rec",[4,6]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%23%30%16%30%1%44%37$2@$1@@%39%46$2@%53$1@$0@@@%46%34%34$1@%70%47%77@@@@$2@@$0@@@|@|@|@"])
  fun op LOG2_LE_MONO x = x
    val op LOG2_LE_MONO =
    DT(((("bit",122),
        [("bit",[9]),("bool",[51,54,58,105,124]),("logroot",[16]),
         ("numeral",[3,7])]),["DISK_THM"]),
       [read"%30%23%30%25%44%37%36@$1@@%44%38$1@$0@@%38%63$1@@%63$0@@@@|@|@"])
  fun op TWOEXP_LE_IMP_LE_LOG2 x = x
    val op TWOEXP_LE_IMP_LE_LOG2 =
    DT(((("bit",123),
        [("bit",[19,24,122]),("bool",[53,58,63,105,124])]),["DISK_THM"]),
       [read"%35%30%23%30%25%44%38%59%70%48%77@@@$1@@$0@@%38$1@%63$0@@@|@|@@%30%25%30%23%44%37%36@$0@@%44%38$0@%59%70%48%77@@@$1@@@%38%63$0@@$1@@@|@|@@"])
  fun op NOT_BIT_GT_LOG2 x = x
    val op NOT_BIT_GT_LOG2 =
    DT(((("bit",124),
        [("arithmetic",[24,25,41,46,59,71,93,172,173,176,177,180]),
         ("bit",[9,24,30,98]),
         ("bool",[25,26,27,30,36,43,51,52,54,58,63,93,96,101,104,105,124]),
         ("logroot",[8]),("numeral",[3,7,8]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%8%30%16%44%37%63$0@@$1@@%79%46$1@$0@@@|@|@"])
  fun op NOT_BIT_GT_BITWISE x = x
    val op NOT_BIT_GT_BITWISE =
    DT(((("bit",125),
        [("arithmetic",[155]),("bit",[30,93,98]),
         ("bool",[25,26,27,53,54,63]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%30%8%30%16%27%17%30%1%30%3%44%38$3@$4@@%79%46$4@%51$3@$2@$1@$0@@@@|@|@|@|@|@"])
  fun op LT_TWOEXP x = x
    val op LT_TWOEXP =
    DT(((("bit",126),
        [("arithmetic",[24,25,28,41,46,59,71,93,154,155,173,176,180,278]),
         ("bit",[9,24,30]),
         ("bool",[25,26,27,36,51,52,53,54,56,58,63,96,101,104,105,124]),
         ("logroot",[8]),("num",[7]),("numeral",[3,5,7,8]),
         ("prim_rec",[7]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18])]),["DISK_THM"]),
       [read"%30%23%30%16%39%37$1@%59%70%48%77@@@$0@@@%78%42$1@%36@@%37%63$1@@$0@@@|@|@"])
  fun op BIT_MODIFY_THM x = x
    val op BIT_MODIFY_THM =
    DT(((("bit",127),
        [("arithmetic",
         [8,22,24,25,26,27,41,46,59,64,71,73,76,86,93,101,102,122,134,172,
          173,177,180,217,222,226,228,275]),
         ("bit",[4,7,13,21,22,24,33,74]),
         ("bool",
         [14,25,26,27,30,36,43,52,53,54,56,58,63,64,93,96,101,104,105,
          107]),("num",[9]),("numeral",[3,7,8]),("prim_rec",[6]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%23%30%16%29%4%30%1%44%37$3@$2@@%39%46$3@%52$2@$1@$0@@@$1$3@%46$3@$0@@@@|@|@|@|@"])
  fun op BIT_SIGN_EXTEND x = x
    val op BIT_SIGN_EXTEND =
    DT(((("bit",128),
        [("arithmetic",
         [8,18,22,24,25,27,28,32,41,46,59,60,62,65,69,71,73,74,76,88,91,93,
          95,99,101,102,130,146,172,173,176,177,180,183,205,215,218,222,
          237,269,274,275,290,304]),
         ("bit",[7,14,24,29,30,34,41,43,44,47,51,55,68,69]),
         ("bool",
         [2,14,15,25,26,27,30,32,36,43,51,52,53,54,56,58,63,64,93,96,101,
          104,105,124,129]),("combin",[19]),("num",[7,9]),
         ("numeral",[3,5,6,7,8,16,33]),("prim_rec",[4]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%30%11%30%5%30%16%30%8%44%79%42$3@%36@@@%39%46$0@%73$3@$2@$1@@@%54%44%38$3@$2@@%37$0@$3@@@%46$0@%66$1@%59%70%48%77@@@$3@@@@%35%37$0@$2@@%46%34$3@%70%47%77@@@@$1@@@@@|@|@|@|@"])
  fun op BIT_LOG2 x = x
    val op BIT_LOG2 =
    DT(((("bit",129),
        [("arithmetic",[46,59,71,93,173,177,180,217,237,275]),
         ("bit",[7,9,21,22,24,33]),
         ("bool",[25,36,52,53,54,55,56,58,63,96,101,104,105,124]),
         ("logroot",[25]),("numeral",[3,7,8]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23])]),["DISK_THM"]),
       [read"%30%16%44%79%42$0@%36@@@%46%63$0@@$0@@|@"])
  fun op EXISTS_BIT_IN_RANGE x = x
    val op EXISTS_BIT_IN_RANGE =
    DT(((("bit",130),
        [("arithmetic",[41,46,59,71,93,172,173,177,180]),
         ("bit",[123,126,129]),
         ("bool",[25,26,27,36,52,54,63,96,101,104,105]),("numeral",[3,8]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%1%30%3%30%16%44%35%79%42$0@%36@@@%35%38%59%70%48%77@@@$2@@$0@@%37$0@%59%70%48%77@@@$1@@@@@%45%8%35%38$3@$0@@%35%37$0@$2@@%46$0@$1@@@|@@|@|@|@"])
  fun op EXISTS_BIT_LT x = x
    val op EXISTS_BIT_LT =
    DT(((("bit",131),
        [("arithmetic",[41,46,71,93,173,176,177,180]),("bit",[130]),
         ("bool",[25,36,51,52,54,58,63,96,101,104,105,124,125]),
         ("numeral",[3,8,33]),
         ("sat",[1,3,5,6,7,11,12,13,15])]),["DISK_THM"]),
       [read"%30%3%30%16%44%35%79%42$0@%36@@@%37$0@%59%70%48%77@@@$1@@@@%45%8%35%37$0@$2@@%46$0@$1@@|@@|@|@"])
  fun op LEAST_THM x = x
    val op LEAST_THM =
    DT(((("bit",132),
        [("arithmetic",[24,25,46,59,71,93,173,177,180]),
         ("bool",[25,26,30,36,47,48,52,53,54,56,63,96,101,104,105]),
         ("combin",[19]),("numeral",[3,8]),
         ("sat",[1,3,5,6,7,11,12,13,14,15]),("while",[8])]),["DISK_THM"]),
       [read"%30%16%28%0%44%35%30%14%44%37$0@$2@@%79$1$0@@@|@@$0$1@@@%42%60$0@@$1@@|@|@"])
  end
  val _ = DB.bindl "bit"
  [("MOD_2EXP_def",MOD_2EXP_def,DB.Def),
   ("DIV_2EXP_def",DIV_2EXP_def,DB.Def),
   ("TIMES_2EXP_def",TIMES_2EXP_def,DB.Def),
   ("DIVMOD_2EXP_def",DIVMOD_2EXP_def,DB.Def),
   ("SBIT_def",SBIT_def,DB.Def), ("BITS_def",BITS_def,DB.Def),
   ("BITV_def",BITV_def,DB.Def), ("BIT_def",BIT_def,DB.Def),
   ("SLICE_def",SLICE_def,DB.Def), ("LOG2_def",LOG2_def,DB.Def),
   ("LOWEST_SET_BIT_def",LOWEST_SET_BIT_def,DB.Def),
   ("BIT_REVERSE_def",BIT_REVERSE_def,DB.Def),
   ("BITWISE_def",BITWISE_def,DB.Def),
   ("BIT_MODIFY_def",BIT_MODIFY_def,DB.Def),
   ("SIGN_EXTEND_def",SIGN_EXTEND_def,DB.Def),
   ("MOD_2EXP_EQ_def",MOD_2EXP_EQ_def,DB.Def),
   ("MOD_2EXP_MAX_def",MOD_2EXP_MAX_def,DB.Def),
   ("LESS_MULT_MONO2",LESS_MULT_MONO2,DB.Thm),
   ("LOG2_UNIQUE",LOG2_UNIQUE,DB.Thm), ("LOG2_TWOEXP",LOG2_TWOEXP,DB.Thm),
   ("DIVMOD_2EXP",DIVMOD_2EXP,DB.Thm), ("SUC_SUB",SUC_SUB,DB.Thm),
   ("DIV_MULT_1",DIV_MULT_1,DB.Thm),
   ("NOT_ZERO_ADD1",NOT_ZERO_ADD1,DB.Thm),
   ("ZERO_LT_TWOEXP",ZERO_LT_TWOEXP,DB.Thm),
   ("ONE_LE_TWOEXP",ONE_LE_TWOEXP,DB.Thm),
   ("TWOEXP_NOT_ZERO",TWOEXP_NOT_ZERO,DB.Thm),
   ("MOD_2EXP_LT",MOD_2EXP_LT,DB.Thm),
   ("TWOEXP_DIVISION",TWOEXP_DIVISION,DB.Thm),
   ("TWOEXP_MONO",TWOEXP_MONO,DB.Thm),
   ("TWOEXP_MONO2",TWOEXP_MONO2,DB.Thm),
   ("EXP_SUB_LESS_EQ",EXP_SUB_LESS_EQ,DB.Thm), ("MOD_LEQ",MOD_LEQ,DB.Thm),
   ("BITS_THM",BITS_THM,DB.Thm), ("BITSLT_THM",BITSLT_THM,DB.Thm),
   ("BITSLT_THM2",BITSLT_THM2,DB.Thm), ("BITS_THM2",BITS_THM2,DB.Thm),
   ("BITS_LEQ",BITS_LEQ,DB.Thm), ("BITS_COMP_THM",BITS_COMP_THM,DB.Thm),
   ("BITS_DIV_THM",BITS_DIV_THM,DB.Thm),
   ("BITS_LT_HIGH",BITS_LT_HIGH,DB.Thm), ("BITS_ZERO",BITS_ZERO,DB.Thm),
   ("BITS_ZERO2",BITS_ZERO2,DB.Thm), ("BITS_ZERO3",BITS_ZERO3,DB.Thm),
   ("BITS_ZERO4",BITS_ZERO4,DB.Thm), ("BITS_ZEROL",BITS_ZEROL,DB.Thm),
   ("BITS_LOG2_ZERO_ID",BITS_LOG2_ZERO_ID,DB.Thm),
   ("BITS_LT_LOW",BITS_LT_LOW,DB.Thm), ("BIT_ZERO",BIT_ZERO,DB.Thm),
   ("BIT_B",BIT_B,DB.Thm), ("BIT_B_NEQ",BIT_B_NEQ,DB.Thm),
   ("BITS_COMP_THM2",BITS_COMP_THM2,DB.Thm),
   ("NOT_MOD2_LEM",NOT_MOD2_LEM,DB.Thm),
   ("NOT_MOD2_LEM2",NOT_MOD2_LEM2,DB.Thm),
   ("ODD_MOD2_LEM",ODD_MOD2_LEM,DB.Thm),
   ("DIV_MULT_THM",DIV_MULT_THM,DB.Thm),
   ("DIV_MULT_THM2",DIV_MULT_THM2,DB.Thm),
   ("LESS_EQ_EXP_MULT",LESS_EQ_EXP_MULT,DB.Thm),
   ("SLICE_THM",SLICE_THM,DB.Thm), ("SLICELT_THM",SLICELT_THM,DB.Thm),
   ("BITS_SLICE_THM",BITS_SLICE_THM,DB.Thm),
   ("BITS_SLICE_THM2",BITS_SLICE_THM2,DB.Thm),
   ("SLICE_ZERO_THM",SLICE_ZERO_THM,DB.Thm),
   ("MOD_2EXP_MONO",MOD_2EXP_MONO,DB.Thm),
   ("SLICE_COMP_THM",SLICE_COMP_THM,DB.Thm),
   ("SLICE_COMP_RWT",SLICE_COMP_RWT,DB.Thm),
   ("SLICE_ZERO",SLICE_ZERO,DB.Thm), ("SLICE_ZERO2",SLICE_ZERO2,DB.Thm),
   ("BITS_SUM",BITS_SUM,DB.Thm), ("BITS_SUM2",BITS_SUM2,DB.Thm),
   ("SLICE_COMP_THM2",SLICE_COMP_THM2,DB.Thm),
   ("BITS_SUM3",BITS_SUM3,DB.Thm), ("BITS_MUL",BITS_MUL,DB.Thm),
   ("BIT_COMP_THM3",BIT_COMP_THM3,DB.Thm), ("NOT_BIT",NOT_BIT,DB.Thm),
   ("NOT_BITS",NOT_BITS,DB.Thm), ("NOT_BITS2",NOT_BITS2,DB.Thm),
   ("BIT_SLICE",BIT_SLICE,DB.Thm), ("BIT_SLICE_LEM",BIT_SLICE_LEM,DB.Thm),
   ("BIT_SLICE_THM",BIT_SLICE_THM,DB.Thm),
   ("BIT_SLICE_THM2",BIT_SLICE_THM2,DB.Thm),
   ("BIT_SLICE_THM3",BIT_SLICE_THM3,DB.Thm),
   ("BIT_SLICE_THM4",BIT_SLICE_THM4,DB.Thm), ("SBIT_DIV",SBIT_DIV,DB.Thm),
   ("BITS_SUC",BITS_SUC,DB.Thm), ("BITS_SUC_THM",BITS_SUC_THM,DB.Thm),
   ("BIT_BITS_THM",BIT_BITS_THM,DB.Thm), ("BITS_ZERO5",BITS_ZERO5,DB.Thm),
   ("BIT0_ODD",BIT0_ODD,DB.Thm), ("BITV_THM",BITV_THM,DB.Thm),
   ("ADD_BIT0",ADD_BIT0,DB.Thm), ("ADD_BITS_SUC",ADD_BITS_SUC,DB.Thm),
   ("ADD_BIT_SUC",ADD_BIT_SUC,DB.Thm),
   ("BITWISE_LT_2EXP",BITWISE_LT_2EXP,DB.Thm),
   ("BITWISE_THM",BITWISE_THM,DB.Thm), ("BITWISE_COR",BITWISE_COR,DB.Thm),
   ("BITWISE_NOT_COR",BITWISE_NOT_COR,DB.Thm),
   ("BITWISE_BITS",BITWISE_BITS,DB.Thm),
   ("NOT_BIT_GT_TWOEXP",NOT_BIT_GT_TWOEXP,DB.Thm),
   ("BIT_IMP_GE_TWOEXP",BIT_IMP_GE_TWOEXP,DB.Thm),
   ("BITWISE_ONE_COMP_LEM",BITWISE_ONE_COMP_LEM,DB.Thm),
   ("BIT_COMPLEMENT",BIT_COMPLEMENT,DB.Thm),
   ("BIT_OF_BITS_THM",BIT_OF_BITS_THM,DB.Thm),
   ("BIT_SHIFT_THM",BIT_SHIFT_THM,DB.Thm),
   ("BIT_SHIFT_THM2",BIT_SHIFT_THM2,DB.Thm),
   ("BIT_SHIFT_THM3",BIT_SHIFT_THM3,DB.Thm),
   ("BIT_OF_BITS_THM2",BIT_OF_BITS_THM2,DB.Thm),
   ("BIT_DIV2",BIT_DIV2,DB.Thm), ("BIT_SHIFT_THM4",BIT_SHIFT_THM4,DB.Thm),
   ("DIV_LT",DIV_LT,DB.Thm), ("MOD_ZERO_GT",MOD_ZERO_GT,DB.Thm),
   ("DIV_GT0",DIV_GT0,DB.Thm), ("DIV_SUB1",DIV_SUB1,DB.Thm),
   ("BIT_EXP_SUB1",BIT_EXP_SUB1,DB.Thm),
   ("BIT_SHIFT_THM5",BIT_SHIFT_THM5,DB.Thm),
   ("SBIT_MULT",SBIT_MULT,DB.Thm), ("BITWISE_EVAL",BITWISE_EVAL,DB.Thm),
   ("MOD_PLUS_RIGHT",MOD_PLUS_RIGHT,DB.Thm),
   ("MOD_PLUS_LEFT",MOD_PLUS_LEFT,DB.Thm),
   ("MOD_PLUS_1",MOD_PLUS_1,DB.Thm), ("MOD_ADD_1",MOD_ADD_1,DB.Thm),
   ("BIT_REVERSE_THM",BIT_REVERSE_THM,DB.Thm),
   ("LOG2_LE_MONO",LOG2_LE_MONO,DB.Thm),
   ("TWOEXP_LE_IMP_LE_LOG2",TWOEXP_LE_IMP_LE_LOG2,DB.Thm),
   ("NOT_BIT_GT_LOG2",NOT_BIT_GT_LOG2,DB.Thm),
   ("NOT_BIT_GT_BITWISE",NOT_BIT_GT_BITWISE,DB.Thm),
   ("LT_TWOEXP",LT_TWOEXP,DB.Thm),
   ("BIT_MODIFY_THM",BIT_MODIFY_THM,DB.Thm),
   ("BIT_SIGN_EXTEND",BIT_SIGN_EXTEND,DB.Thm),
   ("BIT_LOG2",BIT_LOG2,DB.Thm),
   ("EXISTS_BIT_IN_RANGE",EXISTS_BIT_IN_RANGE,DB.Thm),
   ("EXISTS_BIT_LT",EXISTS_BIT_LT,DB.Thm), ("LEAST_THM",LEAST_THM,DB.Thm)]

  local open Portable GrammarSpecials Parse
    fun UTOFF f = Feedback.trace("Parse.unicode_trace_off_complaints",0)f
  in
  val _ = mk_local_grms [("logrootTheory.logroot_grammars",
                          logrootTheory.logroot_grammars)]
  val _ = List.app (update_grms reveal) []
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("MOD_2EXP", (Term.prim_mk_const { Name = "MOD_2EXP", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("MOD_2EXP", (Term.prim_mk_const { Name = "MOD_2EXP", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("DIV_2EXP", (Term.prim_mk_const { Name = "DIV_2EXP", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("DIV_2EXP", (Term.prim_mk_const { Name = "DIV_2EXP", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("TIMES_2EXP", (Term.prim_mk_const { Name = "TIMES_2EXP", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("TIMES_2EXP", (Term.prim_mk_const { Name = "TIMES_2EXP", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("DIVMOD_2EXP", (Term.prim_mk_const { Name = "DIVMOD_2EXP", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("DIVMOD_2EXP", (Term.prim_mk_const { Name = "DIVMOD_2EXP", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("SBIT", (Term.prim_mk_const { Name = "SBIT", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("SBIT", (Term.prim_mk_const { Name = "SBIT", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BITS", (Term.prim_mk_const { Name = "BITS", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BITS", (Term.prim_mk_const { Name = "BITS", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BITV", (Term.prim_mk_const { Name = "BITV", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BITV", (Term.prim_mk_const { Name = "BITV", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BIT", (Term.prim_mk_const { Name = "BIT", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BIT", (Term.prim_mk_const { Name = "BIT", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("SLICE", (Term.prim_mk_const { Name = "SLICE", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("SLICE", (Term.prim_mk_const { Name = "SLICE", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("LOG2", (Term.prim_mk_const { Name = "LOG2", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("LOG2", (Term.prim_mk_const { Name = "LOG2", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("LOWEST_SET_BIT", (Term.prim_mk_const { Name = "LOWEST_SET_BIT", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("LOWEST_SET_BIT", (Term.prim_mk_const { Name = "LOWEST_SET_BIT", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BIT_REVERSE", (Term.prim_mk_const { Name = "BIT_REVERSE", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BITWISE", (Term.prim_mk_const { Name = "BITWISE", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("BIT_MODIFY", (Term.prim_mk_const { Name = "BIT_MODIFY", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("SIGN_EXTEND", (Term.prim_mk_const { Name = "SIGN_EXTEND", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("SIGN_EXTEND", (Term.prim_mk_const { Name = "SIGN_EXTEND", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("MOD_2EXP_EQ", (Term.prim_mk_const { Name = "MOD_2EXP_EQ", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("MOD_2EXP_EQ", (Term.prim_mk_const { Name = "MOD_2EXP_EQ", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("MOD_2EXP_MAX", (Term.prim_mk_const { Name = "MOD_2EXP_MAX", Thy = "bit"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("MOD_2EXP_MAX", (Term.prim_mk_const { Name = "MOD_2EXP_MAX", Thy = "bit"}))
  val bit_grammars = Parse.current_lgrms()
  end
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "bit",
    thydataty = "simp",
    data = "bit.ZERO_LT_TWOEXP bit.ONE_LE_TWOEXP"
  }

val _ = if !Globals.print_thy_loads then print "done\n" else ()
val _ = Theory.load_complete "bit"
end
