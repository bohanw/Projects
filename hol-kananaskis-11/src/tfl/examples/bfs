(*===========================================================================*)
(* Unfold and it application to breadth-first search. Prompted by reading    *)
(* "The Underappreciated Unfold", by Gibbons and Jones, ICFP 1998.           *)
(*                                                                           *)
(* Konrad Slind and Scott Owens,                                             *)
(* School of Computing, University of Utah                                   *)
(* October 20, 2004                                                          *)
(*===========================================================================*)

quietdec := true; open listTheory; quietdec := false;

(*---------------------------------------------------------------------------*)
(* Syntax fiddling so that some identifiers in the HOL theory of lists,      *)
(* which are upper-case, are spelt the same as their ML counterparts.        *)
(*---------------------------------------------------------------------------*)

val _ = 
  let open listSyntax
  in map overload_on [("null",  null_tm),   ("map", map_tm),
                      ("filter",filter_tm), ("flat",flat_tm)]
  end;

(*---------------------------------------------------------------------------*)
(* Trivial lemmas, should be in listTheory already                           *)
(*---------------------------------------------------------------------------*)

val NULL_ELIM = Q.prove
(`!l. null l = (l=[])`, Cases THEN RW_TAC list_ss []);

val FLAT_CONS_APPEND = Q.prove
(`!L1 L2. flat (L1 :: L2) = L1 ++ flat L2`,
 Induct THEN RW_TAC list_ss []);

val FLAT_APPEND_DISTRIB = Q.prove
(`!L1 L2. flat (L1 ++ L2) = flat L1 ++ flat L2`,
 Induct THEN RW_TAC list_ss []);

(*---------------------------------------------------------------------------*)
(* The underappreciated unfold, defined as a recursion schema.               *)
(*---------------------------------------------------------------------------*)

val unfold_def = 
 TotalDefn.DefineSchema 
   `unfold (x:'a) = if d(x) then [] else f(x)::unfold (g x)`;

(*---------------------------------------------------------------------------*)
(* Join the schema with its induction theorem.                               *)
(*                                                                           *)
(*   |- WF R /\ (!x. ~d x ==> R (g x) x) ==>                                 *)
(*     (unfold d f g x = (if d x then [] else f x::unfold d f g (g x))) /\   *)
(*     !P. (!x. (~d x ==> P (g x)) ==> P x) ==> !v. P v                      *)
(*---------------------------------------------------------------------------*)

val unfold_facts = REWRITE_RULE [AND_IMP_INTRO] 
                     (DISCH_ALL (CONJ (SPEC_ALL unfold_def) 
                                      (fetch "-" "unfold_ind")));

(*---------------------------------------------------------------------------*)
(* Type of n-ary tree to be searched. In ML the type would be defined        *)
(*                                                                           *)
(*  datatype 'a tree = Node of 'a * 'a tree list                             *)
(*                                                                           *)
(*---------------------------------------------------------------------------*)

Hol_datatype `tree = Node of 'a => tree list`;

(*---------------------------------------------------------------------------*)
(* Destructors for trees                                                     *)
(*---------------------------------------------------------------------------*)

val root_def     = Define `root (Node a tlist) = a`;
val subtrees_def = Define `subtrees (Node a tlist) = tlist`;

(*---------------------------------------------------------------------------*)
(* Breadth-first search defined as an unfold from a list of trees.           *)
(*                                                                           *)
(* bfs : ('a -> bool) -> 'a tree list -> 'a list list                        *)
(*                                                                           *)
(*---------------------------------------------------------------------------*)

val bfs_def = 
 Define 
   `bfs (P:'a -> bool) x = unfold null (filter P o map root)
                                       (flat o map subtrees) x`;

(*---------------------------------------------------------------------------*)
(* Instantiate unfold facts with bfs parameters                              *)
(*---------------------------------------------------------------------------*)

val unfold_as_bfs = 
  PART_MATCH (lhs o snd o strip_forall o fst o dest_conj o snd o dest_imp)
             unfold_facts
             (rhs(snd(strip_forall(concl bfs_def))));

(*---------------------------------------------------------------------------*)
(* Derive the bfs recursion equations and induction theorem from the unfold. *)
(* Amounts to showing that the bfs parameters cause the unfold to terminate. *)
(*                                                                           *)
(* bfs_eqn =                                                                 *)
(* |- bfs P x = if null x then []                                            *)
(*             else (filter P o map root) x::bfs P ((flat o map subtrees) x) *)
(*                                                                           *)
(*  bfs_ind =                                                                *)
(* |- !P. (!x.(~null x ==> P ((flat o map subtrees) x)) ==> P x) ==> !v. P v *)
(*---------------------------------------------------------------------------*)

val tsize_def =  (* Need a bespoke termination measure *)
 Define
  `(tsize (Node x tlist) = 1 + ltsize tlist) /\
   (ltsize [] = 0) /\
   (ltsize (h::t) = tsize h + ltsize t)`;

val subtrees_smaller = Q.prove
(`!t. ltsize (subtrees t) < tsize t`,
 Cases THEN RW_TAC list_ss [subtrees_def, tsize_def]);

val ltsize_append = Q.prove
(`!L1 L2. ltsize (L1 ++ L2) = ltsize L1 + ltsize L2`,
 Induct THEN RW_TAC list_ss [tsize_def]);

(*---------------------------------------------------------------------------*)
(* Unfold-based bfs and its induction theorem (see above).                   *)
(*---------------------------------------------------------------------------*)

val [bfs_eqn, bfs_ind] = CONJUNCTS
 (REWRITE_RULE [GSYM bfs_def]
 (prove (snd(dest_imp(concl unfold_as_bfs)),
 MATCH_MP_TAC (GEN_ALL unfold_as_bfs)
  THEN WF_REL_TAC `measure ltsize`
  THEN Induct THEN RW_TAC list_ss [tsize_def,ltsize_append]
  THEN Cases_on `null x` THEN FULL_SIMP_TAC list_ss [NULL_ELIM]
  THEN METIS_TAC [DECIDE ``a<b /\ c<d ==> a+c < b+d``, subtrees_smaller])));

(*---------------------------------------------------------------------------*)
(* Queue-based breadth-first search                                          *)
(*---------------------------------------------------------------------------*)

val bfsq_eqn = 
 tDefine 
  "bfsq"
  `(bfsq [] = []) /\
   (bfsq (Node (x:'a) tlist::rst) = 
         if P x then x::bfsq (rst ++ tlist)
                   else bfsq (rst ++ tlist))`
   (WF_REL_TAC `measure ltsize` THEN
    RW_TAC list_ss [tsize_def, ltsize_append]);

val bfsq_ind = fetch "-" "bfsq_ind";

(*---------------------------------------------------------------------------*)
(* Technical lemma                                                           *)
(*---------------------------------------------------------------------------*)

val lem = Q.prove
(`!L1 L2.
  bfsq P (L1 ++ flat (map subtrees L2)) 
     =
  filter P (map root L1) ++ bfsq P (flat (map subtrees L2 ++ map subtrees L1))`,
 Induct THEN RW_TAC list_ss [] 
   THEN Q.PAT_ASSUM `$!M` (ASSUME_TAC o Q.SPEC `L2 ++ [h]`)
   THEN FULL_SIMP_TAC list_ss []
   THEN RULE_ASSUM_TAC (REWRITE_RULE [GSYM APPEND_ASSOC,APPEND])
   THEN POP_ASSUM (SUBST_ALL_TAC o SYM)
   THEN Cases_on `h` 
   THEN FULL_SIMP_TAC list_ss
          [Once bfsq_eqn, root_def, subtrees_def, FLAT_APPEND_DISTRIB]);

(*---------------------------------------------------------------------------*)
(* Main inductive property of bfsq                                           *)
(*---------------------------------------------------------------------------*)

val bfsq_lem = Q.prove
(`!l. (filter P o map root) l ++ bfsq P ((flat o map subtrees) l) = bfsq P l`,
 recInduct bfsq_ind
    THEN RW_TAC list_ss [root_def,subtrees_def]
    THENL [RW_TAC list_ss [Once bfsq_eqn],RW_TAC list_ss [Once bfsq_eqn]]
    THEN METIS_TAC [FILTER_APPEND_DISTRIB, APPEND_ASSOC, APPEND_11,lem]);

(*---------------------------------------------------------------------------*)
(* Desired equality between the two versions of BFS.                         *)
(*---------------------------------------------------------------------------*)

val bfs_eq_bfsq = Q.prove
(`!tlist:'a tree list. flat (bfs P tlist) = bfsq P tlist`,
 recInduct bfs_ind THEN Cases THENL
 [RW_TAC list_ss [Once bfsq_eqn, Once bfs_eqn],
  METIS_TAC [NULL_DEF, bfs_eqn, FLAT_CONS_APPEND, bfsq_lem]]);
