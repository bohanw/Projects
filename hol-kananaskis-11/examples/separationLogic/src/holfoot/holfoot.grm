open Parsetree;

exception Not_distinct;

fun check_distinct il =
  let
	val is = ref (Binaryset.empty String.compare)
	fun f i = if Binaryset.member (!is,i) then
			raise Not_distinct
		     else
			is := Binaryset.add (!is, i)
  in
	List.app f il
  end;


fun mk_formal_params (rl,vl) =
  (check_distinct (rl@vl); (rl,vl));

exception Parameters_not_variables
fun mk_ref_params cel =
  let
	fun check_par (Aexp_ident i) = i |
	      check_par _ = raise Parameters_not_variables
        val il = List.map check_par cel
  in
  (check_distinct il; il)
  end;



(* default component tags *)
val list_data_tag = "hd";
val data_list_tag = "dta";
val array_data_tag = "dta";
val list_link_tag = "tl"
val tree_data_tag = "dta"
val tree_link_tags = ("l", "r")


%%
%name Holfoot
%eop EOF
%term AMPERAMPER
  |  BARBAR
  |  COLON
  |  COMMA
  |  DOT
  |  LAM
  |  MAP
  |  DISPOSE
  |  ELSE
  |  GLOBAL
  |  EMPTY
  |  EOF
  |  EQUAL
  |  EQUALEQUAL
  |  BANGEQUAL
  |  FF
  |  IDENT of string
  |  QIDENT of string
  |  IF
  |  HOL_TERM of string
  |  HOL_FULL_TERM of string
  |  INFIXOP1 of string
  |  INFIXOP2 of string
  |  INFIXOP3 of string
  |  LBRACE
  |  LBRACKET
  |  LOCAL
  |  LPAREN
  |  MINUSGREATER
  |  NAT of int
  |  NULL
  |  NEW
  |  POINTSTO
  |  POINTSTOS
  |  RBRACE
  |  RBRACKET
  |  RESOURCE
  |  RPAREN
  |  SEMI
  |  STAR
  |  IFTHEN
  |  AND
  |  OR
  |  NOT
  |  TT
  |  WHEN
  |  WHILE
  |  BLOCK_SPEC
  |  LOOP_SPEC
  |  WITH
  |  XOR
  |  ASSUME
  |  ASSERT
  |  WRITEREAD
  |  BANGWRITEREAD
  |  UNROLL
  |  below_ELSE
  |  unary_prefix
  |  ENTAILS
  |  STRING of string
  |  ENTAILMENT
  |  OLD
  |  DIVERGE
  |  FAIL


(* precedences (increasing) and associativities for expressions *)

%nonassoc below_ELSE
%nonassoc ELSE
%left STAR AMPERAMPER
%left EQUALEQUAL BANGEQUAL
%left INFIXOP1 EQUAL
%left INFIXOP2
%left INFIXOP3 XOR POINTSTO
%nonassoc unary_prefix

(* entry points *)

%nonterm
     top of Parsetree.p_top
  |  program of Parsetree.p_top
  |  entailments of Parsetree.p_top
  |  entailment_seq of (string * Parsetree.a_proposition * Parsetree.a_proposition) list
  |  a_proposition of Parsetree.a_proposition
  |  program_item_star of Parsetree.p_item list
  |  program_item of Parsetree.p_item
  |  fun_decl of Parsetree.p_item
  |  read_write_decl of (bool * string list * string list) option
  |  unroll_decl of int
  |  resource_decl of Parsetree.p_item
  |  ident_decl of string list
  |  ident_seq of string list
  |  ident_notempty_seq of string list
  |  ident_notempty_seq_no_comma of string list
  |  local_decls of string list
  |  formal_params of string list * string list
  |  actual_params of string list * Parsetree.a_expression list
  |  invariant of Parsetree.a_proposition option
  |  spec of Parsetree.a_proposition
  |  statement_star of Parsetree.p_statement list
  |  statement of Parsetree.p_statement
  |  condition of Parsetree.p_condition
  |  expression of Parsetree.a_expression
  |  simple_expression of Parsetree.a_expression
  |  expression_seq of Parsetree.a_expression list
  |  expression_notempty_seq of Parsetree.a_expression list
  |  genpredarg of Parsetree.a_genpredarg
  |  genpredargs of Parsetree.a_genpredarg list
  |  a_space_pred of Parsetree.a_space_pred
  |  a_component_expression_seq of (string * Parsetree.a_expression) list
  |  a_component_expression_notempty_seq of (string * Parsetree.a_expression) list
  |  a_simple_component_expression_notempty_seq of (string * Parsetree.a_expression) list
  |  ident_or_hol of string

%start top
%pos (int * int)

%%

top:
    program ( program )
  | entailments ( entailments )

entailments:
   entailment_seq
   ( Pentailments entailment_seq )

entailment_seq :
    EOF
       ( [] )
  | ENTAILMENT STRING a_proposition ENTAILS a_proposition entailment_seq
       ( (STRING, a_proposition1, a_proposition2)::entailment_seq )

program :
    program_item_star
      ( Pprogram ([list_data_tag, list_link_tag,
		   tree_data_tag,
		   #1 tree_link_tags, #2 tree_link_tags], [],
        	   program_item_star) )
  | ident_decl program_item_star ( Pprogram (ident_decl,[],program_item_star) )
  | GLOBAL ident_decl program_item_star ( Pprogram ([],ident_decl,program_item_star) )


program_item_star :
    (* empty *)            ( [] )
  | EOF                    ( [] )
  | program_item program_item_star ( program_item::program_item_star )

program_item :
    fun_decl ( fun_decl )
  | resource_decl (resource_decl )

unroll_decl:
    (* empty *) ( 0 )
  | UNROLL NAT RBRACKET ( NAT )
  | UNROLL RBRACKET ( 1 )

read_write_decl:
    (* empty *) ( NONE )
  | WRITEREAD ident_seq SEMI ident_seq RBRACKET ( SOME (false, ident_seq1, ident_seq2) )
  | BANGWRITEREAD ident_seq SEMI ident_seq RBRACKET ( SOME (true, ident_seq1, ident_seq2) )

fun_decl :
    IDENT LPAREN formal_params RPAREN read_write_decl invariant LBRACE local_decls statement_star RBRACE invariant
      ( Pfundecl(true, IDENT,formal_params,read_write_decl,invariant1,local_decls,statement_star,invariant2) )
  | ASSUME IDENT LPAREN formal_params RPAREN read_write_decl invariant LBRACE local_decls statement_star RBRACE invariant
      ( Pfundecl(false, IDENT,formal_params,read_write_decl,invariant1,local_decls,statement_star,invariant2) )
  | ASSUME IDENT LPAREN formal_params RPAREN read_write_decl invariant invariant
      ( Pfundecl(false, IDENT,formal_params,read_write_decl, invariant1,[],[],invariant2) )

resource_decl:
    RESOURCE IDENT LPAREN ident_seq RPAREN LBRACKET a_proposition RBRACKET
      ( Presource(IDENT,ident_seq,a_proposition) )

ident_decl:
    ident_seq SEMI ( ident_seq )


ident_seq:
    (* empty *)      ( [] )
  | ident_notempty_seq ( ident_notempty_seq )

ident_notempty_seq:
    IDENT            ( [IDENT] )
  | IDENT COMMA ident_notempty_seq ( IDENT::ident_notempty_seq )

ident_notempty_seq_no_comma:
    IDENT            ( [IDENT] )
  | IDENT ident_notempty_seq_no_comma ( IDENT::ident_notempty_seq_no_comma )

local_decls:
    (* empty *)              ( [] )
  | LOCAL ident_notempty_seq SEMI local_decls ( ident_notempty_seq @ local_decls )


statement_star:
    (* empty *)              ( [] )
  | statement statement_star ( statement::statement_star )


statement:
    IDENT EQUAL expression SEMI
	  ( Pstm_assign(IDENT, expression) )
  | IDENT EQUAL expression MINUSGREATER IDENT SEMI
	  ( Pstm_fldlookup(IDENT1, expression, IDENT2) )
  | expression MINUSGREATER IDENT EQUAL expression SEMI
	  ( Pstm_fldassign(expression1, IDENT, expression2) )
  | IDENT EQUAL NEW LPAREN RPAREN LBRACKET ident_notempty_seq RBRACKET SEMI
	  ( Pstm_new(IDENT, Aexp_num 1, ident_notempty_seq) )
  | IDENT EQUAL NEW LPAREN expression RPAREN LBRACKET ident_notempty_seq RBRACKET SEMI
	  ( Pstm_new(IDENT, expression, ident_notempty_seq) )
  | IDENT EQUAL NEW LPAREN RPAREN SEMI
	  ( Pstm_new(IDENT, Aexp_num 1, []) )
  | IDENT EQUAL NEW LPAREN expression RPAREN SEMI
	  ( Pstm_new(IDENT, expression, []) )
  | FAIL SEMI
          ( Pstm_fail )
  | DIVERGE SEMI
          ( Pstm_diverge )
  | DISPOSE expression SEMI
          ( Pstm_dispose(expression, Aexp_num 1) )
  | DISPOSE LPAREN expression RPAREN SEMI
          ( Pstm_dispose(expression, Aexp_num 1) )
  | DISPOSE LPAREN expression COMMA expression RPAREN SEMI
          ( Pstm_dispose(expression1, expression2) )
  | LBRACE statement_star RBRACE
	  ( Pstm_block(statement_star) )
  | IF LPAREN STAR RPAREN statement %prec below_ELSE
	  ( Pstm_ndet(statement, Pstm_block []) )
  | IF LPAREN STAR RPAREN statement ELSE statement
	  ( Pstm_ndet(statement1, statement2) )
  | IF LPAREN condition RPAREN statement %prec below_ELSE
	  ( Pstm_if(condition, statement, Pstm_block []) )
  | IF LPAREN condition RPAREN statement ELSE statement
	  ( Pstm_if(condition, statement1, statement2) )
  | WHILE LPAREN condition RPAREN unroll_decl read_write_decl invariant statement
	  ( Pstm_while(unroll_decl, read_write_decl, invariant, condition, statement) )
  | BLOCK_SPEC read_write_decl spec statement spec
	  ( Pstm_block_spec(false, 0, read_write_decl, spec1, statement, spec2) )
  | LOOP_SPEC unroll_decl read_write_decl spec statement spec
	  ( Pstm_block_spec (true, unroll_decl, read_write_decl, spec1, statement, spec2) )
  | ASSERT spec SEMI
	  ( Pstm_assert spec)
  | WITH IDENT WHEN LPAREN condition RPAREN statement
          ( Pstm_withres(IDENT,condition,statement) )
  | IDENT LPAREN actual_params RPAREN SEMI
          ( Pstm_fcall(IDENT,actual_params) )
  | IDENT LPAREN actual_params RPAREN
    BARBAR
    IDENT LPAREN actual_params RPAREN SEMI
          ( Pstm_parallel_fcall(IDENT1,actual_params1,IDENT2,actual_params2) )


invariant:
    (* empty *)
          ( NONE )
  | LBRACKET RBRACKET
          ( NONE )
  | LBRACKET a_proposition RBRACKET
          ( SOME a_proposition )

spec:
    (* empty *)
        ( Aprop_spred Aspred_empty )
  | LBRACKET RBRACKET
        ( Aprop_spred Aspred_empty )
  | LBRACKET a_proposition RBRACKET
          ( a_proposition )


condition:
    TT
          ( (Pcond_true) )
  | FF
          ( (Pcond_false) )
  | LPAREN condition RPAREN
	  ( condition )
  | NOT condition
	  ( Pcond_neg condition )
  | condition AND condition
	  ( Pcond_and(condition1,condition2) )
  | condition OR condition
	  ( Pcond_and(condition1,condition2) )
  | simple_expression EQUALEQUAL expression
	  ( (Pcond_compare("==", simple_expression, expression)) )
  | simple_expression BANGEQUAL expression
	  ( (Pcond_compare("!=", simple_expression, expression)) )
  | simple_expression INFIXOP1 expression
	  ( (Pcond_compare(INFIXOP1, simple_expression, expression)) )
  | HOL_TERM
	  ( (Pcond_hol HOL_TERM) )


simple_expression:
    IDENT
	  ( (Aexp_ident(IDENT)) )
  | QIDENT
	  ( (Aexp_ident(QIDENT)) )
  | OLD LPAREN IDENT RPAREN
	  ( (Aexp_old_ident(IDENT)) )
  | OLD LPAREN QIDENT RPAREN
	  ( (Aexp_old_ident(QIDENT)) )
  | NAT
	  ( (Aexp_num(NAT)) )

expression:
    simple_expression
          ( simple_expression )
  | HOL_TERM
          ( Aexp_hol HOL_TERM)
  | LPAREN expression RPAREN
	  ( expression )
  | expression AMPERAMPER expression
	  ( (Aexp_infix("&&", expression1, expression2)) )
  | expression XOR expression
	  ( (Aexp_infix("^", expression1, expression2)) )
  | expression INFIXOP2 expression
	  ( (Aexp_infix(INFIXOP2, expression1, expression2)) )
  | expression STAR expression
	  ( (Aexp_infix("*", expression1, expression2)) )
  | expression INFIXOP3 expression
	  ( (Aexp_infix(INFIXOP3, expression1, expression2)) )


expression_seq:
    (* empty *)      ( [] )
  | expression_notempty_seq ( expression_notempty_seq )


expression_notempty_seq:
    expression            ( [expression] )
  | expression COMMA expression_notempty_seq ( expression::expression_notempty_seq )


formal_params:
    ident_seq ( mk_formal_params ([],ident_seq) )
  | ident_seq SEMI ident_seq ( mk_formal_params (ident_seq1,ident_seq2) )


actual_params:
    expression_seq ( ([],expression_seq) )
  | expression_seq SEMI expression_seq ( (mk_ref_params expression_seq1, expression_seq2) )


a_component_expression_seq:
    (* empty *)      ( [] )
  | LBRACKET RBRACKET   ( [] )
  | a_simple_component_expression_notempty_seq ( a_simple_component_expression_notempty_seq )
  | LBRACKET a_component_expression_notempty_seq RBRACKET ( a_component_expression_notempty_seq )


a_component_expression_notempty_seq:
    IDENT COLON expression            ( [(IDENT,expression)] )
  | IDENT COLON expression COMMA a_component_expression_notempty_seq ( (IDENT,expression)::a_component_expression_notempty_seq )

a_simple_component_expression_notempty_seq:
    IDENT COLON simple_expression            ( [(IDENT,simple_expression)] )
  | IDENT COLON simple_expression COMMA a_simple_component_expression_notempty_seq ( (IDENT,simple_expression)::a_simple_component_expression_notempty_seq )

genpredarg:
    expression
          ( Aspred_arg_exp expression )
  | LBRACKET ident_notempty_seq RBRACKET
          ( Aspred_arg_string_list ident_notempty_seq )

genpredargs:
    (* empty *)
          ( [] )
  | genpredarg
          ( [genpredarg] )
  | genpredarg SEMI genpredargs
          ( genpredarg::Aspred_arg_semi::genpredargs )
  | genpredarg COMMA genpredargs
          ( genpredarg::Aspred_arg_comma::genpredargs )
  | genpredarg COLON genpredargs
          ( genpredarg::Aspred_arg_colon::genpredargs )

a_space_pred:
    HOL_TERM
          ( Aspred_boolhol HOL_TERM )
  | HOL_FULL_TERM
          ( Aspred_hol HOL_FULL_TERM )
  | EMPTY
          ( Aspred_empty )
  | simple_expression POINTSTO a_component_expression_seq
          ( Aspred_pointsto(simple_expression,a_component_expression_seq) )
  | simple_expression POINTSTO expression
          ( Aspred_pointsto(simple_expression,[(list_link_tag, expression)]) )
  | simple_expression POINTSTO expression COMMA expression
          ( Aspred_pointsto(simple_expression,[(#1 tree_link_tags, expression1),
				(#2 tree_link_tags, expression2)]) )
  | POINTSTOS LPAREN expression COMMA a_component_expression_seq RPAREN
          ( Aspred_pointsto(expression,a_component_expression_seq) )
  | POINTSTOS LPAREN expression COMMA expression RPAREN
          ( Aspred_pointsto(expression1,[(list_link_tag, expression2)]) )
  | IDENT LPAREN genpredargs RPAREN
	  ( Aspred_genpred (IDENT, genpredargs, IDENTleft) )


a_proposition:
    LPAREN a_proposition RPAREN
	  ( a_proposition )
  | a_space_pred
          ( Aprop_spred a_space_pred )
  | simple_expression EQUALEQUAL expression
	  ( Aprop_infix("==",simple_expression,expression) )
  | simple_expression BANGEQUAL expression
	  ( Aprop_infix("!=",simple_expression,expression) )
  | simple_expression INFIXOP1 expression
	  ( (Aprop_infix(INFIXOP1, simple_expression, expression)) )
  | FF
	  ( Aprop_false )
  | a_proposition STAR a_proposition
          ( Aprop_star(a_proposition1,a_proposition2) )
  | IF a_proposition IFTHEN a_proposition %prec below_ELSE
      ( Aprop_ifthenelse(a_proposition1,a_proposition2,Aprop_spred Aspred_empty) )
  | IF a_proposition IFTHEN a_proposition ELSE a_proposition
      ( Aprop_ifthenelse(a_proposition1,a_proposition2,a_proposition3) )
  | MAP LPAREN LAM ident_notempty_seq_no_comma DOT a_proposition RPAREN ident_or_hol
	  ( Aprop_map (ident_notempty_seq_no_comma,a_proposition,ident_or_hol) )

ident_or_hol:
    IDENT                                 ( IDENT )
  | HOL_TERM                              ( HOL_TERM )




