(******************************************************************************)
(* Boilerplate                                                                *)
(******************************************************************************)

(* load the libries
use (Globals.HOLDIR ^ "/examples/separationLogic/src/holfoot/header.sml")
*)


HOL_Interactive.toggle_quietdec();

open listTheory rich_listTheory listLib;

HOL_Interactive.toggle_quietdec();



(******************************************************************************)
(* Recursive implementation                                                   *)
(******************************************************************************)

val file_rec = concat [examplesDir, "/automatic/filter_rec.dsf"];
val _ = holfoot_auto_verify_spec file_rec;



(******************************************************************************)
(* Verify specification                                                       *)
(******************************************************************************)

val file = concat [examplesDir, "/interactive/filter.dsf"];

(* holfoot_set_goal_procedures file ["list_filter"] *)
val filter_TAC = 
   xHF_SOLVE_TAC [ add_rewrites [NULL_EQ, FILTER_EQ_NIL] ] THEN
   REPEAT STRIP_TAC THENL [
      Q.EXISTS_TAC `data_fc` THEN
      HF_SOLVE_TAC,

      Q.EXISTS_TAC `data1` THEN
      HF_SOLVE_TAC,

      Q.EXISTS_TAC `data1 ++ [date] ++ data_fc` THEN
      xHF_SOLVE_TAC [add_rewrites [FILTER_APPEND, FILTER_EQ_NIL]],

      Q.EXISTS_TAC `[]` THEN
      HF_SOLVE_TAC THEN
      SIMP_TAC list_ss [GSYM RIGHT_EXISTS_AND_THM, GSYM LEFT_EXISTS_AND_THM,
        GSYM LEFT_FORALL_IMP_THM, FILTER_APPEND, NULL_EQ, FILTER_EQ_NIL] THEN
      xHF_SOLVE_TAC [add_rewrites[FILTER_EQ_NIL]]
   ];

val _ = holfoot_tac_verify_spec file NONE 
   [("list_filter", filter_TAC)];




(******************************************************************************)
(* Using loop specs                                                           *)
(******************************************************************************)

val file2 = concat [examplesDir, "/interactive/filter.dsf2"];

(* holfoot_set_goal_procedures file2 ["list_filter"] *)
val filter2_TAC = 
   HF_SOLVE_TAC THEN
   REPEAT STRIP_TAC THEN
   Q.EXISTS_TAC `data++[zdata]` THEN
   xHF_SOLVE_TAC [no_case_splits];


val _ = holfoot_tac_verify_spec file2 NONE 
   [("list_filter", filter2_TAC)]
