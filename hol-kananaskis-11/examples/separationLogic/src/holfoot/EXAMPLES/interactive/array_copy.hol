(******************************************************************************)
(* Boilerplate                                                                *)
(******************************************************************************)

(* load the libries
use (Globals.HOLDIR ^ "/examples/separationLogic/src/holfoot/header.sml")
*)

HOL_Interactive.toggle_quietdec();

open listTheory rich_listTheory
open generalHelpersTheory;

HOL_Interactive.toggle_quietdec();


(******************************************************************************)
(* Just the shape works automatically                                         *)
(******************************************************************************)
val file = concat [examplesDir, "/automatic/array_copy-shape.dsf"];
val thm = holfoot_auto_verify_spec file;


(******************************************************************************)
(* Verify specification                                                       *)
(******************************************************************************)

val file = concat [examplesDir, "/interactive/array_copy-full.dsf"];

(* holfoot_set_goal file *)
val copy_TAC = 
HF_SOLVE_TAC THEN
HF_VC_TAC THEN
REPEAT STRIP_TAC THENL [
   Cases_on `x'' = ic` THEN ASM_REWRITE_TAC[] THEN
   FULL_SIMP_TAC arith_ss [],

   ASM_SIMP_TAC arith_ss [LIST_EQ_REWRITE]
];

val _ = holfoot_tac_verify_spec file NONE [("copy", copy_TAC)];


(******************************************************************************)
(* with loop-spec                                                             *)
(******************************************************************************)

val file2 = concat [examplesDir, "/interactive/array_copy-full-loopspec.dsf"];

(* holfoot_set_goal file2 *)
val copy2_TAC = 
HF_CONTINUE_TAC THEN
REPEAT STRIP_TAC THENL [
   `n_const - ic = 0` by DECIDE_TAC THEN
   ASM_REWRITE_TAC[] THEN
   HF_SOLVE_TAC,

   Cases_on `data` THEN1 HF_SOLVE_TAC THEN
   Cases_on `data_dta` THEN1 HF_SOLVE_TAC THEN
   SIMP_TAC list_ss [REPLACE_ELEMENT_compute] THEN
   HF_CONTINUE_TAC
];

val _ = holfoot_tac_verify_spec file2 NONE [("copy", copy2_TAC)];

