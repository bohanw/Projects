(******************************************************************************)
(* Boilerplate                                                                *)
(******************************************************************************)

(* load the libries
use (Globals.HOLDIR ^ "/examples/separationLogic/src/holfoot/header.sml")
*)

val _ = HOL_Interactive.toggle_quietdec();

open listTheory rich_listTheory ConseqConv

val _ = HOL_Interactive.toggle_quietdec();


(******************************************************************************)
(* Verify specification - invariant                                           *)
(******************************************************************************)

val file = concat [examplesDir, "/interactive/array_reverse.dsf"];

(* holfoot_set_goal_procedures file ["reverse1"] *)
val reverse1_TAC =
  HF_SOLVE_TAC THEN
  REPEAT STRIP_TAC THENL [
     HF_VC_TAC THEN
     ASM_SIMP_TAC (arith_ss++boolSimps.LIFT_COND_ss) [COND_EXPAND_IMP, EL_REPLACE_ELEMENT,
         LENGTH_REPLACE_ELEMENT],

     Q.EXISTS_TAC `data` THEN
     HF_SOLVE_TAC THEN
     HF_VC_TAC THEN
     ASM_SIMP_TAC (arith_ss++boolSimps.LIFT_COND_ss) [COND_EXPAND_IMP] THEN
     REPEAT STRIP_TAC THEN
     `(n_const = 2*i_const) /\ (x' = i_const)` by DECIDE_TAC THEN
     ASM_SIMP_TAC arith_ss []
  ];


(* holfoot_set_goal_procedures file ["reverse2"] *)
val reverse2_TAC =
  HF_SOLVE_TAC THEN
  REPEAT STRIP_TAC THENL [
     HF_VC_TAC THEN
     ASM_SIMP_TAC (arith_ss++boolSimps.LIFT_COND_ss) [COND_EXPAND_IMP],

     Q.EXISTS_TAC `data` THEN
     HF_SOLVE_TAC THEN
     HF_VC_TAC THEN
     REPEAT STRIP_TAC THEN
     MATCH_MP_TAC LIST_EQ THEN
     ASM_SIMP_TAC list_ss [] THEN
     REPEAT STRIP_TAC THEN
     `PRE (n_const + 1 − x) = n_const - x` by DECIDE_TAC THEN
     ASM_SIMP_TAC (list_ss++boolSimps.LIFT_COND_ss) [EL_REVERSE, COND_EXPAND_IMP] THEN
     REPEAT STRIP_TAC THEN
     `(n_const = 2*i_const) /\ (x = i_const)` by DECIDE_TAC THEN
     ASM_SIMP_TAC arith_ss []
  ];

(* holfoot_set_goal_procedures file ["reverse3"] *)
val reverse3_TAC =
  xHF_SOLVE_TAC [simple_prop_simps] THEN
  REPEAT STRIP_TAC THENL [
     HF_VC_TAC THEN
     ASM_SIMP_TAC (arith_ss++boolSimps.LIFT_COND_ss) [COND_EXPAND_IMP] THEN
     REPEAT STRIP_TAC THEN
     `(x'' = old_i) /\ (n_const = 2 * old_i)` by DECIDE_TAC THEN
     ASM_SIMP_TAC arith_ss [],

     HF_VC_TAC THEN
     ASM_SIMP_TAC (arith_ss++boolSimps.LIFT_COND_ss) [COND_EXPAND_IMP,
         EL_REPLACE_ELEMENT, LENGTH_REPLACE_ELEMENT],

     HF_VC_TAC THEN
     REPEAT STRIP_TAC THEN
     MATCH_MP_TAC LIST_EQ THEN
     ASM_SIMP_TAC list_ss [] THEN
     REPEAT STRIP_TAC THEN
     `PRE (n_const + 1 − x) = n_const - x` by DECIDE_TAC THEN
     ASM_SIMP_TAC (list_ss++boolSimps.LIFT_COND_ss) [EL_REVERSE, COND_EXPAND_IMP]
  ];


(* holfoot_set_goal_procedures file ["reverse4"] *)
val reverse4_TAC =
  xHF_SOLVE_TAC [simple_prop_simps] THEN
  REPEAT STRIP_TAC THENL [
     HF_VC_TAC THEN
     `(LENGTH data = 0) \/ (LENGTH data = 1)` by DECIDE_TAC THEN
     FULL_SIMP_TAC list_ss [LENGTH_EQ_NUM_compute],

     HF_VC_TAC THEN
     `old_j − (old_i + 1) = LENGTH data - 2` by DECIDE_TAC THEN
     FULL_SIMP_TAC list_ss [MIN_EQ] THEN
     Q.PAT_ASSUM `1 <= LENGTH data` MP_TAC THEN
     REPEAT (POP_ASSUM (K ALL_TAC)) THEN

     CONSEQ_REWRITE_TAC ([LIST_EQ], [], []) THEN     
     ASM_SIMP_TAC arith_ss [LENGTH_DROP, LENGTH_REVERSE, LENGTH_REPLACE_ELEMENT,
        EL_BUTFIRSTN, EL_REVERSE, LENGTH_TAKE, EL_REPLACE_ELEMENT,
        EL_FIRSTN] THEN
     REPEAT STRIP_TAC THENL [
        `PRE (1 - x) = 0` by DECIDE_TAC THEN
        ASM_SIMP_TAC list_ss [],

        AP_THM_TAC THEN AP_TERM_TAC THEN
        DECIDE_TAC,

        `x = 0` by DECIDE_TAC THEN
        ASM_SIMP_TAC arith_ss [COND_RAND, COND_RATOR] THEN
        REPEAT STRIP_TAC THEN
        `PRE (LENGTH data) = 0` by DECIDE_TAC THEN
        ASM_SIMP_TAC list_ss []
     ]
  ];



(* holfoot_set_goal_procedures file ["reverse5"] *)
val reverse5_TAC =
  xHF_SOLVE_TAC [simple_prop_simps] THEN
  REPEAT STRIP_TAC THENL [
     HF_VC_TAC THEN
     `(LENGTH data = 0) \/ (LENGTH data = 1)` by DECIDE_TAC THEN
     FULL_SIMP_TAC list_ss [LENGTH_EQ_NUM_compute],

     HF_VC_TAC THEN
     `old_j − (old_i + 1) =  LENGTH data - 2` by DECIDE_TAC THEN
     `old_j − old_i = LENGTH data - 1` by DECIDE_TAC THEN
     ASM_REWRITE_TAC[] THEN
     Q.PAT_ASSUM `MIN 1 X = 1` MP_TAC THEN
     REPEAT (POP_ASSUM (K ALL_TAC)) THEN
     SIMP_TAC arith_ss [MIN_EQ, BUTFIRSTN_BUTFIRSTN, LENGTH_REPLACE_ELEMENT,
        LENGTH_REVERSE] THEN
     CONSEQ_REWRITE_TAC ([LIST_EQ], [], []) THEN     
     ASM_SIMP_TAC arith_ss [LENGTH_DROP, LENGTH_REVERSE, LENGTH_REPLACE_ELEMENT,
        EL_BUTFIRSTN, EL_REVERSE, LENGTH_TAKE, EL_REPLACE_ELEMENT,
        EL_FIRSTN, MIN_EQ] THEN
     REPEAT STRIP_TAC THENL [
        `PRE (1 - x) = 0` by DECIDE_TAC THEN
        ASM_SIMP_TAC list_ss [],

        AP_THM_TAC THEN AP_TERM_TAC THEN
        DECIDE_TAC,

        `x = 0` by DECIDE_TAC THEN
        ASM_SIMP_TAC arith_ss [COND_RAND, COND_RATOR] THEN
        REPEAT STRIP_TAC THEN
        `PRE (LENGTH data) = 0` by DECIDE_TAC THEN
        ASM_SIMP_TAC list_ss []
     ],

     HF_VC_TAC THEN
     FULL_SIMP_TAC std_ss [MIN_EQ, NULL_DROP] THEN
     `n_const + 1 = LENGTH data` by DECIDE_TAC THEN
     ASM_SIMP_TAC list_ss [FIRSTN_LENGTH_ID_EVAL]
  ];


val _ = holfoot_tac_verify_spec file NONE
                [("reverse1", reverse1_TAC),
                 ("reverse2", reverse2_TAC),
                 ("reverse3", reverse3_TAC),
                 ("reverse4", reverse4_TAC),
                 ("reverse5", reverse5_TAC)];


