(******************************************************************************)
(* Holfoot can proof partial correctness of programs using separation logic.  *)
(*                                                                            *)
(* The entire proof is done using HOL 4. This includes not just the           *)
(* proof of some verification conditions, but the whole proof. This includes  *)
(* formal definitions of the programming and specification language as well   *)
(* as verified inferences.                                                    *)
(******************************************************************************)

(******************************************************************************)
(* Boilerplate (Load everything)                                              *)
(******************************************************************************)

(* load the libries
use (Globals.HOLDIR ^ "/examples/separationLogic/src/holfoot/header.sml")
*)

val _ = HOL_Interactive.toggle_quietdec();

open listTheory rich_listTheory arithmeticTheory boolSimps

val _ = HOL_Interactive.toggle_quietdec();


(******************************************************************************)
(* Define a function that does exactly the same on lists in HOL as the        *)
(* function does on arrays in the program                                     *)
(******************************************************************************)

val VSCOMP2_FUN_def = Define `
  (VSCOMP2_FUN l i [] = l) /\
  (VSCOMP2_FUN l i (n::ns) =
      VSCOMP2_FUN (REPLACE_ELEMENT i n l) (SUC i) ns)` 

val LENGTH_VSCOMP2_FUN = prove (
``!l i ns. LENGTH (VSCOMP2_FUN l i ns) = LENGTH l``,
Induct_on `ns` THEN
ASM_SIMP_TAC std_ss [VSCOMP2_FUN_def, LENGTH_REPLACE_ELEMENT]);


(******************************************************************************)
(* Verify the spec that the program implements VSCOMP2_FUN                    *)
(******************************************************************************)

(* Assing the filename of the spec to variable file *)
val file = concat [examplesDir, "/vstte/vscomp2.dsf"];

(* holfoot_set_goal_procedures file ["vscomp2"] *)
val vscomp2_TAC =
    (*simplify the EVERY into something easier for the automation *)
    SIMP_TAC std_ss [EVERY_MEM, MEM_EL,GSYM LEFT_FORALL_IMP_THM] THEN

    (*run automation *)
    HF_SOLVE_TAC THEN

    (* clean up the goal a bit and the prove VCs on VSCOMP2_FUN *)
    REPEAT STRIP_TAC THEN HF_VC_TAC THENL [
       ASM_SIMP_TAC std_ss [BUTFIRSTN_LENGTH_LESS, VSCOMP2_FUN_def],

       FULL_SIMP_TAC list_ss [LENGTH_VSCOMP2_FUN, LENGTH_REPLACE_ELEMENT, GSYM ADD1, BUTFIRSTN_CONS_EL, VSCOMP2_FUN_def]
    ]

        

(* put everything together (2 s) *)       
val final_thm = holfoot_tac_verify_spec file NONE
                   [("vscomp2", vscomp2_TAC)];



(******************************************************************************)
(* So far, the program was reduced to a functional implementation as a HOL 4  *)
(* function VSCOMP2_FUN. Now show some interesting properties of              *)
(* VSCOMP2_FUN                                                                *)
(******************************************************************************)

  
val EL_VSCOMP2_FUN___NOT_IN = prove (``
!l1 i l2 n. n < LENGTH l1 /\ ~(MEM n l2) ==>

(EL n (VSCOMP2_FUN l1 i l2) =
 EL n l1)``,

Induct_on `l2` THEN (
   REPEAT STRIP_TAC THEN
   FULL_SIMP_TAC (list_ss++boolSimps.COND_elim_ss) [VSCOMP2_FUN_def, LENGTH_REPLACE_ELEMENT,
     EL_REPLACE_ELEMENT]
));


val EL_VSCOMP2_FUN___IN = prove (``
!l1 i l2 n. (n < LENGTH l1 /\ (MEM n l2)) ==>

(EL n (VSCOMP2_FUN l1 i l2) >= i)``,

Induct_on `l2` THEN SIMP_TAC list_ss [VSCOMP2_FUN_def] THEN
REPEAT GEN_TAC THEN
Cases_on `MEM n l2` THENL [
   ASM_REWRITE_TAC[] THEN
   REPEAT STRIP_TAC THEN
   Q.PAT_ASSUM `!l1 i n. X` (MP_TAC o Q.SPECL [`REPLACE_ELEMENT i h l1`, `(SUC i)`, `n`]) THEN
   ASM_SIMP_TAC list_ss [LENGTH_REPLACE_ELEMENT],


   ASM_REWRITE_TAC[] THEN
   REPEAT STRIP_TAC THEN
   FULL_SIMP_TAC list_ss [EL_VSCOMP2_FUN___NOT_IN, LENGTH_REPLACE_ELEMENT,
      EL_REPLACE_ELEMENT]
]);





(* proving B[A[i]] = i *)
val VSCOMP2_FUN___EL = prove (
``!l1 i l2.
  EVERY (\x. x < LENGTH l2) l1 /\
  ALL_DISTINCT l1 ==>

  (!n. n < LENGTH l1 ==>
   (EL (EL n l1) (VSCOMP2_FUN l2 i l1) = n+i))``,

Induct_on `l1` THEN (
   SIMP_TAC list_ss []
) THEN
REPEAT STRIP_TAC THEN
Cases_on `n` THENL [
   FULL_SIMP_TAC list_ss [VSCOMP2_FUN_def,
      EL_VSCOMP2_FUN___NOT_IN, LENGTH_REPLACE_ELEMENT,
      EL_REPLACE_ELEMENT],

   FULL_SIMP_TAC list_ss [VSCOMP2_FUN_def, LENGTH_REPLACE_ELEMENT]
]);

(* proving B is injective = i *)
val VSCOMP2_FUN___INJ1 = prove (
``!l1 i l2 n m.
  (EVERY (\x. x < LENGTH l2) l1 /\
   (EL n (VSCOMP2_FUN l2 i l1) = 
    EL m (VSCOMP2_FUN l2 i l1)) /\
   MEM n l1 /\ MEM m l1) ==> (n = m)``,

Induct_on `l1` THEN (
   SIMP_TAC list_ss [VSCOMP2_FUN_def]
) THEN
REPEAT GEN_TAC THEN
Cases_on `MEM n l1 /\ MEM m l1` THENL [
   FULL_SIMP_TAC std_ss [] THEN
   Q.PAT_ASSUM `!i l2 n m. X`
      (ASSUME_TAC o Q.SPECL [`SUC i`, `REPLACE_ELEMENT i h l2`, `n`, `m`]) THEN
   REPEAT STRIP_TAC THEN
   FULL_SIMP_TAC list_ss [LENGTH_REPLACE_ELEMENT],

   Q.PAT_ASSUM `!i l2 n m. X ` (K ALL_TAC) THEN
   REPEAT STRIP_TAC THEN FULL_SIMP_TAC std_ss [] THENL [
      Q.PAT_ASSUM `EL a X = EL b Y` MP_TAC THEN
      `EL h (VSCOMP2_FUN (REPLACE_ELEMENT i h l2) (SUC i) l1) = i` by ALL_TAC THEN1 (
         ASM_SIMP_TAC list_ss [EL_VSCOMP2_FUN___NOT_IN, LENGTH_REPLACE_ELEMENT, EL_REPLACE_ELEMENT]
      ) THEN
      `EL m (VSCOMP2_FUN (REPLACE_ELEMENT i h l2) (SUC i) l1) >= SUC i` by ALL_TAC THEN1 (
          MATCH_MP_TAC EL_VSCOMP2_FUN___IN THEN
          FULL_SIMP_TAC list_ss [EVERY_MEM, LENGTH_REPLACE_ELEMENT]
      ) THEN
      ASM_SIMP_TAC arith_ss [],

      Q.PAT_ASSUM `EL a X = EL b Y` MP_TAC THEN
      `EL h (VSCOMP2_FUN (REPLACE_ELEMENT i h l2) (SUC i) l1) = i` by ALL_TAC THEN1 (
         ASM_SIMP_TAC list_ss [EL_VSCOMP2_FUN___NOT_IN, LENGTH_REPLACE_ELEMENT, EL_REPLACE_ELEMENT]
      ) THEN
      `EL n (VSCOMP2_FUN (REPLACE_ELEMENT i h l2) (SUC i) l1) >= SUC i` by ALL_TAC THEN1 (
          MATCH_MP_TAC EL_VSCOMP2_FUN___IN THEN
          FULL_SIMP_TAC list_ss [EVERY_MEM, LENGTH_REPLACE_ELEMENT]
      ) THEN
      ASM_SIMP_TAC arith_ss []
  ]
]);


(* proving B is injective *)
val VSCOMP2_FUN___INJ = prove (
``!l1 i l2 n m.
  (EVERY (\x. x < LENGTH l2) l1 /\
  (!n. n < LENGTH l2 ==> MEM n l1)) ==>

  ALL_DISTINCT (VSCOMP2_FUN l2 i l1)``,

SIMP_TAC std_ss [EL_ALL_DISTINCT_EL_EQ, LENGTH_VSCOMP2_FUN] THEN
METIS_TAC[VSCOMP2_FUN___INJ1]);



