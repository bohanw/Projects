INSTRUCTIONS:

WARNING! Before running ./doit, edit the editable variables in file
../.acl2holrc.bash.

Note: As described below, file inputs/PKGS.ml defines all packages
used by the books in inputs/, and hence should be used to define
ACL2_PACKAGE_ALIST in HOL.  This file, and corresponding file
inputs/PKGS.lsp, are in the svn repository, and are expected to be
reasonably stable, but should be committed when they have changed.

In this directory (or most likely, in any directory), run testbench
script ./doit.  This will certify any uncertified books in inputs/
(first certifying any uncertified tool books in ../lisp/), then
generate "essential" .lisp files in directory results/, which should
then have identical contents to directory gold/.  If so, then
"Success!" is printed and the exit status is 0.  Otherwise the exit
status is non-zero and the error message will direct you to file
diffout and the logs/ directory (though if certification fails then
you may also want to see inputs/).

There is also a wrinkle regarding packages.  The 'make' in inputs/
should generate files PKGS.lsp and PKGS.ml in that directory (logged
in PKGS.out and PKGS.err).  These, in turn, should result in
generating a small file, pkg-check.txt (logged in pkg-check.out and
pkg-check.err).  File PKGS.ml defines all packages used by the books
in inputs/, and hence should be used to define ACL2_PACKAGE_ALIST in
HOL.  File PKGS.lsp is an ACL2-readable version of that same package
information, assocating package names with imports, and is checked to
be complete and correct with respect to each book certified in
inputs/.  If that check fails, it's probably because additional
packages have been defined that do not show up when including the
books mentioned explicitly in the PKGS.lsp target in inputs/Makefile;
so that target's code should then be edited by adding additional
books.

Note: Only minimal effort has been made (at least for updating to ACL2
Version 4.0) to maintain round-trip/gold/axioms.lisp and
round-trip/gold/axioms.ml.  Instead, to update to a new ACL2 version,
we just do the following:
(1) Run ./doit.  It should complete except for complaints in
    round-trip/diffout regarding the above two files.
(2) Do a quick comparison of round-trip/results/axioms.lisp with
    round-trip/gold/axioms.lisp.  If these seem reasonably compatible,
    then just copy the former to the latter.
(3) Run ./doit again.  This time, do an extremely brief comparison of
    axioms.ml in the above two directories, and if nothing seems
    amiss, copy round-trip/results/axioms.ml to round-trip/gold/.
(4) Run ./doit again, and you should see "SUCCESS!".

See the end of this README file for information on the example from
Sandip Ray et al. on correctness of cone-of-influence reduction.

==============================

Contents of this directory:

Supplied files and directories:

README          This file
doit		Script that runs tests: execute ./doit
gold/           Expected results:
		  ../lisp/book-essence.csh generates .lisp files
		  ../lisp/a2ml.csh generates .ml files from the
		      generated .lisp files
inputs/         Input files for tests, and a Makefile to generate their
                  certifications (hence this directory can contain
		  .cert files, compiled files, and .out files from
                  certification)
round-trip/	Subdirectory for round-trip (ACL2->HOL->ACL2) testing
obsolete/	Stuff I think we can safely discard, though I'll be
		  more confident of that after we complete a
		  round-trip test

Generated files and directories:

diffout         Test failure data
diffout.old     Test failure data from previous test
logs/           Test logs (for generating results/ data)
old-logs/       Test logs from previous test
results/        Results of tests (essential events in .lisp files),
		  generated as explained above for gold/
old-results/    Results of tests from previous test

==============================

Regarding the example from Sandip Ray et al. on correctness of
cone-of-influence reduction:

The files from that example in inputs/ are as follows, although the
only generated files we need are the .ml files in gold/ listed just
below.

  apply-total-order.lisp
  circuit-bisim.lisp
  circuits.lisp
  cone-of-influence.lisp
  encap1.lisp
  ltl.lisp
  records.lisp
  sets.lisp
  summary.lisp
  test1.lisp
  test1a.lisp
  test2.lisp
  total-order.lisp

  apply-total-order.ml
  records.ml
  summary.ml
  total-order.ml

See files inputs/*.lisp for explanatory comments, which are gone in
the generated gold/*.lisp files.  File summary.lisp is his top-level
book, and I could write a tool to figure out what supports it (in this
case apply-total-order, records, and total-order).
