loadPath := "../../" :: "../../dff/" :: !loadPath;

Globals.priming := SOME "";
app load ["word8CasesLib", "compile", "aesTheory"];

quietdec := true;
open word8Theory compile MultTheory RoundOpTheory aesTheory;
quietdec := false;

val MAKE_NETLIST = Count.apply MAKE_NETLIST;

val initial_combinational = !combinational_constants;

(*---------------------------------------------------------------------------*)
(* Standard word operations become combinational.                            *)
(*---------------------------------------------------------------------------*)

val _ = 
 add_combinational 
   ["word_lsl","word_lsr", "bitwise_eor", "MSB", "LSB", "n2w"];

val _ = add_combinational ["Sbox","InvSbox"]; (* for {Inv}SubBytes *)

val xtime_dev = 
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (CompileConvert (SPEC_ALL xtime_def));

(*---------------------------------------------------------------------------*)
(* Iterative multiplication.                                                 *)
(*---------------------------------------------------------------------------*)

local
 val defth = SPEC_ALL IterConstMult_def
 val (lt,rt) = boolSyntax.dest_eq(concl defth)
 val (func,args) = dest_comb lt
 val (b,t1,t2) = dest_cond rt
 val fb = mk_pabs(args,b)
 val f1 = mk_pabs(args,t1)
 val f2 = mk_pabs(args,rand t2)
in
val total_thm = Q.prove
(`TOTAL(^fb,^f1,^f2)`,
 RW_TAC list_ss [composeTheory.TOTAL_def,pairTheory.FORALL_PROD] 
  THEN WF_REL_TAC `w2n o FST` THEN STRIP_TAC THEN
   word8CasesLib.word8Cases_on `p_1` THEN 
   RW_TAC std_ss [] THEN REPEAT (POP_ASSUM MP_TAC) THEN word8Lib.WORD_TAC)
val iter_mult_dev = 
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] (RecCompileConvert defth total_thm);
val iter_mult_atm = REFINE (DEPTHR ATM_REFINE) iter_mult_dev;
end;

(*---------------------------------------------------------------------------*)
(* Expand out xtime in the multiplier                                        *)
(*---------------------------------------------------------------------------*)

val iter_mult1_dev =
 REFINE (DEPTHR(LIB_REFINE[xtime_dev])) iter_mult_dev;


val to_state_dev = 
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (CompileConvert (SPEC_ALL to_state_def));
val from_state_dev = 
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (CompileConvert (SPEC_ALL from_state_def));

val SubBytes_def' = 
   SIMP_RULE std_ss [genSubBytes_def,FUN_EQ_THM,FORALL_BLOCK] SubBytes_def;
val SubBytes_dev = 
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (CompileConvert (SPEC_ALL SubBytes_def'));

val InvSubBytes_def' = 
   SIMP_RULE std_ss [FUN_EQ_THM,FORALL_BLOCK,genSubBytes_def] InvSubBytes_def;
val InvSubBytes_dev = 
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (CompileConvert (SPEC_ALL InvSubBytes_def'));

val ShiftRows_dev = 
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (CompileConvert (SPEC_ALL ShiftRows_def));

val InvShiftRows_dev = 
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (CompileConvert (SPEC_ALL InvShiftRows_def));

val MultCol_dev =
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (CompileConvert (SPEC_ALL MultCol_def));

val InvMultCol_dev =
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (CompileConvert (SPEC_ALL InvMultCol_def));

(*---------------------------------------------------------------------------*)
(* Naive elimination of "let" leads to silly hardware?                       *)
(*---------------------------------------------------------------------------*)

val MixColumns_def' = 
 GEN_BETA_RULE
  (SIMP_RULE std_ss 
     [FUN_EQ_THM,FORALL_BLOCK,genMixColumns_def,LET_THM] MixColumns_def);

val InvMixColumns_def' = 
 GEN_BETA_RULE
  (SIMP_RULE std_ss 
      [FUN_EQ_THM,FORALL_BLOCK,genMixColumns_def,LET_THM] InvMixColumns_def);

val MixColumns_dev =
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (CompileConvert (SPEC_ALL MixColumns_def'));

val InvMixColumns_dev =
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (CompileConvert (SPEC_ALL InvMixColumns_def'));

(*---------------------------------------------------------------------------*)
(* Rephrase MixColumns and InvMixColumns so hardware is not so silly.        *)
(* Instead of making new definitions, re-characterize them in terms of       *)
(* Rewire.                                                                   *)
(*---------------------------------------------------------------------------*)

val Rewire_def = 
 Define 
   `Rewire ((a1,a2,a3,a4),(b1,b2,b3,b4),(c1,c2,c3,c4),(d1,d2,d3,d4)) =
      (a1,b1,c1,d1,a2,b2,c2,d2,a3,b3,c3,d3,a4,b4,c4,d4):block`;

val Rewire_dev =
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (CompileConvert (SPEC_ALL Rewire_def));

val MixLem = Q.prove
(`MixColumns (x1, x2, x3, x4,
              x5, x6, x7, x8,
              x9, x10,x11,x12,
              x13,x14,x15,x16) 
    =
    Rewire (MultCol(x1,x5,x9,x13),
            MultCol(x2,x6,x10,x14),
            MultCol(x3,x7,x11,x15),
            MultCol(x4,x8,x12,x16))`,
 RW_TAC std_ss [MixColumns_def,genMixColumns_def,
                LET_THM,Rewire_def,MultCol_def]);

val InvMixLem = Q.prove
(`InvMixColumns (x1, x2, x3, x4,
              x5, x6, x7, x8,
              x9, x10,x11,x12,
              x13,x14,x15,x16) 
    =
    Rewire (InvMultCol(x1,x5,x9,x13),
            InvMultCol(x2,x6,x10,x14),
            InvMultCol(x3,x7,x11,x15),
            InvMultCol(x4,x8,x12,x16))`,
 RW_TAC std_ss [InvMixColumns_def,genMixColumns_def,
                LET_THM,Rewire_def,InvMultCol_def]);

val MixColumns_Rewire_dev = 
 PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
    (CompileConvert (SPEC_ALL MixLem));

val InvMixColumns_Rewire_dev = 
 PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
    (CompileConvert (SPEC_ALL InvMixLem));

(* Refine out Rewire *)
val Refined_Rewire_MixColumns_dev =
 REFINE (DEPTHR(LIB_REFINE[Rewire_dev])) 
        MixColumns_Rewire_dev;

val Refined_Rewire_InvMixColumns_dev = 
 REFINE (DEPTHR(LIB_REFINE[Rewire_dev])) 
        InvMixColumns_Rewire_dev;

(* Refine out both MultCol and Rewire *)
val Refined_MixColumns_dev =
 REFINE (DEPTHR(LIB_REFINE[MultCol_dev,Rewire_dev])) 
        MixColumns_Rewire_dev;

val Refined_InvMixColumns_dev = 
 REFINE (DEPTHR(LIB_REFINE[InvMultCol_dev,Rewire_dev])) 
        InvMixColumns_Rewire_dev;

val XOR_BLOCK_dev =
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (CompileConvert (SPEC_ALL XOR_BLOCK_def));

(* 
  Compiler doesn't yet support non-functions .... but I can 
  propagate the constants

val DUMMY_KEYS_dev =
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (CompileConvert (SPEC_ALL DUMMY_KEYS_def));
*)

val ROTKEYS_dev =
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (CompileConvert (SPEC_ALL ROTKEYS_def));

val REVKEYS_dev =
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (CompileConvert (SPEC_ALL REVKEYS_def));

val Round_def' = REWRITE_RULE [AddRoundKey_def] Round_def;
val InvRound_def' = REWRITE_RULE [AddRoundKey_def] InvRound_def;

local
 val defth = SPEC_ALL Round_def'
 val (lt,rt) = boolSyntax.dest_eq(concl defth)
 val (func,args) = dest_comb lt
 val (b1,t1,t2) = dest_cond rt
 val fb = mk_pabs(args,b1)
 val f1 = mk_pabs(args,t1)
 val f2 = mk_pabs(args,rand t2)
in
val totalRound = Q.prove
(`TOTAL(^fb,^f1,^f2)`,
 RW_TAC list_ss [composeTheory.TOTAL_def] THEN WF_REL_TAC `FST`)
end;

local
 val defth = SPEC_ALL InvRound_def'
 val (lt,rt) = boolSyntax.dest_eq(concl defth)
 val (func,args) = dest_comb lt
 val (b1,t1,t2) = dest_cond rt
 val fb = mk_pabs(args,b1)
 val f1 = mk_pabs(args,t1)
 val f2 = mk_pabs(args,rand t2)
in
val totalInvRound = Q.prove
(`TOTAL(^fb,^f1,^f2)`,
 RW_TAC list_ss [composeTheory.TOTAL_def] THEN WF_REL_TAC `FST`)
end;

val Round_dev =
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (RecCompileConvert (SPEC_ALL Round_def') totalRound);

val InvRound_dev =
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
           (RecCompileConvert (SPEC_ALL InvRound_def') totalInvRound);

val AES_FWD_dev =
  PURE_REWRITE_RULE[GSYM DEV_IMP_def] 
    (CompileConvert 
      (SPEC_ALL AES_FWD_def));

compile.monitor_netlist_construction := true;

STOP;


(*---------------------------------------------------------------------------*)
(* Make netlists                                                             *)
(*---------------------------------------------------------------------------*)

val xtimeNetlist = MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) xtime_dev);
val iter_mult_Netlist = MAKE_NETLIST iter_mult_atm;
val iter_mult1_Netlist = 
  MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) iter_mult1_dev);
val to_stateNetlist = MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) to_state_dev);
val from_stateNetlist = MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) from_state_dev);

(*---------------------------------------------------------------------------*)
(* MAKE_NETLIST on SubBytes is incredibly slow if Sbox and InvSbox are       *)
(*   not declared to be combinational ... why?                               *)
(*---------------------------------------------------------------------------*)

val SubBytesNetlist = 
    MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) SubBytes_dev);
val InvSubBytesNetlist = 
    MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) InvSubBytes_dev);

val ShiftRowsNetlist = MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) ShiftRows_dev);
val InvShiftRowsNetlist = MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) InvShiftRows_dev);

val MultColNetlist = MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) MultCol_dev);
val InvMultColNetlist = MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) InvMultCol_dev);

(* Original .... Sloooow 
val MixColumnsNetlist = 
  MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) MixColumns_dev);
val InvMixColumnsNetlist = 
  MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) InvMixColumns_dev);
*)

(* Rephrased with Rewire, and Rewire not refined *)
val MixColumns_Rewire_Netlist =
   MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) MixColumns_Rewire_dev);
val InvMixColumns_Rewire_Netlist =
   MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) InvMixColumns_Rewire_dev);

(* Rephrased with Rewire and then Rewire refined *)
val Refined_Rewire_InvMixColumns_Netlist = 
  MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) 
    Refined_Rewire_MixColumns_dev);
val InvMixColumns_Rewire_Netlist =
   MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) 
     Refined_Rewire_InvMixColumns_dev);

(* Refined out both MultCol and Rewire: *)
val Refined_MixColumns_Netlist = 
   MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) Refined_MixColumns_dev);
val Refined_InvMixColumns_Netlist = 
   MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) Refined_InvMixColumns_dev);

val XOR_BLOCKNetlist = 
  MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) XOR_BLOCK_dev);

val ROTKEYSNetlist = MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) ROTKEYS_dev);

val REVKEYSNetlist = 
  MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) REVKEYS_dev);

fun MAKE_NETLIST_8 devth =
 ((ptime "8" (PURE_REWRITE_RULE (!combinational_components))) o
  (ptime "7" (CONV_RULE(RATOR_CONV(RAND_CONV(REDEPTH_CONV(COMB_SYNTH_CONV)))))) o
  (ptime "6" (REWRITE_RULE [UNCURRY,FST,SND]))           o
  (ptime "5" (CONV_RULE (CIRC_CONV (DEPTH_CONV STEP5_CONV)))) o
  (ptime "4" STEP4) o 
  (ptime "3" GEN_BETA_RULE)  o
  (ptime "2" IN_OUT_SPLIT)   o
  (ptime "1" (REWRITE_RULE 
   [POSEDGE_IMP,CALL,SELECT,FINISH,ATM,SEQ,PAR,ITE,REC,
    ETA_THM,PRECEDE_def,FOLLOW_def,PRECEDE_ID,FOLLOW_ID,
    Ite_def,Par_def,Seq_def,o_THM]))) devth;

fun EXISTS_OUT_CONV t =
 let val th        = ptime "EXISTS_OUT_CONV 1 " 
                        (STANDARDIZE_EXISTS_CONV "v") t
     val (vl,tml)  = ptime "EXISTS_OUT_CONV 2 " EXISTS_OUT (rhs(concl th))
     val tml1      = ptime "EXISTS_OUT_CONV 3 " (foldl PRUNE1_FUN tml) vl 
     val t1        = ptime "EXISTS_OUT_CONV 4 " list_mk_conj tml1
     val vl1       = ptime "EXISTS_OUT_CONV 5 " 
                        rev (intersect vl (free_vars t1))
     val count_ref = ref 0
     fun mkv ty    = let val newv = mk_var(("v"^Int.toString(!count_ref)),ty)
                      in
                       (count_ref := (!count_ref)+1; newv)
                      end
     val subsl     = map (fn v => (mkv(snd(dest_var v)),v)) vl1
     val vl2       = map fst subsl
     val t2        = ptime "EXISTS_OUT_CONV 6 " 
                       (hol88Lib.subst subsl) t1 
     val t3        = ptime "EXISTS_OUT_CONV 7 " list_mk_exists (vl2, t2)
     val th        = ptime "EXISTS_OUT_CONV 8 " 
                      mk_oracle_thm (* YIKES! -- what's this!!! *)
                      (Tag.read "EXISTS_OUT_CONV")([],mk_eq(t,t3))
 in
  th
 end;

val th8 = MAKE_NETLIST_8 (REFINE (DEPTHR ATM_REFINE) Round_dev);
val tm = fst(dest_imp(concl th8));

(*---------------------------------------------------------------------------*)
(* Incredibly slow at the moment.                                            *)
(*---------------------------------------------------------------------------*)

val RoundNetlist = 
  MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) Round_dev);
val InvRoundNetlist = 
  MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) InvRound_dev);

val AES_FWDNetlist =  MAKE_NETLIST (REFINE (DEPTHR ATM_REFINE) AES_FWD_dev);


(*---------------------------------------------------------------------------*)
(* Regression testing                                                        *)
(*---------------------------------------------------------------------------*)

fun equiv_check dev =
  let val dev' = REFINE (DEPTHR ATM_REFINE) dev
      val th1 = time MAKE_NETLIST dev'
      val th2 = time compile.MAKE_NETLIST dev'
  in aconv (concl th1) (concl th2)
  end;

equiv_check xtime_dev;
equiv_check iter_mult_atm;
equiv_check (REFINE (DEPTHR ATM_REFINE) iter_mult1_dev);
equiv_check to_state_dev;
equiv_check from_state_dev;
equiv_check SubBytes_dev;
equiv_check InvSubBytes_dev;
equiv_check ShiftRows_dev;
equiv_check InvShiftRows_dev;
equiv_check MultCol_dev;
equiv_check InvMultCol_dev;
equiv_check MixColumns_dev;
equiv_check InvMixColumns_dev;
equiv_check XOR_BLOCK_dev;
equiv_check ROTKEYS_dev;
equiv_check REVKEYS_dev;
equiv_check Round_dev;
equiv_check InvRound_dev;

(*---------------------------------------------------------------------------*)
(* Testing and debugging                                                     *)
(*---------------------------------------------------------------------------*)


(*
g `(?f:num -> num # (block # block # block # block # block # 
                     block # block # block # block # block # block)
                  # block. P f) = 
     ?f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15 f16
      g1 g2 g3 g4 g5 g6 g7 g8 g9 g10 g11 g12 g13 g14 g15 g16
      h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16
      i1 i2 i3 i4 i5 i6 i7 i8 i9 i10 i11 i12 i13 i14 i15 i16
      j1 j2 j3 j4 j5 j6 j7 j8 j9 j10 j11 j12 j13 j14 j15 j16 
      k1 k2 k3 k4 k5 k6 k7 k8 k9 k10 k11 k12 k13 k14 k15 k16
      l1 l2 l3 l4 l5 l6 l7 l8 l9 l10 l11 l12 l13 l14 l15 l16
      m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16
      n1 n2 n3 n4 n5 n6 n7 n8 n9 n10 n11 n12 n13 n14 n15 n16
      o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 o12 o13 o14 o15 o16
      p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16
      q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 q16. 
     P (f0 <>
        ((f1 <> f2 <> f3 <> f4 <> f5 <> f6 <> f7 <> f8 <> 
         f9 <> f10 <> f11 <> f12 <> f13 <> f14 <> f15 <> f16) <> 
        (g1 <> g2 <> g3 <> g4 <> g5 <> g6 <> g7 <> g8 <> 
         g9 <> g10 <> g11 <> g12 <> g13 <> g14 <> g15 <> g16) <>
        (h1 <> h2 <> h3 <> h4 <> h5 <> h6 <> h7 <> h8 <> 
         h9 <> h10 <> h11 <> h12 <> h13 <> h14 <> h15 <> h16) <>
        (i1 <> i2 <> i3 <> i4 <> i5 <> i6 <> i7 <> i8 <> 
         i9 <> i10 <> i11 <> i12 <> i13 <> i14 <> i15 <> i16) <>
        (j1 <> j2 <> j3 <> j4 <> j5 <> j6 <> j7 <> j8 <> 
         j9 <> j10 <> j11 <> j12 <> j13 <> j14 <> j15 <> j16) <>
        (k1 <> k2 <> k3 <> k4 <> k5 <> k6 <> k7 <> k8 <> 
         k9 <> k10 <> k11 <> k12 <> k13 <> k14 <> k15 <> k16) <> 
        (l1 <> l2 <> l3 <> l4 <> l5 <> l6 <> l7 <> l8 <> 
         l9 <> l10 <> l11 <> l12 <> l13 <> l14 <> l15 <> l16) <>
        (m1 <> m2 <> m3 <> m4 <> m5 <> m6 <> m7 <> m8 <> 
         m9 <> m10 <> m11 <> m12 <> m13 <> m14 <> m15 <> m16) <>
        (n1 <> n2 <> n3 <> n4 <> n5 <> n6 <> n7 <> n8 <> 
         n9 <> n10 <> n11 <> n12 <> n13 <> n14 <> n15 <> n16) <>
        (o1 <> o2 <> o3 <> o4 <> o5 <> o6 <> o7 <> o8 <> 
         o9 <> o10 <> o11 <> o12 <> o13 <> o14 <> o15 <> o16) <>
        (p1 <> p2 <> p3 <> p4 <> p5 <> p6 <> p7 <> p8 <> 
         p9 <> p10 <> p11 <> p12 <> p13 <> p14 <> p15 <> p16)) <>
        (q1 <> q2 <> q3 <> q4 <> q5 <> q6 <> q7 <> q8 <> 
         q9 <> q10 <> q11 <> q12 <> q13 <> q14 <> q15 <> q16))`;
time e (CONV_TAC (TOP_SWEEP_CONV (HO_REWR_CONV FUN_EXISTS_PROD))
          THEN REFL_TAC);

*)


(*

fun pre4 dev = 
  ((ptime "3" GEN_BETA_RULE) o
   (ptime "2" IN_OUT_SPLIT)  o
   (ptime "1" (REWRITE_RULE 
   [POSEDGE_IMP,CALL,SELECT,FINISH,ATM,SEQ,PAR,ITE,REC,
    ETA_THM,PRECEDE_def,FOLLOW_def,PRECEDE_ID,FOLLOW_ID,
    Ite_def,Par_def,Seq_def,o_THM])))
 (REFINE (DEPTHR ATM_REFINE) dev);;

*)
