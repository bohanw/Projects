A purely functional implementation and proof of correctness of the AES
(also known as "Rijndael") algorithm from Rijmen and Daemen. The AES
homepage is

    http://csrc.nist.gov/encryption/aes/

Unlike most implementations, no arrays or vectors are used in our
code. The main datastructure operated on is the `state', which is a 4x4
block of bytes (8 bit words). We model the state by a 16-tuple of bytes. 

The dependencies are:

      tablesTheory    (definition of Sboxes)
         |
         |
      MultTheory      (definition of GF_256 multiplication: 
         |             recursive, iterative, and tabled versions)
         |
      RoundOpTheory  (basic operations that happen during a round)
         |
         |
      aesTheory      (defn of rounds, key schedule, AES, correctness)


This directory is a modification of that found at <holdir>/examples/Rijndael,
and is eventually intended to serve as an application of the H/W synthesis 
package.

Major Changes:

* Integrated Scott Owens' tabled multiplication. Speeds things up 
    dramatically: on the basic example in aes.compute.example, 
    encoding then decoding a block now takes approx 15 seconds
    and 500K inference steps, vs. the 64 seconds and 2.5M inference
    steps. Also speeds up the build, especially the many lemmas 
    used to prove the invertibility of column multiplication in 
    RoundOpScript (on average, from 35 seconds to 9).

* The representation of bytes is as an abstract type "word8", 
  generated by Anthony Fox's word library.

* New definition principles, allowing total functions over
  bytes to be given by pattern-matching over byte literals, 
  has been implemented by Scott Owens.

