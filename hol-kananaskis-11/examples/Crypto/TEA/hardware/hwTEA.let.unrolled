(*---------------------------------------------------------------------------*)
(* TEA, a Tiny Encryption Algorithm                                          *)
(*                                                                           *)
(* TEA routine is a Feistel type routine although addition and subtraction   *)
(* are used as the reversible operators rather than XOR. The routine relies  *)
(* on the alternate use of XOR and ADD to provide nonlinearity. A dual shift *)
(* causes all bits of the key and data to be mixed repeatedly. The number of *)
(* rounds before a single bit change of the data or key has spread very      *)
(* close to 32 is at most six, so that sixteen cycles may suffice and the    *)
(* authors suggest 32. The key is set at 128 bits.                           *)
(* See                                                                       *)
(*                                                                           *)
(*   http://www.ftp.cl.cam.ac.uk/ftp/papers/djw-rmn/djw-rmn-tea.html         *)
(*                                                                           *)
(* for more information.                                                     *)
(*                                                                           *)
(* In this file, we will generate hardware from a presentation of TEA as a   *)
(* functional program. We also prove functional correctness (inversion).     *)
(*---------------------------------------------------------------------------*)

(*---------------------------------------------------------------------------*)
(* Make bindings to pre-existing stuff                                       *)
(*---------------------------------------------------------------------------*)

loadPath := ".." :: 
            Path.concat(HOLDIR,"examples/dev") ::
            Path.concat(HOLDIR,"examples/dev/dff") :: !loadPath;

quietdec := true;
app load ["word32Lib", "compile", "vsynth"];
open word32Theory word32Lib pairTheory arithmeticTheory compile ;
quietdec := false;

val RESTR_EVAL_TAC = computeLib.RESTR_EVAL_TAC;

compile.monitor_netlist_construction := true;

(*---------------------------------------------------------------------------*)
(* Tell the system what the combinational components are                     *)
(*---------------------------------------------------------------------------*)

val _ = add_combinational 
           ["bitwise_and", "bitwise_eor", "word_lsl", "word_asr", 
            "word_add", "word_sub", "w2n","n2w"];

vsynth.AddBinop ("XOR32",   (``UNCURRY $#  : word32#word32->word32``,  "^"));
vsynth.AddBinop ("AND32",   (``UNCURRY $&  : word32#word32->word32``,  "&"));
vsynth.AddBinop ("OR32",    (``UNCURRY $|  : word32#word32->word32``,  "|"));
vsynth.AddBinop ("ADD32",   (``UNCURRY $+  : word32#word32->word32``,  "+"));
vsynth.AddBinop ("SUB32",   (``UNCURRY $-  : word32#word32->word32``,  "-"));
vsynth.AddBinop ("EQ32",    (``UNCURRY $=  : word32#word32->bool``,    "=="));

vsynth.add_vsynth
   [(``\(in1,in2). in1 >> in2``,
     (fn[i1,i2] => ("{{31{" ^ i1 ^ "[31]}}," ^ i1 ^ "} >> " ^i2))),
    (``UNCURRY $>>``,
     (fn[i1,i2] => ("{{31{" ^ i1 ^ "[31]}}," ^ i1 ^ "} >> " ^i2)))];

vsynth.add_vsynth
   [(``\(in1,in2). in1 << in2``,
     (fn[i1,i2] => ("{{31{" ^ i1 ^ "[31]}}," ^ i1 ^ "} << " ^i2))),
    (``UNCURRY $<<``,
     (fn[i1,i2] => ("{{31{" ^ i1 ^ "[31]}}," ^ i1 ^ "} << " ^i2)))];

vsynth.add_vsynth
 [(``\(sel:bool,in1:word32,in2:word32). if sel then in1 else in2``,
   fn [i1,i2,i3] => (i1 ^ " ? " ^ i2 ^ " : " ^ i3))
 ];


(*---------------------------------------------------------------------------*)
(* Cipher types                                                              *)
(*---------------------------------------------------------------------------*)

val _ = type_abbrev("block", ``:word32 # word32``);
val _ = type_abbrev("keys",  ``:word32 # word32 # word32 # word32``);
val _ = type_abbrev("state", ``:block # keys # word32``);

(* --------------------------------------------------------------------------*)
(* Definitions used in Round computations. Often the algorithm uses the      *)
(* name                                                                      *)
(*                                                                           *)
(*   DELTA = 0x9e3779b9w                                                     *)
(*                                                                           *)
(* but we have used the literal instead.                                     *)
(* --------------------------------------------------------------------------*)

val (ShiftXor_def,_,ShiftXor_dev) = 
 hwDefine 
   `ShiftXor (x,s,k0,k1) = ((x << 4) + k0) # (x + s) # ((x >> 5) + k1)`;

add_combinational ["ShiftXor"];

(* --------------------------------------------------------------------------*)
(* One round forward computation and one round backward computation          *)
(* --------------------------------------------------------------------------*)

(*
val (Round_def,_,Round_dev) = 
 hwDefine
    `Round ((y,z),(k0,k1,k2,k3),s):state  = 
       let s' = s + 0x9e3779b9w in
       let y' = y + ShiftXor(z,s',k0,k1)
        in 
          ((y', z + ShiftXor(t,s',k2,k3)), 
           (k0,k1,k2,k3), s')`;
val (InvRound_def,_,InvRound_dev) = 
 hwDefine
    `InvRound ((y,z),(k0,k1,k2,k3),s):state  = 
       let t = z - ShiftXor(y,s,k2,k3)
       in 
         ((y - ShiftXor(t,s,k0,k1),t), (k0,k1,k2,k3), s-0x9e3779b9w)`;

add_combinational ["Round","InvRound"];
*)

val (Round2_def,_,Round2_dev) = 
 hwDefine
    `Round2 ((y,z),(k0,k1,k2,k3),s):state = 
       let s' = s + 2654435769w in
       let s'' = s' + 2654435769w in
       let y' = y + ShiftXor (z,s',k0,k1) in
       let z' = z + ShiftXor (y',s',k2,k3) in
       let y'' = y' + ShiftXor (z',s'',k0,k1) 
       in
         ((y'',z' + ShiftXor (y'',s'',k2,k3)),(k0,k1,k2,k3),s'')`;

add_combinational ["Round2"];

(*---------------------------------------------------------------------------*)
(* Arbitrary rounds of computation, indexed by word32                        *)
(*---------------------------------------------------------------------------*)

val (wRounds_def,wRounds_ind,wRounds_dev) = 
 hwDefine
   `wRounds (n,s:state) = if n=0w then s else wRounds (n-1w,Round2 s)`;

(*
val (wInvRounds_def,wInvRounds_ind,wInvRounds_dev) = 
 hwDefine
  `wInvRounds (n,s:state) = if n=0w then s else wInvRounds (n-1w,InvRound s)`;
*)

(*---------------------------------------------------------------------------*)
(* Encrypt and Decrypt (32 rounds)                                           *)
(*---------------------------------------------------------------------------*)

val (TEA_Encrypt_def,_,TEA_Encrypt_cir) = 
 newcirDefine 
   `TEA_Encrypt (keys,txt) = 
      let (result,keys,s) = wRounds (16w, (txt,keys,0w))
      in result`;

(*---------------------------------------------------------------------------*)
(* Much more efficient than the previous                                     *)
(*---------------------------------------------------------------------------*)

val (TEA_Encrypt_def,_,TEA_Encrypt_cir) = 
 newcirDefine 
   `TEA_Encrypt (keys,txt) = FST (wRounds (16w, (txt,keys,0w)))`;


(*---------------------------------------------------------------------------*)
(* |- 0x9e3779b9w << 5 = 3337565984w                                         *)
(*---------------------------------------------------------------------------*)

val (TEA_Decrypt_def,_,TEA_Decrypt_cir) = 
 newcirDefine 
   `TEA_Decrypt (keys,txt) = FST (wInvRounds (32w, (txt,keys,3337565984w)))`;


(*---------------------------------------------------------------------------*)
(* Testers (fixed keys)                                                      *)
(*---------------------------------------------------------------------------*)

val (TEA_Test_def,_,TEA_Test_cir) = 
 newcirDefine 
    `TEA_Test (w1,w2) = 
        let keys = (0w,1w,2w,3w) in
        let (w1',w2') = TEA_Decrypt (keys,TEA_Encrypt (keys,(w1,w2)))
         in
           (w1 = w1') /\ (w2 = w2')`;

val (TEA_Test_def,_,TEA_Test_cir) = 
 newcirDefine 
    `TEA_Test pt = 
        let pt' = TEA_Decrypt ((0w,1w,2w,3w),
                     TEA_Encrypt ((0w,1w,2w,3w),pt))
         in
           (FST pt' = FST pt) /\ (SND pt' = SND pt)`;

(*---------------------------------------------------------------------------*)
(* Generate Verilog for the encryptor and decryptor                          *)
(*---------------------------------------------------------------------------*)

val _ = vsynth.PRINT_VERILOG TEA_Encrypt_cir;
val _ = vsynth.PRINT_VERILOG TEA_Decrypt_cir;
val _ = vsynth.PRINT_VERILOG TEA_Test_cir;

val _ = print "Verilog for TEA_Encrypt, TEA_Decrypt, and TEA_Test has been generated.\n\
            \See TEA_Encrypt.vl, TEA_Decrypt.vl, and TEA_Test.vl.\n";

(*---------------------------------------------------------------------------*)
(* Some half-baked stuff on a general test harness (higher order) that       *)
(* can be instantiated, simplified to first order, and then synthesized to   *)
(* hardware.                                                                 *)
(*---------------------------------------------------------------------------*)

val TEST_def = Define `TEST (f:'a->'b) (e:'b) (x:'a) = (f x = e)`;
val TESTS_def = 
 Define 
   `TESTS (f:'a->'b) exlist = 
      FOLDL (\(ok,inp) (x,e). if ok=F then (ok,inp) else (TEST f e x,x))
            (T,ARB) exlist`;

(*---------------------------------------------------------------------------*)
(*     |- TESTS TEA_Test [((1w,1w),T); ((12w,10001w),T)] =                   *)
(*          if ~TEA_Test (1w,1w) then                                        *)
(*             (F,1w,1w)                                                     *)
(*          else                                                             *)
(*             TEA_Test (12w,10001w),12w,10001w)                             *)
(*---------------------------------------------------------------------------*)

val CONCRETE_TESTS_def = 
  Define 
   `CONCRETE_TESTS (x:bool) = 
      TESTS TEA_Test [((1w,1w),T); 
                      ((12w,10001w),T);
                      ((1211w,314126w),T)]`;

val CONCRETE_TESTS_THM = 
  SIMP_RULE std_ss [TESTS_def, FOLDL, TEST_def] CONCRETE_TESTS_def;

(*===========================================================================*)
(* Proofs                                                                    *)
(*===========================================================================*)

(*---------------------------------------------------------------------------*)
(* Case analysis on a block and a key and a state		             *)
(*---------------------------------------------------------------------------*)

val FORALL_BLOCK = Q.store_thm
  ("FORALL_BLOCK", 
   `(!b:block. P b) = !v0 v1. P (v0,v1)`,
    SIMP_TAC std_ss [FORALL_PROD]);

val FORALL_KEYS = Q.prove
 (`(!x:keys. P x) = !k0 k1 k2 k3. P(k0,k1,k2,k3)`,
    METIS_TAC [PAIR]
  );

val FORALL_STATE = Q.prove
 (`(!x:state. P x) = !v0 v1 k0 k1 k2 k3 sum. P((v0,v1),(k0,k1,k2,k3),sum)`,
    METIS_TAC [PAIR]
 );

val ZERO_LEM = Q.prove
(`!x. (w2n x = 0) = (x = 0w)`,
 GEN_TAC THEN EQ_TAC THEN RW_TAC std_ss [] THENL 
 [METIS_TAC [w2n_ELIM], WORD_TAC]);

val SUC_EQ_W2N = Q.prove (
 `!v x. (SUC v = w2n x) ==>
          ((v = w2n (x - 1w)) /\ ~(x = 0w) /\ ~(x <. 0w))`,
   REPEAT STRIP_TAC THENL [
        `n2w v = x - 1w` by METIS_TAC [w2n_ELIM, SUC_ONE_ADD, ADD_EVAL, WORD_EQ_SUB_RADD, WORD_ADD_COMM] THEN
                `SUC v < 2 ** WL` by METIS_TAC [w2n_LT] THEN
                `v < 2 ** WL` by RW_TAC list_ss [LESS_EQ_SUC_REFL] THEN
                `v MOD 2 ** WL = w2n (x - 1w)` by METIS_TAC [w2n_EVAL, MOD_WL_def] THEN
                METIS_TAC [LESS_MOD],
        FULL_SIMP_TAC arith_ss [] THEN
                NTAC 2 (POP_ASSUM MP_TAC) THEN
                WORD_TAC THEN
                RW_TAC arith_ss [],
	`?n. n2w n <. 0w` by METIS_TAC [word_nchotomy] THEN
		POP_ASSUM MP_TAC THEN
		RW_TAC arith_ss [LO_EVAL, MOD_WL_def, ZERO_MOD_WL]
	]
   );


(*---------------------------------------------------------------------------*)
(* Main lemmas                                                               *)
(*---------------------------------------------------------------------------*)

val OneRound_Inversion = Q.store_thm
 ("OneRound_Inversion",
  `!s:state. InvRound (Round s) = s`,
  SIMP_TAC std_ss [FORALL_STATE] THEN
  RW_TAC list_ss [Round_def, InvRound_def,WORD_ADD_SUB, LET_THM] 
  );

val Rounds_LEM_1 = Q.prove 
(`!i sum b k. k = FST(SND(wRounds (i,b,k,sum)))`,
 Induct_on `w2n i` THENL
  [RW_TAC arith_ss [Once wRounds_def] 
    THEN RULE_ASSUM_TAC SYM
    THEN RW_TAC arith_ss [] 
    THEN METIS_TAC [ZERO_LEM],
   RW_TAC std_ss [FORALL_BLOCK, FORALL_KEYS] 
     THEN `v = w2n (i - 1w)` by METIS_TAC [SUC_EQ_W2N]
     THEN RES_THEN (ASSUME_TAC o GSYM) 
     THEN RW_TAC arith_ss [Once wRounds_def,Round_def,LET_THM]]);

val [Round,InvRound] = flatten(map decls ["Round", "InvRound"]);

val Rounds_LEM_2 = Q.prove 
(`!sum b k. sum + 3337565984w = SND(SND(wRounds (32w,(b,k,sum))))`,
 SIMP_TAC std_ss [FORALL_BLOCK, FORALL_KEYS] 
   THEN RESTR_EVAL_TAC [Round] 
   THEN `!s. SND(SND(Round s)) = SND(SND s) + 0x9e3779b9w` 
        by (SIMP_TAC std_ss [FORALL_STATE] THEN RW_TAC arith_ss [Round_def])
   THEN RW_TAC std_ss [GSYM WORD_ADD_ASSOC] 
   THEN WORD_TAC
 );

(*---------------------------------------------------------------------------*)
(* Basic theorem about encryption/decryption                                 *)
(*---------------------------------------------------------------------------*)

val TEA_CORRECT = Q.store_thm
("TEA_CORRECT",
 `!(plaintext:block) (keys:keys).
     TEA_Decrypt (keys, TEA_Encrypt(keys,plaintext)) = plaintext`,
 RW_TAC list_ss [TEA_Encrypt_def, TEA_Decrypt_def] 
  THEN ASSUME_TAC ((REWRITE_RULE [WORD_ADD_CLAUSES] o 
                    Q.SPECL [`0w`,`plaintext`,`keys`]) Rounds_LEM_2) 
  THEN ASSUME_TAC (Q.SPECL [`32w`,`0w`,`plaintext`,`keys`] Rounds_LEM_1) 
  THEN Q.ABBREV_TAC `x = wRounds(32w,plaintext,keys,0w)` 
  THEN RW_TAC list_ss [] 
  THEN Q.UNABBREV_TAC `x` 
  THEN RESTR_EVAL_TAC [Round, InvRound]
  THEN RW_TAC std_ss [OneRound_Inversion]
 );

