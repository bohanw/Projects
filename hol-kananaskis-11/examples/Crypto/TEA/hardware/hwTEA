(*---------------------------------------------------------------------------*)
(* TEA, a Tiny Encryption Algorithm                                          *)
(*                                                                           *)
(* TEA routine is a Feistel type routine although addition and subtraction   *)
(* are used as the reversible operators rather than XOR. The routine relies  *)
(* on the alternate use of XOR and ADD to provide nonlinearity. A dual shift *)
(* causes all bits of the key and data to be mixed repeatedly. The number of *)
(* rounds before a single bit change of the data or key has spread very      *)
(* close to 32 is at most six, so that sixteen cycles may suffice and the    *)
(* authors suggest 32. The key is set at 128 bits.                           *)
(* See                                                                       *)
(*                                                                           *)
(*   http://www.ftp.cl.cam.ac.uk/ftp/papers/djw-rmn/djw-rmn-tea.html         *)
(*                                                                           *)
(* for more information.                                                     *)
(*                                                                           *)
(* In this file, we will generate hardware from a presentation of TEA as a   *)
(* functional program. We also prove functional correctness (inversion).     *)
(*---------------------------------------------------------------------------*)

(*---------------------------------------------------------------------------*)
(* Make bindings to pre-existing stuff                                       *)
(*---------------------------------------------------------------------------*)

loadPath := ".." :: 
            Path.concat(HOLDIR,"examples/dev") ::
            Path.concat(HOLDIR,"examples/dev/dff") :: !loadPath;

quietdec := true;
app load ["wordsLib", "compile", "vsynth"];
open wordsTheory wordsLib pairTheory arithmeticTheory compile ;
quietdec := false;

val RESTR_EVAL_TAC = computeLib.RESTR_EVAL_TAC;

compile.monitor_netlist_construction := true;

fun cirDefine qdef =
 let val (def,ind,dev) = hwDefine qdef
 in
  (def, ind, NEW_MAKE_CIRCUIT(EXPAND_COMPONENTS (REFINE_ALL dev)))
 end;


(*---------------------------------------------------------------------------*)
(* Tell the system what the combinational components are                     *)
(*---------------------------------------------------------------------------*)

val _ = add_combinational 
           ["bitwise_and", "bitwise_eor", "word_lsl", "word_lsr", 
            "word_add", "word_sub", "w2n","n2w"];

vsynth.AddBinop ("XOR32",   (``UNCURRY $#  : word32#word32->word32``,  "^"));
vsynth.AddBinop ("ADD32",   (``UNCURRY $+  : word32#word32->word32``,  "+"));
vsynth.AddBinop ("SUB32",   (``UNCURRY $-  : word32#word32->word32``,  "-"));
vsynth.AddBinop ("LSL32",   (``UNCURRY $<< : word32#num->word32``,     "<<"));
vsynth.AddBinop ("LSR32",   (``UNCURRY $>>> : word32#num->word32``,     ">>"));
vsynth.AddBinop ("EQ32",    (``UNCURRY $=  : word32#word32->bool``,    "=="));


(*---------------------------------------------------------------------------*)
(* Cipher types                                                              *)
(*---------------------------------------------------------------------------*)

val _ = type_abbrev("block", ``:word32 # word32``);
val _ = type_abbrev("key",   ``:word32 # word32 # word32 # word32``);
val _ = type_abbrev("state", ``:block # key # word32``);

(* --------------------------------------------------------------------------*)
(* Definitions used in Round computations. Often the algorithm uses the      *)
(* name                                                                      *)
(*                                                                           *)
(*   DELTA = 0x9e3779b9w                                                     *)
(*                                                                           *)
(* but we have used the literal instead.                                     *)
(* --------------------------------------------------------------------------*)

add_combinational ["ShiftXor"];

val (ShiftXor_def,_,ShiftXor_dev) = 
 hwDefine 
   `ShiftXor (x:word32,s:word32,k0:word32,k1:word32) = 
     ((x << 4) + k0) ?? (x + s) ?? ((x >>> 5) + k1)`;

(* --------------------------------------------------------------------------*)
(* One round forward computation and one round backward computation          *)
(* --------------------------------------------------------------------------*)

val (Round_def,_,Round_dev) = 
 hwDefine
    `Round ((y,z),(k0,k1,k2,k3),sum):state = 
      ((y + ShiftXor(z, sum+0x9e3779b9w, k0, k1),
        z + ShiftXor(y + ShiftXor(z, sum+0x9e3779b9w, k0, k1), 
                     sum+0x9e3779b9w, k2, k3)),
       (k0,k1,k2,k3), 
       sum+0x9e3779b9w)`;

val (InvRound_def,_,InvRound_dev) = 
 hwDefine
    `InvRound ((y,z),(k0,k1,k2,k3),sum) =
        ((y - ShiftXor(z - ShiftXor(y, sum, k2, k3), sum, k0, k1),
          z - ShiftXor(y, sum, k2, k3)), 
	 (k0,k1,k2,k3), 
         sum-0x9e3779b9w)`;

(*---------------------------------------------------------------------------*)
(* More conventional and readable presentation of the Round and InvRound     *)
(* functions.                                                                *)
(*---------------------------------------------------------------------------*)

val RoundThm = Q.prove
(`Round ((y,z),(k0,k1,k2,k3),sum):state  = 
    let sum' = sum + 0x9e3779b9w in
    let t = y + ShiftXor(z,sum',k0,k1)
    in 
      ((t, z + ShiftXor(t,sum',k2,k3)), (k0,k1,k2,k3), sum')`,
 RW_TAC list_ss [Round_def]);


val InvRoundThm = Q.prove
(`InvRound ((y,z),(k0,k1,k2,k3),sum):state  = 
    let t = z - ShiftXor(y,sum,k2,k3)
    in 
      ((y - ShiftXor(t,sum,k0,k1),t), (k0,k1,k2,k3), sum-0x9e3779b9w)`,
 RW_TAC list_ss [InvRound_def]);

(*---------------------------------------------------------------------------*)
(* Arbitrary rounds of computation, indexed by word32                        *)
(*---------------------------------------------------------------------------*)

val (wRounds_def,wRounds_ind) = 
 Defn.tprove
  (Hol_defn
    "wRounds"
    `wRounds (n:word32, s:state) = if n=0w then s else wRounds (n-1w,Round s)`,
   WF_REL_TAC `measure (w2n o FST)` THEN METIS_TAC [WORD_PRED_THM]);

val Total_wRounds = 
 prove(getTotal wRounds_def,
   RW_TAC std_ss [composeTheory.TOTAL_def] THEN
   Q.EXISTS_TAC `(w2n o FST)` THEN 
   SIMP_TAC std_ss [FORALL_PROD] THEN
   METIS_TAC [WORD_PRED_THM]);


(*---------------------------------------------------------------------------*)
(* Get the "AST" form of the circuit                                         *)
(*---------------------------------------------------------------------------*)

val wRounds_dev =
  PURE_REWRITE_RULE[GSYM compileTheory.DEV_IMP_def] 
        (RecCompileConvert (SPEC_ALL wRounds_def) Total_wRounds);

hwDefineLib := (wRounds_def,wRounds_ind,wRounds_dev) :: !hwDefineLib;

(*---------------------------------------------------------------------------*)
(* Similar development for inverse operations                                *)
(*---------------------------------------------------------------------------*)

val (wInvRounds_def,wInvRounds_ind) = 
 Defn.tprove
  (Hol_defn
    "wInvRounds"
    `wInvRounds (n:word32,s:state) = if n=0w then s else wInvRounds (n-1w,InvRound s)`,
   WF_REL_TAC `measure (w2n o FST)` THEN METIS_TAC [WORD_PRED_THM]);

val Total_wInvRounds = 
 prove(getTotal wInvRounds_def,
   RW_TAC std_ss [composeTheory.TOTAL_def] THEN
   Q.EXISTS_TAC `(w2n o FST)` THEN 
   SIMP_TAC std_ss [FORALL_PROD] THEN
   METIS_TAC [WORD_PRED_THM]);

val wInvRounds_dev =
  PURE_REWRITE_RULE[GSYM compileTheory.DEV_IMP_def] 
        (RecCompileConvert (SPEC_ALL wInvRounds_def) Total_wInvRounds);

hwDefineLib := (wInvRounds_def,wInvRounds_ind,wInvRounds_dev) :: !hwDefineLib;


(*---------------------------------------------------------------------------*)
(* Encrypt and Decrypt (32 rounds)                                           *)
(*---------------------------------------------------------------------------*)

val (TEAEncrypt_def,_,TEAEncrypt_cir) = 
 cirDefine 
   `TEAEncrypt (keys,txt) = FST (wRounds (32w, (txt,keys,0w)))`;

(*---------------------------------------------------------------------------*)
(* |- 0x9e3779b9w << 5 = 3337565984w                                         *)
(*---------------------------------------------------------------------------*)

val (TEADecrypt_def,_,TEADecrypt_cir) = 
 cirDefine 
   `TEADecrypt (keys,txt) = FST (wInvRounds (32w, (txt,keys,3337565984w)))`;

(*---------------------------------------------------------------------------*)
(* Generate Verilog for the encryptor and decryptor                          *)
(*---------------------------------------------------------------------------*)

val _ = vsynth.PRINT_VERILOG TEAEncrypt_cir;
val _ = vsynth.PRINT_VERILOG TEADecrypt_cir;

val _ = print "Verilog for TEAEncrypt and TEADecrypt has been generated.\n\
            \See TEAEncrypt.vl and TEADecrypt.vl\n";

(*===========================================================================*)
(* Proofs                                                                    *)
(*===========================================================================*)

(*---------------------------------------------------------------------------*)
(* Case analysis on a block and a key and a state		             *)
(*---------------------------------------------------------------------------*)

val FORALL_BLOCK = Q.store_thm
  ("FORALL_BLOCK", 
   `(!b:block. P b) = !v0 v1. P (v0,v1)`,
    SIMP_TAC std_ss [FORALL_PROD]);

val FORALL_KEYS = Q.prove
 (`(!x:key. P x) = !k0 k1 k2 k3. P(k0,k1,k2,k3)`,
    METIS_TAC [PAIR]
  );

val FORALL_STATE = Q.prove
 (`(!x:state. P x) = !v0 v1 k0 k1 k2 k3 sum. P((v0,v1),(k0,k1,k2,k3),sum)`,
    METIS_TAC [PAIR]
 );

val ZERO_LEM = Q.prove
(`!x. (w2n x = 0) = (x = 0w)`,
 GEN_TAC THEN EQ_TAC THEN RW_TAC std_ss [] THENL 
 [METIS_TAC [w2n_ELIM], WORD_TAC]);

val SUC_EQ_W2N = Q.prove (
 `!v x. (SUC v = w2n x) ==>
          ((v = w2n (x - 1w)) /\ ~(x = 0w) /\ ~(x <. 0w))`,
   REPEAT STRIP_TAC THENL [
        `n2w v = x - 1w` by METIS_TAC [w2n_ELIM, SUC_ONE_ADD, ADD_EVAL, WORD_EQ_SUB_RADD, WORD_ADD_COMM] THEN
                `SUC v < 2 ** WL` by METIS_TAC [w2n_LT] THEN
                `v < 2 ** WL` by RW_TAC list_ss [LESS_EQ_SUC_REFL] THEN
                `v MOD 2 ** WL = w2n (x - 1w)` by METIS_TAC [w2n_EVAL, MOD_WL_def] THEN
                METIS_TAC [LESS_MOD],
        FULL_SIMP_TAC arith_ss [] THEN
                NTAC 2 (POP_ASSUM MP_TAC) THEN
                WORD_TAC THEN
                RW_TAC arith_ss [],
	`?n. n2w n <. 0w` by METIS_TAC [word_nchotomy] THEN
		POP_ASSUM MP_TAC THEN
		RW_TAC arith_ss [LO_EVAL, MOD_WL_def, ZERO_MOD_WL]
	]
   );


(*---------------------------------------------------------------------------*)
(* Main lemmas                                                               *)
(*---------------------------------------------------------------------------*)

val OneRound_Inversion = Q.store_thm
 ("OneRound_Inversion",
  `!s:state. InvRound (Round s) = s`,
  SIMP_TAC std_ss [FORALL_STATE] THEN
  RW_TAC list_ss [Round_def, InvRound_def,WORD_ADD_SUB] 
  );

val Rounds_LEM_1 = Q.prove 
(`!i sum b k. k = FST(SND(wRounds (i,b,k,sum)))`,
 Induct_on `w2n i` THENL
  [RW_TAC arith_ss [Once wRounds_def] 
    THEN RULE_ASSUM_TAC SYM
    THEN RW_TAC arith_ss [] 
    THEN METIS_TAC [ZERO_LEM],
   RW_TAC std_ss [FORALL_BLOCK, FORALL_KEYS] 
     THEN `v = w2n (i - 1w)` by METIS_TAC [SUC_EQ_W2N]
     THEN RES_THEN (ASSUME_TAC o GSYM) 
     THEN RW_TAC arith_ss [Once wRounds_def,Round_def]]);

val [Round,InvRound] = flatten(map decls ["Round", "InvRound"]);

val Rounds_LEM_2 = Q.prove 
(`!sum b k. sum + 3337565984w = SND(SND(wRounds (32w,(b,k,sum))))`,
 SIMP_TAC std_ss [FORALL_BLOCK, FORALL_KEYS] 
   THEN RESTR_EVAL_TAC [Round] 
   THEN `!s. SND(SND(Round(s))) = SND(SND(s)) + 0x9e3779b9w` 
        by (SIMP_TAC std_ss [FORALL_STATE] THEN RW_TAC arith_ss [Round_def])
   THEN RW_TAC std_ss [GSYM WORD_ADD_ASSOC] 
   THEN WORD_TAC
 );

(*---------------------------------------------------------------------------*)
(* Basic theorem about encryption/decryption                                 *)
(*---------------------------------------------------------------------------*)

val TEA_CORRECT = Q.store_thm
("TEA_CORRECT",
 `!(plaintext:block) (keys:key).
     TEADecrypt (keys, TEAEncrypt(keys,plaintext)) = plaintext`,
 RW_TAC list_ss [TEAEncrypt_def, TEADecrypt_def] 
  THEN ASSUME_TAC ((REWRITE_RULE [WORD_ADD_CLAUSES] o 
                    Q.SPECL [`0w`,`plaintext`,`keys`]) Rounds_LEM_2) 
  THEN ASSUME_TAC (Q.SPECL [`32w`,`0w`,`plaintext`,`keys`] Rounds_LEM_1) 
  THEN Q.ABBREV_TAC `x = wRounds(32w,plaintext,keys,0w)` 
  THEN RW_TAC list_ss [] 
  THEN Q.UNABBREV_TAC `x` 
  THEN RESTR_EVAL_TAC [Round, InvRound]
  THEN RW_TAC std_ss [OneRound_Inversion]
 );

