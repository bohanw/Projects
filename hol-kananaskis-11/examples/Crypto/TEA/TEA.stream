(*				TEA, a Tiny Encryption Algorithm				  *)
(* TEA routine is a Feistel type routine although addition and subtraction are used as the        *)
(* reversible operators rather than XOR. The routine relies on the alternate use of XOR and       *)
(* ADD to provide nonlinearity. A dual shift causes all bits of the key and data to be mixed      *)
(* repeatedly.The number of rounds before a single bit change of the data or key has spread 	  *)
(* very close to 32 is at most six, so that sixteen cycles may suffice and the authors suggest 32.*)
(* The key is set at 128 bits.									  *)
(* See http://www.ftp.cl.cam.ac.uk/ftp/papers/djw-rmn/djw-rmn-tea.html for more information	  *)


(* For interactive work *)
  quietdec := true;
  app load ["metisLib","word32Theory","arithmeticTheory","llistTheory","optionTheory"];
  open word32Theory pairTheory metisLib arithmeticTheory llistTheory optionTheory;
  quietdec := false;


(*
open HolKernel Parse boolLib bossLib 
     pairTools numLib metisLib pairTheory word32Theory arithmeticTheory llistTheory;
*)

(*---------------------------------------------------------------------------*)
(* Make bindings to pre-existing stuff                                       *)
(*---------------------------------------------------------------------------*)

val RESTR_EVAL_TAC = computeLib.RESTR_EVAL_TAC;

(*---------------------------------------------------------------------------*)
(* Create the theory.                                                        *)
(*---------------------------------------------------------------------------*)

val _ = new_theory "TEA";

(*---------------------------------------------------------------------------*)
(* Additional support for llist                                              *)
(*---------------------------------------------------------------------------*)

val _ = add_listform {separator = [TOK ";", BreakSpace(1,0)],
                      leftdelim = [TOK "[|"], rightdelim = [TOK "|]"],
                      cons = "LCONS", nilstr = "LNIL"};

val _ = add_rule {term_name = "LCONS", fixity = Infixr 450,
                  pp_elements = [TOK ":::", BreakSpace(0,2)],
                  paren_style = OnlyIfNecessary,
                  block_style = (AroundSameName, (PP.INCONSISTENT, 2))};

val _ = overload_on ("+++",Term`$LAPPEND`);
val _ = set_fixity "+++" (Infixl 650);

val llist_Axiom_1 = Q.store_thm
("llist_Axiom_1",
    `!f : 'a -> ('a # 'b) option. ?g. !x. g x =
        case f x  of
            NONE -> LNIL
        || SOME (a,b) -> LCONS b (g a)`,
    GEN_TAC THEN
    STRIP_ASSUME_TAC (SPEC_ALL llist_Axiom) THEN
    Q.EXISTS_TAC `g` THEN
    GEN_TAC THEN (REPEAT CASE_TAC) THENL [
        METIS_TAC [LHD_EQ_NONE,OPTION_MAP_DEF],
        RULE_ASSUM_TAC SPEC_ALL THEN
        FULL_SIMP_TAC list_ss [] THEN
        METIS_TAC [LHDTL_EQ_SOME]]);

(*---------------------------------------------------------------------------*)
(* Type Definition                                                           *)
(*---------------------------------------------------------------------------*)

val _ = type_abbrev("block", Type`:word32 # word32`);
val _ = type_abbrev("key", Type`:word32 # word32 # word32 # word32`);
val _ = type_abbrev("state", Type`: block # key # word32`);


(*---------------------------------------------------------------------------*)
(* Case analysis on a block and a key and a state 		             *)
(*---------------------------------------------------------------------------*)

val FORALL_BLOCK = Q.store_thm
  ("FORALL_BLOCK", 
    `(!b:block. P b) = !v0 v1. P (v0,v1)`,
    SIMP_TAC std_ss [FORALL_PROD]);

val FORALL_KEYS = Q.prove
  (`(!x:key. P x) = !k0 k1 k2 k3. P(k0,k1,k2,k3)`,
    METIS_TAC [PAIR]
  );

val FORALL_STATE = Q.prove
 (`(!x:state. P x) = !v0 v1 k0 k1 k2 k3 sum. P((v0,v1),(k0,k1,k2,k3),sum)`,
    METIS_TAC [PAIR]
 );

(* --------------------------------------------------------------------------*)
(*      Unroll a stream to facilitate the proving  			     *)
(* --------------------------------------------------------------------------*)
val unroll_def = Define `
    (unroll 0 (f : state -> state) s = s) /\
    (unroll (SUC n) f s = f (unroll n f s))`;

val unroll_LEM = Q.prove (
   `!n s f. f (unroll n f s) = unroll n f (f s)`,
    Induct_on `n` THEN RW_TAC list_ss [unroll_def]
  );

(* --------------------------------------------------------------------------*)
(*	One round forward computation and one round backward computation     *)
(* --------------------------------------------------------------------------*)

val DELTA_def = Define `DELTA = 0x9e3779b9w`;

val ShiftXor_def = Define
   `ShiftXor (x, s, k0, k1) = 
	((x << 4) + k0) # (x + s) # ((x >> 5) + k1)`;

val Round_def = Define
  `Round ((y,z),(k0,k1,k2,k3),sum):state  = 
	((y + ShiftXor(z, sum+DELTA, k0, k1),
	  z + ShiftXor(y + ShiftXor(z, sum+DELTA, k0, k1), sum+DELTA, k2, k3)),
	 (k0,k1,k2,k3), sum+DELTA)`;

val RoundFun_def = Define `
    RoundFun (s: state) =
      SOME (Round s, FST (Round s))`;

val StreamG_def = new_specification (
    "StreamG",
    ["StreamG"],
    ISPEC ``RoundFun`` llist_Axiom_1);

val LNTH_FWD_UNROLL = Q.prove (
   `!n s.  THE (LNTH n (StreamG s)) =
        FST (unroll (SUC n) Round s)`,
    Induct_on `n` THENL [
        SIMP_TAC std_ss [FORALL_STATE, LNTH, unroll_def] THEN
        RW_TAC list_ss [Ntimes StreamG_def 1, RoundFun_def, LHD_THM, LTL_THM, LET_THM],
        SIMP_TAC list_ss [FORALL_STATE, Ntimes StreamG_def 1, Ntimes unroll_def 1] THEN
        RW_TAC list_ss [unroll_LEM, RoundFun_def, LNTH_THM, LTL_THM]]
    );

(* --------------------------------------------------------------------------*)

val InvRound_def = Define
  `InvRound((y,z),(k0,k1,k2,k3),sum)  =
        ((y - ShiftXor(z - ShiftXor(y, sum, k2, k3), sum, k0, k1),
          z - ShiftXor(y, sum, k2, k3)), 
	 (k0,k1,k2,k3), sum-DELTA)`;

val InvRoundFun_def = Define `
    InvRoundFun (s: state) =
      SOME (InvRound s, FST (InvRound s))`;

val InvStreamG_def = new_specification (
    "InvStreamG",
    ["InvStreamG"],
    ISPEC ``InvRoundFun`` llist_Axiom_1);

val LNTH_BWD_UNROLL = Q.prove (
   `!n s.  THE (LNTH n (InvStreamG s)) =
        FST (unroll (SUC n) InvRound s)`,
    Induct_on `n` THENL [
        SIMP_TAC std_ss [FORALL_STATE, LNTH, unroll_def] THEN
        RW_TAC list_ss [Ntimes InvStreamG_def 1, InvRoundFun_def, LHD_THM, LTL_THM, LET_THM],
        SIMP_TAC list_ss [FORALL_STATE, Ntimes InvStreamG_def 1, Ntimes unroll_def 1] THEN
        RW_TAC list_ss [unroll_LEM, InvRoundFun_def, LNTH_THM, LTL_THM]]
    );

val OneRound_Inversion = Q.store_thm
  ("OneRound_Inversion",
  `!s:state. InvRound (Round s) = s`,
  SIMP_TAC std_ss [FORALL_STATE] THEN
  RW_TAC list_ss [Round_def, InvRound_def,WORD_ADD_SUB] 
  );

(*---------------------------------------------------------------------------*)
(* Encrypt and Decrypt                                                       *)
(*---------------------------------------------------------------------------*)

val TEAEncrypt_def = Define `
  TEAEncrypt keys txt =
    THE(LNTH 31 (
        StreamG(txt,keys,0w)))`;

val TEADecrypt_def = Define `
  TEADecrypt keys txt = 
    THE(LNTH 31 (
        InvStreamG(txt,keys,DELTA << 5)))`;

(*---------------------------------------------------------------------------*)
(* Main lemmas                                                               *)
(*---------------------------------------------------------------------------*)
val Rounds_LEM_1 = Q.prove (
  `!i sum b k. k = FST(SND(unroll i Round (b,k,sum)))`,
    Induct_on `i` THENL [
	RW_TAC arith_ss [Ntimes unroll_def 1],
	SIMP_TAC std_ss [FORALL_BLOCK, FORALL_KEYS] THEN
	RW_TAC arith_ss [Ntimes unroll_def 1, Round_def, unroll_LEM] THEN
	METIS_TAC [FST, SND]]	
  );

val [Round] = decls "Round";
val [InvRound] = decls "InvRound";
val [DELTA] = decls "DELTA";

val Rounds_LEM_2 = Q.prove (
  `!sum b k. sum + (DELTA << 5) = SND(SND(unroll 32 Round (b,k,sum)))`,
   SIMP_TAC std_ss [FORALL_BLOCK, FORALL_KEYS] THEN
   RESTR_EVAL_TAC [Round, DELTA] THEN
   `!s. SND(SND(Round(s))) = SND(SND(s)) + DELTA` by
  	(SIMP_TAC std_ss [FORALL_STATE] THEN RW_TAC arith_ss [Round_def]) THEN
   RW_TAC list_ss [] THEN
   Q.SUBGOAL_THEN `!i. i << 5 = i * (1w+1w+1w+1w+1w+1w+1w+1w+1w+1w+1w+1w+1w+1w+1w+1w+
	1w+1w+1w+1w+1w+1w+1w+1w+1w+1w+1w+1w+1w+1w+1w+1w)` (ASSUME_TAC o Q.SPEC `DELTA`) THENL [
     `~(HB < 5)` by RW_TAC arith_ss [HB_def] THEN
     ASSUME_TAC LSL_EVAL THEN FULL_SIMP_TAC arith_ss [ADD_EVAL],
     ASM_REWRITE_TAC [] THEN
     RW_TAC list_ss [WORD_LEFT_ADD_DISTRIB, WORD_MULT_CLAUSES, WORD_ADD_ASSOC]]   
  );

val TEA_LEMMA = Q.store_thm
("TEA_LEMMA",
 `!(plaintext:block) (keys:key).
     TEADecrypt keys (TEAEncrypt keys plaintext) = plaintext`,
   RW_TAC list_ss [TEAEncrypt_def, TEADecrypt_def, LNTH_FWD_UNROLL,LNTH_BWD_UNROLL] THEN
   ASSUME_TAC ((REWRITE_RULE [WORD_ADD_CLAUSES] o Q.SPECL [`0w`,`plaintext`,`keys`]) Rounds_LEM_2) THEN 
   ASSUME_TAC (Q.SPECL [`32`,`0w`,`plaintext`,`keys`] Rounds_LEM_1) THEN
   Q.ABBREV_TAC `x = unroll 32 Round (plaintext,keys,0w)` THEN 
   ONCE_ASM_REWRITE_TAC [] THEN 
   RW_TAC list_ss [] THEN Q.UNABBREV_TAC `x` THEN 
   RESTR_EVAL_TAC [Round, InvRound, DELTA] THEN
   RW_TAC std_ss [OneRound_Inversion]
 );

(*---------------------------------------------------------------------------*)
(* Basic theorem about encryption/decryption                                 *)
(*---------------------------------------------------------------------------*)
val TEA_def = Define
 `TEA keys =
    (TEAEncrypt keys, TEADecrypt keys)`;

val TEA_CORRECT = Q.store_thm
  ("TEA_CORRECT",
   `!key plaintext.
       ((encrypt,decrypt) = TEA key)
       ==>
       (decrypt (encrypt plaintext) = plaintext)`,
 RW_TAC std_ss [TEA_def, TEA_LEMMA]);

val _ = export_theory();
