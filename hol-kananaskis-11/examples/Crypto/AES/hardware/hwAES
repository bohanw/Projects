(*---------------------------------------------------------------------------*)
(* Set up context                                                            *)
(*---------------------------------------------------------------------------*)

loadPath := "../" ::
            Path.concat(HOLDIR,"examples/dev") ::
            Path.concat(HOLDIR,"examples/dev/dff") :: !loadPath;
app load ["compile", "vsynth"];
quietdec := true; open wordsTheory wordsLib compile vsynth; quietdec := false;

monitor_netlist_construction := true;

fun netDefine qdef =   (* Not all the way to circuits yet *)
 let val (def,ind,dev) = hwDefine qdef
 in
   MAKE_NETLIST(EXPAND_COMPONENTS(REFINE_ALL dev))
 end;

(*---------------------------------------------------------------------------*)
(* Standard word operations become combinational.                            *)
(*---------------------------------------------------------------------------*)

val initial_combinational = !combinational_constants;
val _ = 
 add_combinational 
   ["word_lsl","word_lsr", "bitwise_eor", "bitwise_and",
    "word_msb", "word_lsb", "n2w", "w2n"];

(*---------------------------------------------------------------------------*)
(* Inform hwDefine about right shifts                                        *)
(*---------------------------------------------------------------------------*)

termination_simps := LSR1_LESS :: !termination_simps;

(*---------------------------------------------------------------------------*)
(* Set up translation of base circuits to Verilog                            *)
(*---------------------------------------------------------------------------*)

vsynth.AddBinop ("EQ8",    (``UNCURRY $=  : word8#word8->bool``,   "=="));
vsynth.AddBinop ("XOR8",   (``UNCURRY $?? : word8#word8->word8``,  "^"));
vsynth.AddBinop ("AND8",   (``UNCURRY $&& : word8#word8->word8``,  "&"));
vsynth.AddBinop ("LSL8",   (``UNCURRY $<< : word8#num->word8``,    "<<"));
vsynth.AddBinop ("ASR8",   (``UNCURRY $>> : word8#num->word8``,    ">>"));

vsynth.AddBinop ("MUL8",   (``UNCURRY $*  : word8#word8->word8``,  "*"));
vsynth.AddBinop ("ADD8",   (``UNCURRY $+  : word8#word8->word8``,  "+"));
vsynth.AddBinop ("SUB8",   (``UNCURRY $-  : word8#word8->word8``,  "-"));

(*---------------------------------------------------------------------------*)
(* Some type definitions                                                     *)
(*---------------------------------------------------------------------------*)

val _ = type_abbrev("block", 
                    ``:word8 # word8 # word8 # word8 # 
                       word8 # word8 # word8 # word8 # 
                       word8 # word8 # word8 # word8 # 
                       word8 # word8 # word8 # word8``);
val _ = type_abbrev("state", Type`:block`);
val _ = type_abbrev("key",   Type`:state`);
val _ = 
  type_abbrev ("keysched", ``:key#key#key#key#key#key#key#key#key#key#key``);

(*---------------------------------------------------------------------------*)
(* Operations on the state                                                   *)
(*---------------------------------------------------------------------------*)

val to_state_net = 
 netDefine
 `to_state ((b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15):block)
                =
            (b0,b4,b8,b12,
             b1,b5,b9,b13,
             b2,b6,b10,b14,
             b3,b7,b11,b15) : state`;

val from_state_def = 
 netDefine
 `from_state((b0,b4,b8,b12,
              b1,b5,b9,b13,
              b2,b6,b10,b14,
              b3,b7,b11,b15) :state)
   = (b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15) : block`;

val XOR_BLOCK_def = 
 netDefine
 `XOR_BLOCK ((a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15):block,
             ((b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15):block))
       =
      (a0 ?? b0,   a1 ?? b1,   a2 ?? b2,   a3 ?? b3,
       a4 ?? b4,   a5 ?? b5,   a6 ?? b6,   a7 ?? b7,
       a8 ?? b8,   a9 ?? b9,   a10 ?? b10, a11 ?? b11,
       a12 ?? b12, a13 ?? b13, a14 ?? b14, a15 ?? b15)`;

add_combinational ["to_state", "from_state", "XOR_BLOCK"];

(*---------------------------------------------------------------------------*)
(* Definition of S-boxes                                                     *)
(*---------------------------------------------------------------------------*)


(*---------------------------------------------------------------------------*)
(* Application of Sboxes to the state                                        *)
(*---------------------------------------------------------------------------*)
(*
val SubBytes_net = 
 netDefine
  `SubBytes ((b00,b01,b02,b03,
                   b10,b11,b12,b13,
                   b20,b21,b22,b23,
                   b30,b31,b32,b33) :state)
                          = 
             (Sbox b00, Sbox b01, Sbox b02, Sbox b03,
              Sbox b10, Sbox b11, Sbox b12, Sbox b13,
              Sbox b20, Sbox b21, Sbox b22, Sbox b23,
              Sbox b30, Sbox b31, Sbox b32, Sbox b33) :state`;

val InvSubBytes_net = 
 netDefine
  `InvSubBytes ((b00,b01,b02,b03,
                   b10,b11,b12,b13,
                   b20,b21,b22,b23,
                   b30,b31,b32,b33) :state)
                          = 
             (InvSbox b00, InvSbox b01, InvSbox b02, InvSbox b03,
              InvSbox b10, InvSbox b11, InvSbox b12, InvSbox b13,
              InvSbox b20, InvSbox b21, InvSbox b22, InvSbox b23,
              InvSbox b30, InvSbox b31, InvSbox b32, InvSbox b33) :state`;
*)

val ShiftRows_def = 
 netDefine
  `ShiftRows ((b00,b01,b02,b03,
               b10,b11,b12,b13,
               b20,b21,b22,b23,
               b30,b31,b32,b33) :state)
                     =
             (b00,b01,b02,b03,
              b11,b12,b13,b10,
              b22,b23,b20,b21,
              b33,b30,b31,b32) :state`;

val InvShiftRows_def = 
 netDefine
  `InvShiftRows ((b00,b01,b02,b03,
                  b11,b12,b13,b10,
                  b22,b23,b20,b21,
                  b33,b30,b31,b32) :state)
                     =
                (b00,b01,b02,b03,
                 b10,b11,b12,b13,
                 b20,b21,b22,b23,
                 b30,b31,b32,b33) :state`; 

(*---------------------------------------------------------------------------*)
(* Column multiplication                                                     *)
(*---------------------------------------------------------------------------*)

val MSB_THM = Q.prove
(`!w. word_msb (w:word8) = (w && 128w = 128w)`,
 SRW_TAC [WORD_BIT_EQ_ss] []);

val LSB_THM = Q.prove
(`!w. word_lsb (w:word8) = (w && 1w = 1w)`,
 SRW_TAC [WORD_BIT_EQ_ss] []);

val LSB_net = 
 netDefine 
  `LSB w = (w && 1w = 1w)`;

val MSB_net = 
 netDefine 
  `MSB w = (w && 128w = 128w)`;

val xtime_net = 
 netDefine
  `xtime (w:word8) = w << 1 ?? (if MSB w then 0x1Bw else 0w)`;

add_combinational ["xtime"];

(*---------------------------------------------------------------------------*)
(*    |- (2w ** x = xtime x) /\                                              *)
(*       (3w ** x = x ?? xtime x) /\                                         *)
(*       (9w ** x = x ?? xtime (xtime (xtime x))) /\                         *)
(*       (11w ** x = x ?? xtime (x ?? xtime (xtime x))) /\                   *)
(*       (13w ** x = x ?? xtime (xtime (x ?? xtime x))) /\                   *)
(*       (14w ** x = xtime (x ?? xtime (x ?? xtime x)))                      *)
(*---------------------------------------------------------------------------*)

val Two_net      = netDefine `Two w = xtime w`;
val Three_net    = netDefine `Three w = w ?? xtime w`;
val Nine_net     = netDefine `Nine w = w ?? xtime (xtime (xtime w))`;
val Eleven_net   = netDefine `Eleven w = w ?? xtime (w ?? xtime (xtime w))`;
val Thirteen_net = netDefine `Thirteen w = w ?? xtime (xtime (w ?? xtime w))`;
val Fourteen_net = netDefine `Fourteen w = xtime (w ?? xtime (w ?? xtime w))`;

add_combinational ["Two","Three","Nine","Eleven","Thirteen","Fourteen"];

val MultCol_def = 
 netDefine
 `MultCol (a,b,c,d) = 
   (Two a ?? Three b ?? c ?? d,
     a ?? Two b ?? Three c ?? d,
     a ?? b ?? Two c ?? Three d,
    Three a ?? b ?? c ?? Two d)`;

val InvMultCol_def = 
 netDefine
 `InvMultCol (a,b,c,d) = 
   (Fourteen a ?? Eleven b ?? Thirteen c ?? Nine d,
    Nine a  ?? Fourteen b ?? Eleven c ?? Thirteen d,
    Thirteen a ?? Nine b ?? Fourteen c ?? Eleven d,
    Eleven a ?? Thirteen b ?? Nine c ?? Fourteen d)`;

add_combinational ["MultCol", "InvMultCol"];

val MixColumns_net = 
 netDefine
 `MixColumns ((b00,b01,b02,b03,
               b10,b11,b12,b13,
               b20,b21,b22,b23,
               b30,b31,b32,b33) :state)
 = let (b00', b10', b20', b30') = MultCol(b00,b10,b20,b30) in
   let (b01', b11', b21', b31') = MultCol(b01,b11,b21,b31) in
   let (b02', b12', b22', b32') = MultCol(b02,b12,b22,b32) in
   let (b03', b13', b23', b33') = MultCol(b03,b13,b23,b33)
   in 
    (b00', b01', b02', b03',
     b10', b11', b12', b13',
     b20', b21', b22', b23',
     b30', b31', b32', b33') : state`;

(* Very slow at the moment ... need to improve the proof of let-thingies 
   in COMB_SYNTH_CONV.
*)
val InvMixColumns_net = 
 netDefine
 `InvMixColumns ((b00,b01,b02,b03,
               b10,b11,b12,b13,
               b20,b21,b22,b23,
               b30,b31,b32,b33) :state)
 = let (b00', b10', b20', b30') = InvMultCol(b00,b10,b20,b30) in
   let (b01', b11', b21', b31') = InvMultCol(b01,b11,b21,b31) in
   let (b02', b12', b22', b32') = InvMultCol(b02,b12,b22,b32) in
   let (b03', b13', b23', b33') = InvMultCol(b03,b13,b23,b33)
   in 
    (b00', b01', b02', b03',
     b10', b11', b12', b13',
     b20', b21', b22', b23',
     b30', b31', b32', b33') : state`;

(*---------------------------------------------------------------------------*)
(* Rotate the keys                                                           *)
(*---------------------------------------------------------------------------*)

(* Too slow?
val ROTKEYS_net = 
 netDefine
   `ROTKEYS (k0,k1,k2,k3,k4,k5,k6,k7,k8,k9,k10) =
            (k1,k2,k3,k4,k5,k6,k7,k8,k9,k10,k0) : keysched`;
*)

(* Doesn't work ... *)
val keyIndex_net = 
 netDefine 
   `keyIndex (n,keys:keysched) =
     if n <= 5 then
        if n <= 2 then 
           if n = 0 then FST keys else 
           if n = 1 then FST(SND keys) else
           (* n = 2 *)   FST(SND (SND keys)) 
        else
           if n = 3 then FST(SND (SND (SND keys)))  else 
           if n = 4 then FST(SND (SND (SND (SND keys)))) else
           (* n = 5 *)   FST(SND (SND (SND (SND (SND keys)))))
     else
        if n <= 8 then 
           if n = 6 then FST(SND (SND (SND (SND (SND (SND keys)))))) else
           if n = 7 then FST(SND (SND (SND (SND (SND (SND (SND keys))))))) else
           (* n = 8 *)   FST(SND (SND (SND (SND (SND (SND (SND (SND keys))))))))
        else
           if n = 9 then FST(SND (SND (SND (SND (SND (SND (SND (SND (SND keys)))))))))
           else (* n >= 10 *) 
                SND(SND (SND (SND (SND (SND (SND (SND (SND (SND keys)))))))))`;
